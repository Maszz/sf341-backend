var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AcessDeniedResponse.html",[0,0.032,1,2.695]],["body/classes/AcessDeniedResponse.html",[0,0.039,1,3.292,2,0.763,3,0.132,4,0.132,5,0.121,6,1.905,7,0.165,8,0.702,9,2.747,10,2.063,11,4.324,12,0.532,13,0.014,14,0.77,15,1.275,16,2.22,17,0.759,18,2.646,19,2.646,20,1.369,21,2.646,22,0.63,23,1.117,24,1.561,25,1.402,26,3.162,27,1.561,28,1.657,29,2.537,30,1.334,31,1.561,32,0.476,33,2.607,34,1.77,35,1.657,36,2.075,37,2.075,38,1.657,39,2.075,40,1.949,41,1.949,42,2.368,43,2.042,44,2.042,45,1.905,46,1.77,47,2.075,48,2.042,49,3.083,50,1.477,51,1.77,52,2.075,53,1.77,54,1.77,55,2.075,56,2.408,57,3.176,58,1.77,59,4.324,60,4.324,61,3.176,62,0.82,63,0.245,64,2.71,65,2.26,66,1.905,67,1.905,68,2.917,69,2.075,70,2.075,71,1.905,72,2.075,73,2.075,74,2.075,75,2.075,76,2.075,77,3.977,78,2.075,79,2.075,80,1.905,81,2.075,82,2.075,83,1.657,84,0.952,85,2.075,86,2.075,87,0.917,88,2.075,89,2.685,90,1.824,91,1.71,92,2.075,93,1.985,94,1.941,95,1.48,96,0.785,97,1.641,98,2.781,99,3.859,100,3.162,101,3.321,102,2.167,103,2.075,104,2.075,105,2.39,106,2.075,107,2.075,108,2.075,109,2.075,110,2.075,111,2.263,112,2.075,113,3.176,114,2.075,115,1.905,116,3.859,117,2.075,118,2.075,119,2.075,120,2.075,121,2.075,122,1.905,123,1.77,124,2.075,125,2.075,126,2.042,127,2.075,128,0.99,129,2.075,130,2.075,131,2.075,132,0.007,133,0.007]],["title/classes/AddAndRemoveParticipantDto.html",[0,0.032,134,2.695]],["body/classes/AddAndRemoveParticipantDto.html",[0,0.057,2,1.534,3,0.265,4,0.265,5,0.243,7,0.332,8,1.14,12,0.497,13,0.014,14,0.855,15,1.705,16,2.47,17,1.015,22,0.476,62,1.649,63,0.328,95,1.919,132,0.011,133,0.011,134,4.998,135,3.83,136,3.017,137,5.318,138,5.318,139,3.331,140,1.968,141,3.331]],["title/classes/AddParticipantDto.html",[0,0.032,139,2.523]],["body/classes/AddParticipantDto.html",[0,0.057,2,1.505,3,0.26,4,0.26,5,0.239,7,0.325,8,1.127,12,0.491,13,0.014,14,0.849,15,1.685,16,2.456,17,1.003,22,0.467,62,1.618,63,0.324,95,1.902,132,0.011,133,0.011,134,5.208,135,3.757,136,2.991,139,4.075,140,2.119,141,3.268,142,4.684,143,4.538,144,4.538]],["title/controllers/AppController.html",[23,1.7,145,2.901]],["body/controllers/AppController.html",[0,0.044,3,0.274,4,0.274,5,0.252,7,0.343,13,0.014,14,0.769,15,1.423,17,0.847,22,0.601,23,2.834,32,0.989,63,0.274,84,1.978,90,1.423,132,0.011,133,0.011,145,4.836,146,2.419,147,4.78,148,2.242,149,6.573,150,5.495,151,1.834,152,4.544,153,4.78,154,2.226,155,5.495]],["title/modules/AppModule.html",[156,1.7,157,2.901]],["body/modules/AppModule.html",[0,0.023,3,0.145,4,0.145,5,0.133,12,0.22,13,0.014,17,0.448,22,0.709,32,0.523,63,0.145,87,2.335,91,0.901,94,0.838,96,0.564,98,1.465,132,0.007,133,0.007,145,3.753,146,1.914,148,0.97,151,0.97,152,4.072,153,2.528,156,1.835,157,5.605,158,1.465,159,2.193,160,2.528,161,2.528,162,2.528,163,4.348,164,4.348,165,4.072,166,4.348,167,3.835,168,4.072,169,2.427,170,1.54,171,1.622,172,2.279,173,2.566,174,3.264,175,2.906,176,4.349,177,5.784,178,2.906,179,1.046,180,0.935,181,2.906,182,2.093,183,2.528,184,2.279,185,2.906,186,2.906,187,2.906,188,1.715,189,4.349,190,2.906,191,2.528,192,2.906,193,4.349,194,2.906,195,2.528,196,2.279,197,2.906,198,4.349,199,2.909,200,2.528,201,2.906,202,2.528,203,3.41,204,2.906,205,3.41,206,2.906,207,3.41,208,2.906,209,3.41,210,2.906,211,1.82,212,2.906,213,2.906,214,2.279,215,2.093,216,4.166,217,2.906,218,2.906,219,2.528,220,2.528,221,3.41,222,2.279,223,2.909,224,2.279,225,2.906,226,2.906,227,2.906,228,2.528,229,2.093,230,2.906,231,1.82,232,2.906,233,2.906,234,2.528,235,2.906,236,2.906,237,2.906,238,2.909,239,1.944,240,3.783,241,2.906,242,2.528,243,2.906,244,2.528,245,2.906,246,2.906,247,2.906,248,2.906,249,2.906,250,2.906,251,2.279,252,2.906,253,2.906,254,2.906,255,2.906,256,4.349,257,2.906,258,2.906,259,2.528,260,2.906]],["title/injectables/AppService.html",[152,2.523,261,0.872]],["body/injectables/AppService.html",[0,0.045,3,0.283,4,0.283,5,0.26,7,0.354,13,0.014,14,0.784,17,0.876,22,0.508,32,1.023,63,0.283,90,1.472,132,0.012,133,0.012,148,2.288,149,6.648,151,1.897,152,4.294,261,1.484,262,2.399,263,4.944,264,5.684,265,5.684,266,5.684,267,4.457]],["title/interfaces/ArgonHashPayload.html",[268,0.841,269,2.695]],["body/interfaces/ArgonHashPayload.html",[3,0.264,4,0.264,5,0.243,7,0.331,8,1.138,12,0.579,13,0.014,14,0.854,20,1.475,63,0.356,126,3.313,132,0.011,133,0.011,268,1.371,269,4.395,270,2.147,271,3.817,272,2.761,273,5.851,274,4.115,275,4.611,276,4.395,277,5.151,278,4.611,279,3.321]],["title/controllers/AuthController.html",[23,1.7,83,2.523]],["body/controllers/AuthController.html",[0,0.035,1,2.345,3,0.11,4,0.11,5,0.101,6,1.583,7,0.137,9,1.227,10,1.311,11,2.748,12,0.565,13,0.014,14,0.794,15,1.411,16,1.867,17,0.84,20,0.975,22,0.597,23,0.928,24,1.297,25,1.165,26,3.286,27,1.297,28,1.377,29,2.196,30,1.109,31,1.297,32,0.396,33,2.315,34,1.471,35,1.377,36,1.724,37,1.724,38,1.377,39,1.724,40,2.399,41,2.399,42,2.62,43,2.204,44,1.767,45,1.583,46,1.471,47,1.724,48,2.514,49,2.738,50,1.227,51,1.471,52,1.724,53,1.471,54,1.471,55,1.724,56,2.206,57,2.748,58,1.471,59,3.91,60,3.91,61,2.748,62,0.682,63,0.218,64,2.345,65,2.783,66,2.524,67,2.524,68,3.591,69,3.91,70,2.748,71,2.524,72,2.748,73,2.748,74,2.748,75,2.748,76,2.748,77,4.469,78,2.748,79,2.748,80,2.524,81,1.724,82,1.724,83,2.196,84,0.791,85,2.748,86,1.724,87,0.762,88,1.724,89,2.599,90,1.871,91,2.153,92,1.724,93,2.276,94,1.823,95,1.338,96,1.181,97,1.42,98,2.514,99,3.427,100,2.927,101,3.075,102,1.924,103,1.724,104,1.724,105,2.068,106,1.724,107,1.724,108,1.724,109,1.724,110,1.724,111,2.505,112,1.724,113,2.748,114,1.724,115,1.583,116,3.91,117,1.724,118,1.724,119,1.724,120,1.724,121,2.748,122,2.524,123,2.924,124,1.724,125,1.724,126,2.514,127,1.724,128,1.311,129,1.724,130,1.724,131,1.724,132,0.006,133,0.006,146,0.968,148,1.17,151,1.818,179,1.961,180,1.752,280,1.583,281,1.377,282,3.505,283,3.049,284,3.505,285,2.199,286,2.199,287,2.199,288,2.199,289,2.199,290,2.199,291,2.199,292,2.199,293,1.913,294,2.199,295,2.199,296,2.199,297,2.199,298,2.199,299,2.199,300,2.199,301,2.199,302,2.199,303,2.199,304,2.199,305,2.199]],["title/interfaces/AuthKey.html",[268,0.841,306,3.159]],["body/interfaces/AuthKey.html",[3,0.27,4,0.27,5,0.248,7,0.338,8,1.154,12,0.568,13,0.014,14,0.942,63,0.27,132,0.011,133,0.011,268,1.132,270,2.196,306,5.224,307,4.717,308,6.543,309,6.543,310,6.543,311,6.543]],["title/modules/AuthModule.html",[156,1.7,163,2.695]],["body/modules/AuthModule.html",[0,0.035,3,0.22,4,0.22,5,0.202,13,0.014,22,0.69,32,0.794,33,4.236,34,2.95,63,0.22,83,4.1,132,0.01,133,0.01,146,2.57,156,2.464,158,2.224,159,2.944,163,5.381,168,4.665,169,3.258,170,2.336,171,2.461,173,3.445,174,3.657,183,3.836,200,3.836,312,3.836,313,4.41,314,3.836,315,3.836,316,4.982,317,4.982,318,4.41,319,3.906,320,5.838,321,2.461,322,4.41,323,3.458,324,4.41,325,4.41,326,4.41,327,4.41,328,4.41]],["title/injectables/AuthService.html",[33,2.134,261,0.872]],["body/injectables/AuthService.html",[0,0.013,3,0.079,4,0.079,5,0.073,7,0.099,8,0.466,12,0.504,13,0.014,14,0.834,17,0.949,22,0.564,32,0.287,33,1.425,40,1.973,41,1.973,42,0.766,45,1.147,48,0.803,50,0.889,63,0.079,87,1.21,90,1.5,91,2.275,93,2.401,94,2.129,95,1.73,96,1.195,97,1.414,100,0.803,101,0.844,102,3.283,111,2.754,122,2.514,128,2.166,132,0.005,133,0.005,148,0.898,151,1.857,154,1.661,179,2.084,180,1.863,199,1.066,216,3.811,261,0.582,262,0.672,269,1.066,272,1.476,274,1.685,276,1.066,279,2.569,283,2.34,293,2.34,323,1.249,329,1.386,330,3.533,331,3.491,332,3.491,333,2.69,334,2.69,335,2.69,336,2.69,337,2.69,338,2.69,339,2.69,340,1.135,341,1.386,342,2.392,343,5.293,344,1.414,345,1.661,346,2.69,347,2.69,348,1.593,349,2.737,350,1.066,351,2.69,352,1.593,353,2.69,354,1.593,355,1.593,356,2.69,357,5.791,358,1.593,359,2.69,360,1.593,361,1.593,362,2.69,363,1.593,364,1.593,365,2.69,366,1.593,367,1.593,368,0.998,369,1.147,370,1.593,371,1.386,372,0.998,373,1.249,374,1.593,375,1.593,376,1.386,377,1.386,378,0.803,379,2.69,380,1.593,381,1.593,382,1.386,383,4.102,384,1.593,385,4.102,386,1.593,387,4.583,388,1.593,389,2.69,390,2.69,391,1.593,392,1.593,393,2.514,394,1.249,395,1.425,396,1.593,397,5.988,398,4.583,399,3.263,400,1.593,401,2.69,402,2.69,403,4.583,404,2.737,405,2.69,406,3.568,407,2.69,408,2.34,409,2.173,410,1.476,411,4.102,412,1.593,413,2.69,414,1.593,415,1.593,416,4.102,417,2.34,418,2.69,419,1.593,420,1.593,421,1.593,422,4.583,423,1.593,424,1.948,425,1.593,426,1.593,427,4.102,428,2.69,429,2.34,430,2.69,431,2.514,432,2.69,433,2.69,434,2.69,435,2.69,436,2.34,437,2.69,438,1.593,439,2.69,440,2.69,441,2.69,442,2.69,443,1.593,444,1.593,445,1.386,446,2.69,447,1.593,448,1.593,449,1.593,450,2.69,451,1.593,452,1.593,453,1.593,454,2.69,455,2.69,456,1.593,457,2.69]],["title/interfaces/CacheDatabaseConfig.html",[268,0.841,458,3.159]],["body/interfaces/CacheDatabaseConfig.html",[3,0.262,4,0.262,5,0.241,7,0.328,8,1.134,12,0.578,13,0.014,14,0.815,20,2.243,63,0.262,115,5.126,132,0.011,133,0.011,224,5.838,229,5.361,231,4.664,268,1.099,270,2.133,458,5.131,459,4.582,460,6.476,461,6.476]],["title/classes/CreateEventDto.html",[0,0.032,462,2.248]],["body/classes/CreateEventDto.html",[0,0.055,2,1.084,3,0.187,4,0.187,5,0.172,7,0.234,8,0.907,12,0.561,13,0.014,14,0.922,15,1.776,16,2.655,17,1.057,22,0.539,56,1.522,62,1.165,63,0.342,89,2.537,96,0.729,128,1.406,132,0.009,133,0.009,136,1.586,140,1.124,462,2.923,463,4.448,464,2.354,465,3.193,466,2.39,467,4.033,468,3.454,469,3.758,470,3.758,471,3.758,472,3.758,473,3.758,474,3.193,475,2.654,476,1.255,477,3.288,478,2.514,479,3.847,480,1.815,481,2.923,482,3.364,483,2.098,484,2.514,485,2.514,486,2.098,487,2.098,488,2.098,489,2.098]],["title/classes/CreateEventResponseDto.html",[0,0.032,486,2.248]],["body/classes/CreateEventResponseDto.html",[0,0.056,2,1.166,3,0.201,4,0.201,5,0.185,7,0.252,8,0.954,12,0.532,13,0.014,14,0.909,15,1.426,16,2.647,17,0.849,22,0.56,56,1.638,62,1.254,63,0.351,89,2.143,96,0.784,128,1.513,132,0.009,133,0.009,136,1.706,140,1.209,462,2.257,463,3.924,464,2.533,465,2.142,466,2.336,467,2.705,468,2.918,474,3.847,475,3.098,476,1.35,477,3.392,478,2.705,479,4.284,480,1.909,481,3.074,482,3.754,483,2.257,484,2.705,485,2.705,486,3.074,487,2.257,488,2.257,489,2.257,490,4.791,491,4.043,492,4.043]],["title/classes/EventChatDto.html",[0,0.032,479,2.377]],["body/classes/EventChatDto.html",[0,0.056,2,1.141,3,0.197,4,0.197,5,0.181,7,0.247,8,0.94,12,0.545,13,0.014,14,0.916,15,1.604,16,2.657,17,0.955,22,0.554,56,1.602,62,1.227,63,0.348,89,2.111,96,0.767,128,1.48,132,0.009,133,0.009,136,2.614,140,1.183,462,2.208,463,4.175,464,2.478,465,2.096,466,2.376,467,2.647,468,2.875,474,3.281,475,2.727,476,1.321,477,3.361,478,2.647,479,4.12,480,2.31,481,3.72,482,3.457,483,2.208,484,2.647,485,2.647,486,2.208,487,2.208,488,2.208,489,2.208,493,3.956,494,3.956,495,3.956]],["title/controllers/EventController.html",[23,1.7,496,2.901]],["body/controllers/EventController.html",[0,0.025,3,0.156,4,0.156,5,0.144,7,0.196,12,0.569,13,0.014,14,0.624,15,1.555,16,1.009,17,0.926,22,0.598,23,1.324,24,1.851,25,1.662,26,1.582,27,3.216,28,1.966,29,1.966,30,1.582,31,1.851,32,0.565,56,2.59,58,2.099,62,0.973,63,0.156,84,1.129,89,2.488,90,1.555,91,2.337,93,2.55,94,1.328,96,1.24,105,3.216,132,0.008,133,0.008,136,1.943,139,3.762,141,3.762,146,1.381,148,1.537,151,2.005,179,2.162,180,1.932,280,2.26,410,1.657,462,3.351,465,1.662,466,1.481,468,1.662,474,3.893,476,1.047,480,2.316,482,3.042,486,2.569,487,2.569,496,3.315,497,2.729,498,4.603,499,3.926,500,4.603,501,5.452,502,3.138,503,3.138,504,7.084,505,4.603,506,3.138,507,3.388,508,3.138,509,3.138,510,3.138,511,3.138,512,4.603,513,3.138,514,3.138,515,3.138,516,3.138,517,3.138,518,3.138,519,3.138,520,2.26,521,3.042,522,2.729,523,3.138,524,3.138,525,3.138,526,3.138,527,3.138,528,3.138,529,3.138,530,3.138,531,3.138,532,3.138,533,3.138,534,3.138,535,3.138,536,3.138,537,3.138,538,3.138,539,3.138,540,3.138,541,3.138,542,3.138,543,3.138]],["title/classes/EventDto.html",[0,0.032,482,2.248]],["body/classes/EventDto.html",[0,0.053,2,0.985,3,0.17,4,0.17,5,0.156,7,0.213,8,0.848,12,0.579,13,0.014,14,0.915,15,1.912,16,2.651,17,1.138,22,0.512,56,1.384,62,1.059,63,0.33,89,2.432,96,1.11,128,1.278,132,0.008,133,0.008,136,1.442,140,1.022,462,1.907,463,4.693,464,2.14,465,1.81,466,2.439,467,2.286,468,3.311,474,3.031,475,2.519,476,1.14,477,3.151,478,2.286,479,3.687,480,2.166,481,3.488,482,3.488,483,3.193,484,3.828,485,3.828,486,1.907,487,1.907,488,1.907,489,1.907,544,3.417,545,3.417,546,3.417,547,3.417,548,3.417,549,3.417,550,3.417,551,3.417,552,3.417]],["title/modules/EventModule.html",[156,1.7,164,2.695]],["body/modules/EventModule.html",[0,0.041,3,0.254,4,0.254,5,0.233,13,0.014,22,0.658,32,0.916,63,0.254,132,0.011,133,0.011,146,2.819,156,2.703,158,2.566,159,3.229,164,5.314,167,4.565,169,3.574,170,2.696,171,2.84,173,3.778,174,4.012,196,3.99,496,5.046,521,4.318,522,4.427,553,4.427,554,5.089,555,4.427,556,5.089,557,3.229,558,3.99,559,5.089]],["title/injectables/EventService.html",[261,0.872,521,2.248]],["body/injectables/EventService.html",[0,0.023,3,0.142,4,0.142,5,0.131,7,0.178,12,0.464,13,0.014,14,0.807,17,0.948,22,0.461,32,0.514,63,0.142,87,1.787,89,1.67,90,1.485,91,2.291,93,1.545,94,1.862,95,1.798,96,1.299,97,1.157,102,2.706,132,0.007,133,0.007,136,2.827,148,1.433,151,1.914,154,1.739,179,2.213,180,1.977,261,0.929,262,1.205,268,0.896,272,2.585,330,2.532,340,1.811,344,2.49,345,2.323,350,3.45,378,1.44,395,1.513,465,1.513,466,1.659,468,2.274,474,3.038,475,2.524,476,0.953,480,2.238,488,2.395,489,2.878,499,3.714,521,2.395,557,3.378,560,2.057,561,4.292,562,4.292,563,4.292,564,2.239,565,2.856,566,3.366,567,4.481,568,2.856,569,2.856,570,3.836,571,2.856,572,3.366,573,2.856,574,3.366,575,2.856,576,1.911,577,2.871,578,2.871,579,2.239,580,2.239,581,2.239,582,2.239,583,2.239,584,2.239,585,2.239,586,4.044,587,2.239,588,2.395,589,2.239,590,2.871,591,4.497,592,3.366,593,2.239,594,1.911,595,1.685]],["title/classes/GetEventByIdDto.html",[0,0.032,487,2.248]],["body/classes/GetEventByIdDto.html",[0,0.051,2,0.902,3,0.156,4,0.156,5,0.143,7,0.195,8,0.795,12,0.584,13,0.014,14,0.904,15,1.95,16,2.641,17,1.161,22,0.486,56,1.266,62,0.969,63,0.318,89,2.332,96,1.055,128,1.169,132,0.008,133,0.008,136,1.319,140,1.373,142,5.2,462,1.745,463,3.755,464,1.958,465,1.656,466,2.394,467,2.091,468,3.175,474,2.882,475,2.811,476,1.043,477,3.366,478,2.091,479,3.767,480,2.077,481,3.345,482,4.244,483,3.036,484,3.639,485,3.639,486,1.745,487,2.562,488,3.036,489,3.036,490,2.719,596,3.126,597,3.126,598,2.451,599,3.126,600,3.126,601,3.126,602,3.126,603,3.126,604,3.126,605,3.126,606,3.126,607,3.126,608,3.126]],["title/classes/GetMessageInput.html",[0,0.032,609,2.695]],["body/classes/GetMessageInput.html",[0,0.042,2,0.861,3,0.149,4,0.149,5,0.137,7,0.186,8,0.769,10,2.613,12,0.4,13,0.014,14,0.816,15,1.371,17,0.816,20,1.631,22,0.608,25,1.581,32,0.537,63,0.264,84,1.074,87,2.356,90,1.518,91,1.642,94,1.807,102,1.953,132,0.007,133,0.007,154,1.209,180,1.885,188,1.761,238,1.997,239,1.997,272,2.255,281,1.87,344,1.209,410,1.074,466,0.96,475,1.953,476,0.996,480,2.031,507,1.581,588,1.666,609,3.921,610,1.997,611,3.458,612,4.152,613,4.152,614,4.152,615,4.895,616,2.985,617,4.511,618,4.596,619,3.479,620,2.985,621,3.195,622,2.985,623,4.221,624,2.149,625,2.34,626,2.34,627,3.479,628,2.34,629,2.34,630,4.152,631,2.34,632,3.542,633,2.34,634,2.134,635,1.87,636,1.87,637,2.34,638,2.34,639,4.221,640,2.968,641,1.997,642,2.35,643,2.34,644,1.87,645,2.34,646,3.479,647,2.34,648,2.34,649,2.34,650,1.761,651,2.34,652,1.761,653,2.34,654,2.34,655,1.761,656,2.34,657,2.34,658,2.34,659,2.34,660,2.34,661,2.34,662,2.34,663,2.34,664,1.997,665,2.34,666,2.34,667,2.34,668,2.34,669,2.34,670,3.479,671,2.34,672,3.195,673,2.34,674,2.34,675,2.34,676,2.34]],["title/injectables/GoogleOauthGuard.html",[261,0.872,677,3.159]],["body/injectables/GoogleOauthGuard.html",[0,0.047,3,0.295,4,0.295,5,0.271,13,0.014,22,0.629,32,1.067,63,0.295,132,0.012,133,0.012,140,1.773,261,1.521,262,2.502,321,3.308,677,5.513,678,5.157,679,5.157,680,4.269,681,5.928]],["title/interfaces/IAddParticipantArgs.html",[268,0.841,567,2.695]],["body/interfaces/IAddParticipantArgs.html",[0,0.026,3,0.163,4,0.163,5,0.15,7,0.204,8,0.823,12,0.359,13,0.014,14,0.86,22,0.5,32,0.589,63,0.163,87,1.936,89,1.848,90,1.587,91,1.9,93,1.179,94,1.957,95,1.992,96,0.921,97,1.326,102,2.864,132,0.008,133,0.008,136,3.084,154,1.923,261,1.028,268,0.991,270,1.326,272,2.519,330,2.801,340,1.382,344,2.263,345,1.923,378,1.651,395,1.735,465,1.735,466,1.797,468,2.516,474,3.246,475,2.698,476,1.093,480,2.351,488,2.65,489,3.118,499,2.358,521,1.827,557,3.09,560,2.358,566,2.568,567,4.099,570,3.177,572,2.568,574,2.568,576,2.191,577,3.177,578,3.177,579,2.568,580,2.568,581,2.568,582,2.568,583,2.568,584,2.568,585,2.568,586,4.381,587,2.568,588,2.65,589,2.568,590,3.177,591,4.805,592,3.723,593,2.568,594,2.191,595,1.932]],["title/interfaces/ICreateEventArgs.html",[268,0.841,570,2.695]],["body/interfaces/ICreateEventArgs.html",[0,0.025,3,0.157,4,0.157,5,0.144,7,0.196,8,0.799,12,0.483,13,0.014,14,0.885,22,0.488,32,0.566,63,0.157,87,1.891,89,2.49,90,1.557,91,1.864,93,1.132,94,1.929,95,1.855,96,1.241,97,1.273,102,2.817,132,0.008,133,0.008,136,2.823,154,1.867,261,0.998,268,0.962,270,1.273,272,2.488,330,2.719,340,1.327,344,2.211,345,1.867,378,1.585,395,1.665,465,3.184,466,2.28,468,3.39,474,3.184,475,2.646,476,1.049,480,2.318,488,2.572,489,3.046,499,2.264,521,1.754,557,3.031,560,2.264,566,2.465,567,3.651,570,3.651,572,2.465,574,2.465,576,2.103,577,3.084,578,3.084,579,2.465,580,2.465,581,2.465,582,2.465,583,2.465,584,2.465,585,2.465,586,4.28,587,2.465,588,2.572,589,2.465,590,3.084,591,4.713,592,3.614,593,2.465,594,2.103,595,1.855]],["title/interfaces/ISendMessageToChatArgs.html",[268,0.841,682,2.901]],["body/interfaces/ISendMessageToChatArgs.html",[0,0.023,3,0.146,4,0.146,5,0.134,7,0.183,8,0.758,9,3.242,10,2.657,12,0.439,13,0.014,14,0.827,20,1.218,22,0.468,30,2.207,32,0.528,48,2.207,63,0.146,84,1.055,87,1.016,90,1.799,91,2.095,93,2.238,94,1.676,132,0.007,133,0.007,261,0.947,268,0.612,270,1.188,272,2.238,344,1.773,345,1.773,368,1.837,378,1.478,395,1.553,409,3.455,410,2.238,466,2.325,475,2.306,476,0.979,480,1.815,588,1.636,594,1.961,595,2.583,611,4.189,634,1.41,642,3.58,650,3.091,652,3.091,655,3.091,664,1.961,682,3.772,683,2.299,684,3.808,685,5.054,686,2.55,687,2.55,688,3.772,689,2.55,690,2.55,691,3.505,692,2.55,693,2.55,694,2.55,695,2.55,696,2.55,697,2.55,698,2.55,699,2.55,700,2.55,701,2.55,702,3.808,703,3.152,704,3.152,705,3.152,706,3.808,707,4.184,708,3.808,709,3.808,710,3.808,711,3.808,712,3.152,713,2.55,714,2.55,715,2.55,716,2.55]],["title/interfaces/IUpdateProfileParamsArgs.html",[268,0.841,717,2.901]],["body/interfaces/IUpdateProfileParamsArgs.html",[0,0.028,3,0.176,4,0.176,5,0.162,7,0.22,8,0.869,9,2.799,10,1.876,12,0.479,13,0.014,14,0.819,20,1.395,22,0.521,32,0.636,63,0.176,84,1.272,90,1.803,91,2.078,93,2.284,94,1.681,95,1.922,96,0.685,128,1.876,132,0.008,133,0.008,154,1.431,261,1.085,268,0.737,270,1.431,272,2.412,274,3.142,342,1.7,344,2.031,345,2.031,368,2.213,378,1.782,394,2.771,395,1.872,409,2.657,410,1.272,424,2.799,476,1.18,507,1.872,595,2.085,650,3.439,652,3.439,655,3.439,688,4.198,691,3.355,703,2.544,704,2.544,705,2.544,707,2.544,717,4.198,718,2.771,719,5.458,720,2.771,721,2.771,722,3.074,723,3.074,724,2.544,725,4.362,726,5.071,727,4.362,728,3.074,729,3.074,730,3.074,731,3.074,732,3.074,733,3.074,734,3.074,735,3.074,736,3.074,737,3.074,738,3.074,739,3.074,740,3.074,741,3.074,742,4.362,743,3.074,744,2.364]],["title/injectables/JwtAuthGuard.html",[35,2.523,261,0.872]],["body/injectables/JwtAuthGuard.html",[0,0.032,3,0.35,4,0.201,5,0.185,7,0.252,12,0.415,13,0.014,17,0.964,22,0.601,32,0.726,35,3.445,63,0.201,84,1.452,87,1.398,90,1.74,94,1.163,96,1.213,128,2.63,132,0.009,133,0.009,140,1.206,148,1.836,151,1.836,179,2.252,180,2.012,261,1.19,262,1.702,321,2.251,340,1.702,342,1.94,369,2.905,409,2.913,410,1.452,680,2.905,745,5.269,746,3.509,747,4.312,748,4.312,749,3.509,750,6.312,751,4.033,752,4.312,753,4.838,754,4.033,755,2.527,756,4.312,757,4.033,758,5.269,759,4.312,760,2.905,761,3.163,762,2.905,763,3.163,764,3.163,765,3.163,766,3.163,767,3.163,768,3.163,769,3.163,770,3.163,771,3.163,772,3.163,773,4.783,774,3.509,775,3.509,776,3.509,777,4.312,778,3.163,779,3.163,780,3.163,781,3.163]],["title/injectables/JwtAuthGuardGraphql.html",[261,0.872,636,2.523]],["body/injectables/JwtAuthGuardGraphql.html",[0,0.029,3,0.339,4,0.183,5,0.168,7,0.229,12,0.45,13,0.014,17,0.995,22,0.608,32,0.661,63,0.183,84,1.323,87,1.274,90,1.761,94,1.718,96,1.252,128,2.544,132,0.009,133,0.009,140,1.099,148,1.721,151,1.988,179,2.324,180,2.077,188,2.168,261,1.116,262,1.551,281,4.26,321,2.051,340,1.551,342,1.768,369,2.646,409,2.731,410,1.323,636,3.23,680,2.646,745,5.332,747,4.043,748,4.043,749,3.197,750,6.132,752,4.043,753,5.213,755,3.23,756,4.043,758,5.063,759,4.043,760,2.646,761,2.882,762,2.646,763,2.882,764,2.882,765,2.882,766,2.882,767,2.882,768,2.882,769,2.882,770,2.882,771,2.882,772,2.882,773,4.485,774,3.197,775,3.197,776,3.197,777,4.043,778,2.882,779,2.882,780,2.882,781,2.882,782,3.197,783,5.156,784,3.675,785,3.675,786,5.156,787,3.675,788,3.675,789,3.675,790,4.485,791,5.156,792,3.675]],["title/interfaces/JwtPayload.html",[268,0.841,793,2.377]],["body/interfaces/JwtPayload.html",[3,0.255,4,0.255,5,0.234,7,0.319,8,1.114,12,0.557,13,0.014,14,0.91,20,2.188,63,0.35,95,1.374,111,3.389,126,2.582,132,0.011,133,0.011,140,1.531,268,1.467,270,2.074,372,3.208,399,4.022,793,4.146,794,3.687,795,4.113,796,4.113,797,3.021]],["title/interfaces/JwtPayloadForSign.html",[268,0.841,372,2.523]],["body/interfaces/JwtPayloadForSign.html",[3,0.267,4,0.267,5,0.245,7,0.334,8,1.145,12,0.499,13,0.014,14,0.897,20,2.14,63,0.357,95,2.01,111,2.461,126,2.699,132,0.011,133,0.011,140,1.6,268,1.496,270,2.168,372,4.14,399,4.075,793,3.899,794,3.854,795,2.987,796,2.987,797,3.158]],["title/interfaces/JwtPayloadWithRt.html",[268,0.841,797,2.377]],["body/interfaces/JwtPayloadWithRt.html",[3,0.271,4,0.271,5,0.249,7,0.339,8,1.157,12,0.411,13,0.014,14,0.9,20,2.009,63,0.36,95,1.46,111,2.502,126,3.797,132,0.011,133,0.011,140,1.996,268,1.507,270,2.204,372,3.408,399,3.536,793,4.261,794,3.918,795,3.036,796,3.036,797,3.938]],["title/injectables/JwtStrategy.html",[261,0.872,316,2.695]],["body/injectables/JwtStrategy.html",[0,0.024,3,0.148,4,0.148,5,0.136,7,0.185,12,0.399,13,0.014,17,0.681,22,0.666,26,2.228,32,0.534,33,3.595,34,1.986,63,0.148,77,2.956,87,1.029,90,1.618,91,1.637,93,1.59,94,1.802,95,1.417,96,0.857,102,2.884,128,2.187,132,0.007,133,0.007,140,0.888,148,1.475,151,0.991,154,2.748,179,1.59,180,1.421,199,1.986,214,2.328,215,2.138,216,4.886,223,2.956,234,2.582,251,4.138,261,0.956,262,1.253,272,1.069,276,2.956,279,2.768,316,2.956,321,1.657,330,4.003,340,1.865,341,2.582,342,3.152,344,2.138,345,2.368,349,4.584,369,2.138,373,2.328,378,1.497,382,2.582,404,2.328,406,2.582,408,2.582,417,4.591,424,1.657,429,2.582,436,2.582,445,2.582,480,1.029,557,2.661,712,2.138,762,2.138,778,2.328,793,3.449,798,2.582,799,3.843,800,6.785,801,3.263,802,2.969,803,4.418,804,2.969,805,2.582,806,2.582,807,2.328,808,3.182,809,2.582,810,2.582,811,2.582,812,2.969,813,2.969,814,3.843,815,2.582,816,2.582,817,2.582,818,2.582,819,3.843,820,2.582,821,2.582,822,2.582,823,2.969,824,2.969,825,2.969,826,5.846,827,2.969,828,2.969,829,5.278,830,2.969,831,2.969,832,4.418,833,4.418,834,2.969]],["title/injectables/LoggerMiddleware.html",[211,2.523,261,0.872]],["body/injectables/LoggerMiddleware.html",[0,0.039,3,0.241,4,0.241,5,0.221,7,0.302,12,0.468,13,0.014,17,0.956,22,0.612,26,2.438,30,3.451,32,0.87,48,3.64,49,4.521,50,2.699,63,0.241,65,3.46,84,1.741,96,1.202,132,0.01,133,0.01,148,2.07,151,1.614,154,1.959,179,2.232,180,1.994,182,4.465,211,3.884,261,1.342,262,2.041,340,2.041,557,3.126,564,3.792,801,4.028,835,4.206,836,4.836,837,6.2,838,7.218,839,7.218,840,4.836,841,6.2,842,4.206,843,4.206,844,4.836]],["title/modules/LoggerModule.html",[156,1.7,165,2.523]],["body/modules/LoggerModule.html",[0,0.031,3,0.19,4,0.19,5,0.175,13,0.014,22,0.667,32,0.687,63,0.19,65,3.393,89,1.486,132,0.009,133,0.009,146,1.681,156,3.298,158,1.926,159,2.671,165,4.895,167,4.21,169,2.956,170,2.023,171,2.131,173,4.069,174,3.318,196,2.995,211,4.895,267,5.738,319,4.614,557,3.907,558,4.153,801,4.393,842,3.322,845,3.322,846,3.819,847,3.322,848,3.322,849,3.819,850,5.296,851,5.711,852,5.296,853,5.296,854,5.296,855,5.296,856,5.296,857,6.08,858,5.296,859,5.296,860,5.296,861,5.296,862,3.819,863,3.819,864,3.819,865,3.819,866,3.819]],["title/injectables/LoggerService.html",[261,0.872,801,2.248]],["body/injectables/LoggerService.html",[0,0.018,3,0.111,4,0.111,5,0.102,7,0.14,9,3.264,10,2.931,12,0.481,13,0.014,14,0.909,17,0.981,22,0.45,32,0.403,48,1.792,50,1.249,63,0.111,89,1.959,90,0.579,91,1.371,93,1.279,96,1.234,132,0.006,133,0.006,148,1.186,151,2.047,154,1.44,179,2.29,180,2.046,182,5.022,242,3.846,259,3.846,261,0.769,262,0.944,267,2.787,272,1.592,330,3.241,340,1.5,344,2.225,345,2.04,378,1.128,410,1.978,466,1.767,476,0.747,520,4.415,557,3.456,564,1.754,576,5.184,577,2.378,578,2.378,755,5.138,801,1.983,851,3.092,867,1.946,868,3.554,869,3.554,870,3.554,871,4.421,872,5.848,873,2.237,874,3.554,875,4.421,876,2.237,877,3.554,878,2.237,879,5.848,880,3.554,881,5.494,882,2.237,883,5.848,884,5.962,885,3.554,886,3.554,887,3.554,888,2.237,889,3.554,890,2.237,891,3.554,892,2.237,893,3.554,894,2.237,895,2.237,896,5.494,897,4.779,898,2.237,899,2.237,900,2.237,901,2.237,902,2.237,903,2.237,904,2.237,905,2.237,906,2.237,907,2.237,908,2.237,909,2.237,910,2.237]],["title/classes/Message.html",[0,0.032,10,1.507]],["body/classes/Message.html",[0,0.034,2,1.239,3,0.214,4,0.214,5,0.197,7,0.268,8,0.994,10,2.688,12,0.543,13,0.014,14,0.911,15,1.86,17,1.107,20,1.596,22,0.384,63,0.214,87,2.561,132,0.01,133,0.01,180,2.218,188,2.534,466,2.427,480,2.239,614,5.633,615,5.322,617,3.093,623,3.093,624,4.131,639,5.173,641,4.322,642,3.422,911,3.736,912,6.46,913,4.295,914,4.295,915,4.295,916,4.295,917,4.295]],["title/controllers/MessageController.html",[23,1.7,918,2.695]],["body/controllers/MessageController.html",[0,0.034,3,0.212,4,0.212,5,0.195,7,0.265,10,2.404,12,0.519,13,0.014,14,0.819,15,1.476,17,0.878,22,0.51,23,1.794,24,2.508,25,2.252,26,2.144,27,2.508,28,2.663,29,2.663,30,2.144,31,2.508,32,0.765,63,0.212,84,1.53,90,1.476,91,2.285,93,2.471,94,1.226,96,1.105,105,3.361,132,0.01,133,0.01,136,1.794,146,1.872,148,1.902,151,1.902,179,2.051,180,1.833,268,0.887,274,3.569,280,3.061,410,1.53,466,2.208,507,3.637,611,3.361,634,3.092,635,2.663,642,3.018,918,3.812,919,3.334,920,5.698,921,5.698,922,4.251,923,4.251,924,4.251,925,4.251,926,4.944,927,4.251,928,4.251,929,3.698,930,3.698,931,3.698,932,3.698,933,3.698,934,3.698,935,3.698,936,3.698,937,3.698,938,3.698,939,3.698]],["title/modules/MessageModule.html",[156,1.7,166,2.695]],["body/modules/MessageModule.html",[0,0.042,3,0.26,4,0.26,5,0.239,13,0.014,22,0.664,32,0.939,63,0.26,132,0.011,133,0.011,146,2.864,156,2.745,158,2.631,159,3.28,166,5.208,169,3.63,170,2.764,171,2.912,173,3.838,174,3.268,184,4.091,319,3.49,634,3.745,635,3.268,644,4.075,918,4.742,940,4.538,941,4.538,942,5.217,943,5.217,944,5.217]],["title/classes/MessageResolver.html",[0,0.032,644,2.523]],["body/classes/MessageResolver.html",[0,0.041,2,0.831,3,0.144,4,0.144,5,0.132,7,0.18,10,2.693,12,0.392,13,0.014,14,0.769,15,1.342,17,0.888,20,1.202,22,0.601,25,1.526,32,0.518,63,0.258,84,1.037,87,1.996,90,1.492,91,2.083,94,1.78,96,1.005,102,1.902,132,0.007,133,0.007,148,1.442,151,1.73,154,1.167,179,1.866,180,1.668,188,1.7,238,1.927,239,1.927,272,2.221,281,1.805,340,1.216,344,1.167,350,2.89,410,1.037,466,0.927,475,1.902,476,0.962,480,1.996,507,1.526,588,1.608,609,4.334,610,1.927,611,2.549,612,2.259,613,2.259,615,4.147,617,3.733,618,3.388,619,2.259,621,2.074,623,4.147,624,2.074,625,2.259,626,2.259,627,3.388,628,2.259,629,2.259,630,4.065,631,2.259,632,3.468,633,2.259,634,2.771,635,1.805,636,1.805,637,2.259,638,2.259,639,4.147,640,3.853,641,1.927,642,2.289,643,2.259,644,2.706,645,3.388,646,3.388,647,2.259,648,2.259,649,2.259,650,1.7,651,2.259,652,1.7,653,2.259,654,2.259,655,1.7,656,2.259,657,2.259,658,2.259,659,4.065,660,2.259,661,3.388,662,2.259,663,2.259,664,1.927,665,2.259,666,2.259,667,2.259,668,2.259,669,2.259,670,4.838,671,2.259,672,3.111,673,2.259,674,2.259,675,2.259,676,2.259,945,4.32,946,2.881,947,2.881,948,2.881,949,2.881,950,2.881,951,2.881,952,2.881,953,2.881,954,2.881,955,2.881]],["title/injectables/MessageService.html",[261,0.872,634,1.938]],["body/injectables/MessageService.html",[0,0.02,3,0.122,4,0.122,5,0.112,7,0.152,9,2.95,10,2.453,12,0.538,13,0.014,14,0.695,17,1.011,20,1.059,22,0.419,30,1.92,32,0.44,48,1.92,63,0.122,84,0.879,87,0.846,90,1.698,91,2.389,93,2.48,94,1.524,96,1.272,132,0.006,133,0.006,148,1.271,151,2.116,179,2.36,180,2.109,261,0.824,262,1.031,268,0.51,272,2.185,274,3.311,340,1.031,344,1.896,345,2.141,350,2.547,368,1.53,378,1.232,395,1.294,409,3.216,410,2.063,466,1.843,475,2.06,476,0.815,480,1.622,588,1.363,594,1.634,595,2.247,611,3.74,634,1.832,642,2.8,650,2.761,652,2.761,655,2.761,664,3.131,682,3.806,683,1.915,684,4.071,685,5.704,686,2.125,687,3.312,688,3.37,689,2.125,690,2.125,691,4.061,692,2.125,693,3.312,694,2.125,695,3.312,696,2.125,697,2.125,698,3.312,699,2.125,700,3.312,701,2.125,702,3.312,703,2.742,704,2.742,705,2.742,706,3.312,707,3.806,708,3.312,709,3.312,710,3.312,711,3.312,712,2.742,713,3.312,714,2.125,715,2.125,716,4.071,956,3.808,957,3.808,958,3.808,959,3.808,960,3.808,961,2.125,962,2.442,963,2.442,964,2.442,965,2.442,966,2.442,967,2.442,968,2.442,969,2.442,970,2.442]],["title/modules/PrismaModule.html",[156,1.7,167,2.377]],["body/modules/PrismaModule.html",[0,0.042,3,0.262,4,0.262,5,0.241,13,0.014,22,0.585,32,0.948,63,0.262,132,0.011,133,0.011,146,2.319,156,2.761,158,2.656,159,3.3,167,4.668,169,3.652,170,2.79,171,2.94,173,3.86,174,3.299,319,4.377,345,3.321,558,5.131,971,4.582,972,4.582,973,4.582,974,5.267,975,5.267]],["title/injectables/PrismaService.html",[261,0.872,345,1.632]],["body/injectables/PrismaService.html",[0,0.039,3,0.245,4,0.245,5,0.225,7,0.306,12,0.371,13,0.014,17,0.965,22,0.56,32,0.883,63,0.245,91,2.416,93,2.612,96,0.952,102,2.755,132,0.011,133,0.011,140,1.871,148,2.089,151,2.089,179,1.767,180,1.579,261,1.354,262,2.071,345,2.535,476,1.638,843,4.269,976,4.269,977,6.891,978,6.258,979,7.665,980,6.258,981,7.257,982,4.907,983,4.907,984,4.907,985,4.907,986,4.907,987,4.907]],["title/interfaces/QueueDatabaseConfig.html",[268,0.841,988,3.159]],["body/interfaces/QueueDatabaseConfig.html",[3,0.287,4,0.287,5,0.264,7,0.359,8,1.198,12,0.522,13,0.013,14,0.847,20,2.06,63,0.287,132,0.012,133,0.012,229,5.53,231,4.81,268,1.203,270,2.334,988,5.42,989,5.013]],["title/classes/RemoveParticipantDto.html",[0,0.032,141,2.523]],["body/classes/RemoveParticipantDto.html",[0,0.057,2,1.505,3,0.26,4,0.26,5,0.239,7,0.325,8,1.127,12,0.491,13,0.014,14,0.849,15,1.685,16,2.456,17,1.003,22,0.467,62,1.618,63,0.324,95,1.902,132,0.011,133,0.011,134,5.208,135,3.757,136,2.991,139,3.268,140,2.119,141,4.075,142,4.684,143,4.538,144,4.538]],["title/classes/RtGuard.html",[0,0.032,38,2.523]],["body/classes/RtGuard.html",[0,0.034,2,1.232,3,0.368,4,0.213,5,0.196,7,0.266,12,0.487,13,0.014,17,0.881,22,0.511,32,0.769,38,3.582,63,0.213,65,3.191,90,1.481,96,1.109,123,2.859,128,2.761,132,0.01,133,0.01,140,1.278,148,2.297,151,2.151,179,2.058,180,1.839,261,0.925,321,2.385,409,3.029,410,1.538,520,4.64,680,3.077,747,4.483,748,4.483,752,4.483,753,4.954,755,2.677,756,4.483,758,5.623,759,4.483,761,3.351,763,3.351,764,3.351,765,3.351,766,3.351,767,3.351,768,3.351,769,3.351,770,3.351,771,3.351,772,3.351,777,3.351,779,3.351,780,3.351,781,3.351,990,3.717,991,4.273,992,4.273,993,5.717,994,5.717,995,5.717]],["title/injectables/RtStrategy.html",[261,0.872,317,2.695]],["body/injectables/RtStrategy.html",[0,0.032,3,0.199,4,0.199,5,0.182,7,0.248,12,0.412,13,0.014,17,0.841,22,0.647,26,3.371,32,0.717,48,3.371,50,2.224,63,0.199,77,4.472,84,1.434,87,1.381,90,1.412,94,1.573,96,1.058,100,2.009,123,2.666,126,3.371,132,0.009,133,0.009,140,1.192,148,1.82,151,1.33,154,1.614,179,1.963,180,1.754,199,2.666,216,5.206,251,3.125,261,1.18,262,1.682,317,3.648,321,2.224,340,1.682,349,5.242,368,2.496,373,3.125,409,2.111,410,1.434,424,2.224,762,2.87,793,3.944,797,3.668,799,4.744,805,3.466,806,3.466,807,3.125,808,3.927,809,3.466,811,3.466,814,4.744,815,3.466,816,3.466,818,3.466,819,4.744,820,3.466,821,3.466,822,3.466,996,3.466,997,3.985,998,3.985,999,5.453,1000,3.985,1001,3.985,1002,3.985,1003,3.985,1004,3.985,1005,3.985,1006,3.985,1007,3.985,1008,3.985,1009,3.985,1010,3.985,1011,3.985]],["title/classes/SaveMessageInput.html",[0,0.032,640,2.695]],["body/classes/SaveMessageInput.html",[0,0.043,2,0.886,3,0.153,4,0.153,5,0.141,7,0.192,8,0.785,10,2.736,12,0.407,13,0.014,14,0.849,15,1.395,17,0.83,20,1.261,22,0.614,25,1.628,32,0.553,63,0.268,84,1.106,87,2.197,90,1.54,91,1.67,94,1.829,102,1.996,132,0.008,133,0.008,154,1.245,188,1.813,238,2.056,239,2.056,272,2.282,281,1.925,344,1.245,410,1.106,466,0.989,475,1.996,476,1.026,480,2.061,507,1.628,588,1.715,609,3.603,610,2.056,611,3.508,612,2.41,613,2.41,614,2.41,615,4.566,617,3.879,618,3.555,619,2.41,621,2.213,623,4.778,624,2.213,625,2.41,626,2.41,627,3.555,628,2.41,629,2.41,630,4.224,631,2.41,632,3.603,633,2.41,634,2.181,635,1.925,636,1.925,637,2.41,638,2.41,639,4.282,640,3.603,641,2.056,642,3.15,643,2.41,644,1.925,645,2.41,646,3.555,647,2.41,648,2.41,649,2.41,650,1.813,651,2.41,652,1.813,653,2.41,654,2.41,655,1.813,656,2.41,657,2.41,658,2.41,659,2.41,660,2.41,661,2.41,662,2.41,663,2.41,664,2.056,665,2.41,666,2.41,667,2.41,668,2.41,669,2.41,670,3.555,671,2.41,672,3.265,673,2.41,674,2.41,675,2.41,676,2.41,1012,3.074,1013,3.074,1014,3.074]],["title/interfaces/SendMessageToChatDto.html",[268,0.841,926,2.901]],["body/interfaces/SendMessageToChatDto.html",[0,0.036,3,0.222,4,0.222,5,0.204,7,0.278,8,1.019,10,2.721,12,0.528,13,0.014,14,0.922,22,0.526,23,1.881,24,2.63,25,2.361,26,2.248,27,2.63,28,2.792,29,2.792,30,2.248,31,2.63,32,0.802,63,0.222,84,1.605,90,1.523,91,1.823,93,2.117,94,1.286,105,3.469,132,0.01,133,0.01,136,1.881,268,0.93,270,1.805,410,1.605,466,2.45,507,3.115,611,4.291,634,3.165,635,2.792,642,3.853,918,2.982,919,3.495,926,4.738,929,3.877,930,3.877,931,3.877,932,3.877,933,3.877,934,3.877,935,3.877,936,3.877,937,3.877,938,3.877,939,3.877]],["title/classes/SignInRequestDto.html",[0,0.032,41,1.938]],["body/classes/SignInRequestDto.html",[0,0.06,2,1.307,3,0.226,4,0.226,5,0.207,7,0.283,8,1.03,12,0.449,13,0.014,14,0.924,15,1.539,16,2.629,17,0.916,20,1.654,22,0.532,40,2.18,41,2.859,42,2.859,43,2.285,44,2.285,56,1.835,62,1.405,63,0.364,95,1.89,96,0.879,97,1.835,98,3.55,100,2.285,101,2.4,111,2.733,132,0.01,133,0.01,140,1.355,399,2.4,795,2.529,796,2.529,1015,2.838,1016,4.531,1017,4.531,1018,3.976,1019,3.976,1020,2.838]],["title/classes/SignUpDto.html",[0,0.032,40,1.938]],["body/classes/SignUpDto.html",[0,0.059,2,1.239,3,0.214,4,0.214,5,0.197,7,0.268,8,0.994,12,0.521,13,0.014,14,0.926,15,1.785,16,2.613,17,1.063,20,1.596,22,0.513,40,2.76,41,2.066,42,2.76,43,2.166,44,2.166,56,1.74,62,1.332,63,0.358,95,1.85,96,1.253,97,2.617,98,3.476,100,2.166,101,2.276,111,2.638,132,0.01,133,0.01,140,1.284,399,2.276,795,2.397,796,2.397,1015,2.691,1018,3.838,1019,3.838,1020,2.691,1021,4.295,1022,4.295,1023,4.295,1024,4.295,1025,4.295,1026,4.295]],["title/classes/TokenDto.html",[0,0.032,42,1.938]],["body/classes/TokenDto.html",[0,0.06,2,1.307,3,0.226,4,0.226,5,0.207,7,0.283,8,1.03,12,0.449,13,0.014,14,0.924,15,1.539,16,2.629,17,0.916,20,1.654,22,0.532,40,2.18,41,2.18,42,3.191,43,2.285,44,2.285,56,1.835,62,1.405,63,0.364,95,1.595,96,0.879,97,1.835,98,2.997,100,3.345,101,3.514,111,2.733,132,0.01,133,0.01,140,1.355,399,2.4,795,2.529,796,2.529,1015,2.838,1018,3.976,1019,3.976,1020,2.838,1027,4.531,1028,4.531]],["title/classes/TokenDtoWithUserId.html",[0,0.032,43,2.031]],["body/classes/TokenDtoWithUserId.html",[0,0.059,2,1.252,3,0.216,4,0.216,5,0.199,7,0.271,8,1.001,12,0.49,13,0.014,14,0.923,15,1.682,16,2.625,17,1.001,20,1.607,22,0.517,40,2.088,41,2.088,42,3.468,43,2.913,44,2.189,56,1.758,62,1.346,63,0.359,95,1.551,96,0.842,97,1.758,98,2.913,100,3.275,101,3.44,111,3.183,132,0.01,133,0.01,140,1.728,142,4.16,399,2.299,795,2.422,796,2.422,1015,2.719,1018,3.865,1019,3.865,1020,2.719,1029,4.341,1030,4.341,1031,4.341]],["title/interfaces/TripleDesDecryptPayload.html",[268,0.841,279,2.523]],["body/interfaces/TripleDesDecryptPayload.html",[3,0.266,4,0.266,5,0.244,7,0.333,8,1.143,12,0.591,13,0.014,14,0.856,20,1.484,63,0.357,126,3.326,132,0.011,133,0.011,268,1.376,269,3.569,270,2.161,271,3.842,272,2.766,273,4.183,275,4.641,276,5.003,277,5.172,278,4.641,279,4.132]],["title/classes/UnAuthorizedResponse.html",[0,0.032,64,2.695]],["body/classes/UnAuthorizedResponse.html",[0,0.04,1,2.743,2,0.775,3,0.134,4,0.134,5,0.123,6,1.936,7,0.168,8,0.71,9,1.501,10,2.08,11,4.36,12,0.524,13,0.014,14,0.751,15,1.062,16,2.176,17,0.632,20,1.383,22,0.632,23,1.135,24,1.586,25,1.424,26,3.182,27,1.586,28,1.684,29,2.569,30,1.356,31,1.586,32,0.484,33,2.633,34,1.799,35,1.684,36,2.108,37,2.108,38,1.684,39,2.108,40,1.973,41,1.973,42,2.391,43,2.068,44,2.068,45,1.936,46,1.799,47,2.108,48,2.068,49,3.114,50,1.501,51,1.799,52,2.108,53,1.799,54,1.799,55,2.108,56,2.425,57,3.215,58,1.799,59,4.36,60,4.36,61,3.215,62,0.834,63,0.248,64,3.325,65,2.289,66,1.936,67,1.936,68,2.953,69,2.108,70,2.108,71,1.936,72,2.108,73,2.108,74,2.108,75,2.108,76,2.108,77,4.005,78,2.108,79,2.108,80,1.936,81,2.108,82,2.108,83,1.684,84,0.968,85,2.108,86,2.108,87,0.932,88,2.108,89,2.697,90,1.831,91,1.724,92,2.108,93,2.002,94,1.951,95,1.493,96,0.795,97,1.661,98,2.804,99,3.898,100,3.182,101,3.343,102,2.188,103,2.108,104,2.108,105,2.419,106,2.108,107,2.108,108,2.108,109,2.108,110,2.108,111,2.286,112,2.108,113,3.215,114,2.108,115,1.936,116,3.898,117,2.108,118,2.108,119,2.108,120,2.108,121,2.108,122,1.936,123,1.799,124,2.108,125,2.108,126,2.068,127,2.108,128,1.006,129,2.108,130,2.108,131,2.108,132,0.007,133,0.007,1032,2.689,1033,2.689]],["title/controllers/UserController.html",[23,1.7,1034,2.901]],["body/controllers/UserController.html",[0,0.027,3,0.169,4,0.169,5,0.155,7,0.211,12,0.547,13,0.014,14,0.652,15,1.475,16,1.09,17,0.878,22,0.632,23,1.43,24,1.999,26,1.709,27,2.872,30,1.709,31,1.999,32,0.61,49,4.3,56,2.522,58,2.267,62,1.051,63,0.169,89,2.216,90,1.475,91,2.285,93,2.471,94,1.795,95,1.898,96,0.944,102,2.143,105,1.999,128,2.909,132,0.008,133,0.008,146,1.492,148,1.625,151,1.901,154,1.971,179,1.752,180,1.566,272,1.752,280,2.44,330,2.872,340,1.43,342,2.74,344,1.373,404,2.657,476,1.131,477,2.454,507,3.017,520,2.44,557,1.709,590,2.267,598,3.817,691,3.256,712,3.505,719,2.657,744,2.267,801,2.716,810,2.948,1034,3.505,1035,2.948,1036,6.226,1037,5.696,1038,5.696,1039,3.389,1040,3.389,1041,3.389,1042,3.389,1043,3.389,1044,3.389,1045,4.483,1046,3.389,1047,3.389,1048,3.389,1049,2.948,1050,3.81,1051,3.389,1052,3.389,1053,3.389,1054,3.389,1055,3.389,1056,3.389,1057,3.389,1058,3.389,1059,3.389,1060,3.389]],["title/classes/UserDto.html",[0,0.032,477,2.031]],["body/classes/UserDto.html",[0,0.046,2,1.255,3,0.217,4,0.217,5,0.199,7,0.271,8,1.003,12,0.56,13,0.014,14,0.919,15,1.921,16,2.634,17,1.143,22,0.389,62,1.35,63,0.288,95,1.86,97,2.807,132,0.01,133,0.01,393,3.134,424,2.429,431,3.134,466,2.386,477,2.918,480,2.402,481,3.868,483,3.868,1050,2.911,1061,3.413,1062,5.656,1063,4.352,1064,4.352,1065,4.352,1066,4.352,1067,4.352,1068,4.352]],["title/classes/UserFromJwtDto.html",[0,0.032,44,2.031]],["body/classes/UserFromJwtDto.html",[0,0.059,2,1.239,3,0.214,4,0.214,5,0.197,7,0.268,8,0.994,12,0.521,13,0.014,14,0.917,15,1.785,16,2.63,17,1.063,20,1.918,22,0.513,40,2.066,41,2.066,42,2.76,43,2.166,44,2.893,56,1.74,62,1.332,63,0.358,95,1.54,96,0.833,97,1.74,98,2.893,100,2.166,101,2.276,111,3.17,132,0.01,133,0.01,140,1.284,399,3.422,795,3.605,796,3.605,1015,2.691,1018,3.838,1019,3.838,1020,2.691,1069,4.295,1070,4.295,1071,4.295,1072,4.295]],["title/modules/UserModule.html",[156,1.7,168,2.523]],["body/modules/UserModule.html",[0,0.04,3,0.251,4,0.251,5,0.231,13,0.014,22,0.676,32,0.907,63,0.251,132,0.011,133,0.011,146,2.803,156,2.687,158,2.543,159,3.211,165,3.159,168,4.91,169,3.553,170,2.671,171,2.814,173,3.756,184,3.954,202,4.386,319,4.259,342,3.922,760,3.631,1034,5.025,1049,4.386,1073,4.386,1074,4.386,1075,4.386,1076,5.042,1077,5.042,1078,5.042]],["title/classes/UserRespondDto.html",[0,0.032,1050,2.695]],["body/classes/UserRespondDto.html",[0,0.047,2,1.289,3,0.223,4,0.223,5,0.205,7,0.279,8,1.021,12,0.55,13,0.014,14,0.917,15,1.885,16,2.634,17,1.122,22,0.4,62,1.386,63,0.293,95,1.88,97,2.837,132,0.01,133,0.01,393,3.219,424,2.494,431,3.219,466,2.404,477,2.254,480,2.427,481,3.909,483,3.909,1050,3.941,1061,3.505,1062,3.888,1079,4.47,1080,4.47,1081,4.47,1082,4.47,1083,4.47]],["title/injectables/UserService.html",[261,0.872,342,1.938]],["body/injectables/UserService.html",[0,0.023,3,0.145,4,0.145,5,0.134,7,0.182,9,2.433,10,1.631,12,0.554,13,0.014,14,0.71,17,1.04,20,1.213,22,0.467,32,0.525,63,0.145,84,1.05,90,1.685,91,2.368,93,2.497,94,1.506,95,1.555,96,1.308,128,2.168,132,0.007,133,0.007,148,1.455,151,2.173,154,1.181,179,2.343,180,2.094,261,0.944,262,1.231,268,0.609,272,2.343,274,3.886,340,1.231,342,2.098,344,2.115,345,2.347,350,1.951,368,1.827,378,1.471,394,2.287,395,1.545,409,2.31,410,1.05,424,2.433,476,0.974,507,2.31,595,1.721,650,3.081,652,3.081,655,3.081,688,3.76,691,3.877,703,2.1,704,2.1,705,2.1,707,2.1,717,4.173,718,2.287,719,4.095,720,2.287,721,2.287,722,5.041,723,2.537,724,2.1,725,4.542,726,5.396,727,3.793,728,2.537,729,2.537,730,3.793,731,2.537,732,2.537,733,2.537,734,3.793,735,4.542,736,2.537,737,2.537,738,2.537,739,2.537,740,3.793,741,2.537,742,3.793,743,3.793,744,1.951,961,2.537,1084,4.36,1085,4.36,1086,4.36,1087,4.36,1088,2.916,1089,2.916,1090,2.916,1091,2.916,1092,2.916,1093,2.916,1094,2.916,1095,2.916]],["title/classes/UserUpdateProfileDto.html",[0,0.032,1045,2.901]],["body/classes/UserUpdateProfileDto.html",[0,0.039,2,1.395,3,0.241,4,0.241,5,0.221,7,0.302,8,1.074,12,0.545,13,0.014,14,0.9,15,1.869,16,2.555,17,1.113,22,0.432,62,1.5,63,0.241,95,1.837,96,1.327,132,0.01,133,0.01,180,2.456,720,5.366,721,5.366,744,4.993,1045,4.465,1096,6.492,1097,4.206,1098,4.836,1099,4.836,1100,4.836,1101,4.836]],["title/changelog.html",[1102,2.252,1103,2.252,1104,3.366]],["body/changelog.html",[13,0.012,132,0.012,133,0.012]],["title/contributing.html",[1102,2.252,1103,2.252,1105,3.366]],["body/contributing.html",[13,0.012,132,0.012,133,0.012]],["title/coverage.html",[1106,4.779]],["body/coverage.html",[0,0.062,1,1.649,5,0.113,6,3.389,10,0.922,12,0.186,13,0.014,23,2.428,33,1.305,35,1.544,38,1.544,40,1.186,41,1.186,42,1.186,43,1.243,44,1.243,46,1.649,51,1.649,53,1.649,64,1.649,83,1.544,132,0.006,133,0.006,134,1.649,135,3.389,139,1.544,141,1.544,145,1.775,147,2.144,152,1.544,172,1.932,203,1.932,205,1.932,207,1.932,209,1.932,211,1.544,221,1.932,261,1.567,263,2.144,268,1.529,269,1.649,271,2.761,279,1.544,281,1.544,306,1.932,307,2.144,316,1.649,317,1.649,329,2.144,342,1.186,345,0.998,372,1.544,410,0.887,458,1.932,459,2.144,462,1.375,463,3.604,464,3.604,477,1.243,479,1.454,482,1.375,486,1.375,487,1.375,496,1.775,497,2.144,521,1.375,560,3.389,567,1.649,570,1.649,609,1.649,610,3.553,621,5.977,632,1.649,634,1.186,636,1.544,640,1.649,644,1.544,677,1.932,678,2.144,679,2.144,682,1.775,683,3.007,717,1.775,718,3.007,744,1.649,745,3.007,746,2.144,782,2.144,793,1.454,794,3.389,797,1.454,798,2.144,801,1.375,835,2.144,867,2.144,911,2.144,918,1.649,919,3.007,926,1.775,976,2.144,988,1.932,989,2.144,990,2.144,996,2.144,1015,3.604,1034,1.775,1035,2.144,1045,1.775,1050,1.649,1061,3.007,1096,2.144,1097,2.144,1106,2.144,1107,2.464,1108,2.464,1109,2.464,1110,4.707,1111,6.906,1112,7.034,1113,2.464,1114,2.464,1115,6.36,1116,7.63,1117,6.906,1118,2.464,1119,1.932,1120,2.144,1121,2.144,1122,2.464,1123,2.464,1124,2.144,1125,2.144,1126,2.144,1127,2.144,1128,6.093,1129,2.464,1130,2.464,1131,2.464,1132,2.464,1133,2.144,1134,2.144,1135,2.464,1136,2.464,1137,2.144,1138,2.464,1139,2.144,1140,2.464,1141,2.144,1142,1.932,1143,2.464,1144,2.464,1145,2.464,1146,2.144]],["title/dependencies.html",[159,2.443,1147,2.928]],["body/dependencies.html",[0,0.047,13,0.014,32,0.792,50,3.648,62,1.364,132,0.01,133,0.01,159,2.218,188,2.595,191,3.826,195,3.826,199,2.942,214,3.449,215,3.167,219,3.826,220,3.826,223,2.942,238,2.942,239,4.373,240,3.826,321,2.455,323,3.449,371,3.826,376,3.826,377,3.826,476,1.468,760,3.167,807,5.126,808,3.167,1020,2.755,1148,4.398,1149,5.828,1150,4.398,1151,4.398,1152,6.959,1153,4.398,1154,4.398,1155,4.398,1156,4.398,1157,4.398,1158,4.398,1159,4.398,1160,4.398,1161,4.398,1162,4.398,1163,3.826,1164,4.398,1165,4.398,1166,4.398,1167,4.398,1168,4.398,1169,4.398,1170,4.398,1171,4.398,1172,4.398,1173,4.398,1174,4.398,1175,4.398,1176,4.398,1177,4.398,1178,4.398,1179,4.398,1180,4.398,1181,5.07,1182,4.398,1183,4.398,1184,4.398,1185,4.398,1186,4.398,1187,4.398,1188,4.398,1189,4.398,1190,4.398,1191,4.398,1192,4.398,1193,4.398,1194,4.398]],["title/miscellaneous/enumerations.html",[1195,2.109,1196,4.213]],["body/miscellaneous/enumerations.html",[7,0.352,12,0.426,13,0.013,54,4.567,126,3.845,132,0.011,133,0.011,271,4.065,276,4.567,277,5.755,808,5.285,817,4.91,1119,4.426,1195,3.536,1196,4.91,1197,5.645,1198,4.91,1199,5.645,1200,5.645,1201,5.645,1202,6.792,1203,5.645,1204,5.645]],["title/interfaces/envConfig.html",[268,0.841,1142,3.159]],["body/interfaces/envConfig.html",[3,0.287,4,0.287,5,0.264,7,0.359,8,1.198,12,0.522,13,0.013,14,0.847,20,2.06,63,0.287,132,0.012,133,0.012,231,4.81,268,1.203,270,2.334,1141,5.013,1142,5.42,1205,6.679]],["title/miscellaneous/functions.html",[1195,2.109,1206,4.213]],["body/miscellaneous/functions.html",[7,0.392,13,0.012,132,0.012,133,0.012,1137,5.471,1139,6.681,1195,3.94,1206,5.471,1207,6.289]],["title/index.html",[7,0.21,1102,2.252,1103,2.252]],["body/index.html",[7,0.33,10,1.983,13,0.014,65,2.958,66,3.817,95,0.803,96,0.58,97,1.211,128,1.119,132,0.007,133,0.007,170,2.353,215,3.199,222,2.345,223,2,228,2.601,231,2.783,244,4.61,272,1.076,344,2.661,393,2.153,395,3.108,424,4.338,431,2.153,466,1.429,480,2.033,481,1.669,483,1.669,576,2,577,2,578,2.972,641,2.972,642,1.584,724,3.199,755,1.873,884,2.601,897,2.601,1146,5.453,1163,6.077,1208,2.99,1209,6.801,1210,5.3,1211,2.99,1212,2.99,1213,2.99,1214,6.269,1215,6.801,1216,6.987,1217,5.3,1218,5.3,1219,5.3,1220,5.3,1221,4.442,1222,4.442,1223,4.442,1224,2.99,1225,6.569,1226,2.99,1227,2.99,1228,2.99,1229,4.442,1230,4.442,1231,2.99,1232,4.442,1233,2.99,1234,4.442,1235,2.99,1236,2.99,1237,2.99,1238,2.99,1239,2.99,1240,2.99,1241,2.99,1242,2.99,1243,6.269,1244,5.867,1245,4.61,1246,2.99,1247,4.442,1248,2.99,1249,5.867,1250,4.442,1251,2.99,1252,2.99,1253,2.99,1254,2.99,1255,2.99,1256,2.99,1257,2.99,1258,2.99,1259,2.99,1260,2.99,1261,2.99,1262,2.99,1263,2.99,1264,2.99,1265,4.442,1266,2.99,1267,4.442,1268,5.3,1269,5.3,1270,5.3,1271,5.3,1272,6.987,1273,5.3,1274,5.453,1275,4.442,1276,5.3,1277,4.61,1278,5.3,1279,5.3,1280,5.3,1281,5.3,1282,2.99,1283,4.442,1284,4.442,1285,2.99,1286,2.99]],["title/license.html",[1102,2.252,1103,2.252,1287,2.928]],["body/license.html",[13,0.012,132,0.012,133,0.012]],["title/modules.html",[158,2.77]],["body/modules.html",[13,0.012,71,5.789,132,0.012,133,0.012,157,4.093,158,2.866,163,3.802,164,3.802,165,3.56,166,3.802,167,3.353,168,3.56,1288,8.039,1289,8.039,1290,8.039]],["title/overview.html",[1291,4.779]],["body/overview.html",[2,1.107,13,0.014,33,3.881,132,0.009,133,0.009,146,1.689,152,3.818,157,5.768,158,1.935,159,2.679,160,3.338,161,3.338,162,3.338,163,5.232,164,4.901,165,4.857,166,4.621,167,4.406,168,4.59,169,2.965,170,2.033,171,2.141,211,4.59,262,1.619,270,1.554,312,3.338,314,3.338,315,3.338,316,4.077,317,4.077,342,3.525,345,2.968,521,3.401,553,3.338,555,3.338,634,2.932,801,4.089,845,3.338,847,3.338,848,3.338,940,3.338,941,3.338,971,3.338,972,3.338,973,3.338,1073,3.338,1074,3.338,1075,3.338,1291,3.338,1292,3.837,1293,3.338,1294,3.837,1295,3.837,1296,3.837]],["title/properties.html",[8,0.839,1147,2.928]],["body/properties.html",[8,1.061,13,0.014,89,2.384,132,0.012,133,0.012,672,4.411,724,4.411,1287,5.329,1297,6.126,1298,6.126,1299,6.126,1300,6.126,1301,6.126]],["title/todo.html",[590,2.252,1102,2.252,1103,2.252]],["body/todo.html",[13,0.012,132,0.012,133,0.012]],["title/miscellaneous/variables.html",[1195,2.109,1302,4.213]],["body/miscellaneous/variables.html",[7,0.181,12,0.22,13,0.014,14,0.709,20,0.809,46,2.909,48,2.628,49,2.724,51,2.909,53,4.348,54,3.486,65,2.427,67,2.093,68,2.093,80,2.093,87,2.335,90,1.683,94,1.503,98,2.193,132,0.007,133,0.007,172,2.279,182,2.093,203,4.086,205,4.086,207,4.086,209,4.086,221,3.41,222,2.279,223,2.909,224,3.41,229,3.132,231,3.264,272,2.082,273,2.279,308,2.528,309,2.528,310,2.528,311,2.528,410,1.876,460,2.528,461,2.528,557,1.465,598,4.086,610,1.944,632,3.486,753,3.753,755,1.82,790,3.783,797,1.715,1119,2.279,1120,2.528,1121,2.528,1124,2.528,1125,2.528,1126,2.528,1127,2.528,1133,2.528,1134,3.783,1181,2.528,1195,1.82,1198,2.528,1202,6.523,1205,2.528,1245,2.528,1274,6.275,1277,3.783,1293,2.528,1302,2.528,1303,2.906,1304,2.906,1305,2.906,1306,2.906,1307,2.906,1308,2.906,1309,2.906,1310,2.906,1311,2.906,1312,4.349,1313,2.906,1314,2.906,1315,2.906,1316,2.906,1317,2.906,1318,2.906,1319,2.906,1320,2.906,1321,2.906,1322,2.906,1323,2.906,1324,2.906,1325,2.906,1326,2.906,1327,5.211,1328,2.906,1329,2.906,1330,2.906,1331,2.906,1332,2.906,1333,2.906,1334,2.906,1335,2.906,1336,2.906,1337,5.784,1338,2.906,1339,2.906,1340,2.906,1341,2.906,1342,2.906,1343,2.906,1344,2.906,1345,2.906,1346,2.906,1347,2.906,1348,2.906,1349,2.906,1350,2.906,1351,2.906,1352,2.906,1353,2.906,1354,2.906,1355,2.906,1356,2.906,1357,2.906,1358,2.906,1359,2.906,1360,2.906,1361,2.906,1362,2.906,1363,2.906,1364,2.906,1365,2.906,1366,2.906]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"classes/AddAndRemoveParticipantDto.html":{},"classes/AddParticipantDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"interfaces/ArgonHashPayload.html":{},"controllers/AuthController.html":{},"interfaces/AuthKey.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CacheDatabaseConfig.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"classes/GetEventByIdDto.html":{},"classes/GetMessageInput.html":{},"injectables/GoogleOauthGuard.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayloadForSign.html":{},"interfaces/JwtPayloadWithRt.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"classes/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"classes/MessageResolver.html":{},"injectables/MessageService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"interfaces/QueueDatabaseConfig.html":{},"classes/RemoveParticipantDto.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SaveMessageInput.html":{},"interfaces/SendMessageToChatDto.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/TokenDto.html":{},"classes/TokenDtoWithUserId.html":{},"interfaces/TripleDesDecryptPayload.html":{},"classes/UnAuthorizedResponse.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserFromJwtDto.html":{},"modules/UserModule.html":{},"classes/UserRespondDto.html":{},"injectables/UserService.html":{},"classes/UserUpdateProfileDto.html":{},"changelog.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"interfaces/envConfig.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":621,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{},"coverage.html":{}}}],["0.0.2",{"_index":1298,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1189,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1170,"title":{},"body":{"dependencies.html":{}}}],["0.29.1",{"_index":1165,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1169,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1183,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1112,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1129,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1118,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1130,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1110,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1116,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1115,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1117,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1128,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1143,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1144,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1140,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":1230,"title":{},"body":{"index.html":{}}}],["1.0.0",{"_index":1186,"title":{},"body":{"dependencies.html":{}}}],["1.7.0",{"_index":1182,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1136,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1123,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":1114,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1317,"title":{},"body":{"miscellaneous/variables.html":{}}}],["10.0.22",{"_index":1149,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1135,"title":{},"body":{"coverage.html":{}}}],["13",{"_index":1294,"title":{},"body":{"overview.html":{}}}],["14",{"_index":1296,"title":{},"body":{"overview.html":{}}}],["14.5.0",{"_index":1161,"title":{},"body":{"dependencies.html":{}}}],["16",{"_index":1113,"title":{},"body":{"coverage.html":{}}}],["16.6.0",{"_index":1173,"title":{},"body":{"dependencies.html":{}}}],["1d",{"_index":443,"title":{},"body":{"injectables/AuthService.html":{}}}],["2.0.0",{"_index":1174,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":1151,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":619,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["20m",{"_index":438,"title":{},"body":{"injectables/AuthService.html":{}}}],["23",{"_index":1295,"title":{},"body":{"overview.html":{}}}],["3",{"_index":833,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["3.0.0",{"_index":1155,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":1191,"title":{},"body":{"dependencies.html":{}}}],["3.10.2",{"_index":1164,"title":{},"body":{"dependencies.html":{}}}],["3.8.1",{"_index":1194,"title":{},"body":{"dependencies.html":{}}}],["33",{"_index":1122,"title":{},"body":{"coverage.html":{}}}],["4.0.0",{"_index":1184,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":1167,"title":{},"body":{"dependencies.html":{}}}],["4.1.1",{"_index":1171,"title":{},"body":{"dependencies.html":{}}}],["4.17.14",{"_index":1159,"title":{},"body":{"dependencies.html":{}}}],["4.18.1",{"_index":1172,"title":{},"body":{"dependencies.html":{}}}],["4.3.1",{"_index":1157,"title":{},"body":{"dependencies.html":{}}}],["4/9",{"_index":1132,"title":{},"body":{"coverage.html":{}}}],["44",{"_index":1131,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":1293,"title":{},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["5.10.1",{"_index":1175,"title":{},"body":{"dependencies.html":{}}}],["5.2.3",{"_index":1177,"title":{},"body":{"dependencies.html":{}}}],["5665",{"_index":1231,"title":{},"body":{"index.html":{}}}],["6.1.2",{"_index":1156,"title":{},"body":{"dependencies.html":{}}}],["6.5.3",{"_index":1179,"title":{},"body":{"dependencies.html":{}}}],["632206416ff5a339f41fc89d",{"_index":715,"title":{},"body":{"interfaces/ISendMessageToChatArgs.html":{},"injectables/MessageService.html":{}}}],["6381",{"_index":1233,"title":{},"body":{"index.html":{}}}],["7",{"_index":1292,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":1193,"title":{},"body":{"dependencies.html":{}}}],["9.0.0",{"_index":1152,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":1148,"title":{},"body":{"dependencies.html":{}}}],["9.1.2",{"_index":1150,"title":{},"body":{"dependencies.html":{}}}],["9.2.0",{"_index":1153,"title":{},"body":{"dependencies.html":{}}}],["_id",{"_index":912,"title":{},"body":{"classes/Message.html":{}}}],["access",{"_index":121,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["access_token",{"_index":100,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RtStrategy.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/TokenDto.html":{},"classes/TokenDtoWithUserId.html":{},"classes/UnAuthorizedResponse.html":{},"classes/UserFromJwtDto.html":{}}}],["accesstoken",{"_index":277,"title":{},"body":{"interfaces/ArgonHashPayload.html":{},"interfaces/TripleDesDecryptPayload.html":{},"miscellaneous/enumerations.html":{}}}],["accestoken",{"_index":817,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/enumerations.html":{}}}],["accses",{"_index":76,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["acessdeniedresponse",{"_index":1,"title":{"classes/AcessDeniedResponse.html":{}},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{},"coverage.html":{}}}],["acessdeniedresponse})@apiokresponse({description",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{}}}],["add",{"_index":763,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"classes/RtGuard.html":{}}}],["addandremoveparticipantdto",{"_index":134,"title":{"classes/AddAndRemoveParticipantDto.html":{}},"body":{"classes/AddAndRemoveParticipantDto.html":{},"classes/AddParticipantDto.html":{},"classes/RemoveParticipantDto.html":{},"coverage.html":{}}}],["addandremoveparticipantdto:5",{"_index":143,"title":{},"body":{"classes/AddParticipantDto.html":{},"classes/RemoveParticipantDto.html":{}}}],["addandremoveparticipantdto:7",{"_index":144,"title":{},"body":{"classes/AddParticipantDto.html":{},"classes/RemoveParticipantDto.html":{}}}],["addition",{"_index":1239,"title":{},"body":{"index.html":{}}}],["additional",{"_index":1258,"title":{},"body":{"index.html":{}}}],["addparticipant",{"_index":498,"title":{},"body":{"controllers/EventController.html":{}}}],["addparticipant(@body",{"_index":537,"title":{},"body":{"controllers/EventController.html":{}}}],["addparticipant(args",{"_index":502,"title":{},"body":{"controllers/EventController.html":{}}}],["addparticipantdto",{"_index":139,"title":{"classes/AddParticipantDto.html":{}},"body":{"classes/AddAndRemoveParticipantDto.html":{},"classes/AddParticipantDto.html":{},"controllers/EventController.html":{},"classes/RemoveParticipantDto.html":{},"coverage.html":{}}}],["addpaticipanttoevent",{"_index":561,"title":{},"body":{"injectables/EventService.html":{}}}],["addpaticipanttoevent(data",{"_index":566,"title":{},"body":{"injectables/EventService.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{}}}],["agent",{"_index":906,"title":{},"body":{"injectables/LoggerService.html":{}}}],["algorithm",{"_index":439,"title":{},"body":{"injectables/AuthService.html":{}}}],["another",{"_index":856,"title":{},"body":{"modules/LoggerModule.html":{}}}],["apibearerauth",{"_index":59,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["apicreatedresponse",{"_index":57,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["apiforbiddenresponse",{"_index":61,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["apiokresponse",{"_index":56,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"classes/GetEventByIdDto.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/TokenDto.html":{},"classes/TokenDtoWithUserId.html":{},"classes/UnAuthorizedResponse.html":{},"controllers/UserController.html":{},"classes/UserFromJwtDto.html":{}}}],["apiokresponse({description",{"_index":514,"title":{},"body":{"controllers/EventController.html":{}}}],["apiproperty",{"_index":16,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"classes/AddAndRemoveParticipantDto.html":{},"classes/AddParticipantDto.html":{},"controllers/AuthController.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"classes/GetEventByIdDto.html":{},"classes/RemoveParticipantDto.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/TokenDto.html":{},"classes/TokenDtoWithUserId.html":{},"classes/UnAuthorizedResponse.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserFromJwtDto.html":{},"classes/UserRespondDto.html":{},"classes/UserUpdateProfileDto.html":{}}}],["apiproperty()@isnotempty",{"_index":1023,"title":{},"body":{"classes/SignUpDto.html":{}}}],["apiproperty({type",{"_index":490,"title":{},"body":{"classes/CreateEventResponseDto.html":{},"classes/GetEventByIdDto.html":{}}}],["apitags",{"_index":58,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"controllers/EventController.html":{},"classes/UnAuthorizedResponse.html":{},"controllers/UserController.html":{}}}],["apitags('authentication",{"_index":81,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["apitags('event",{"_index":526,"title":{},"body":{"controllers/EventController.html":{}}}],["apitags('user",{"_index":1054,"title":{},"body":{"controllers/UserController.html":{}}}],["apiunauthorizedresponse",{"_index":60,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["apollo",{"_index":1162,"title":{},"body":{"dependencies.html":{}}}],["apollodriver",{"_index":189,"title":{},"body":{"modules/AppModule.html":{}}}],["apollodriverconfig",{"_index":190,"title":{},"body":{"modules/AppModule.html":{}}}],["app",{"_index":983,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.close",{"_index":987,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.controller",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":153,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_interceptor",{"_index":1078,"title":{},"body":{"modules/UserModule.html":{}}}],["appcontroller",{"_index":145,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["apply",{"_index":1266,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":157,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":152,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argon",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon.hash(data",{"_index":449,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon.verify(user.hashedrt",{"_index":447,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon.verify(user.hashpw",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon2",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["argonhashpayload",{"_index":269,"title":{"interfaces/ArgonHashPayload.html":{}},"body":{"interfaces/ArgonHashPayload.html":{},"injectables/AuthService.html":{},"interfaces/TripleDesDecryptPayload.html":{},"coverage.html":{}}}],["args",{"_index":507,"title":{},"body":{"controllers/EventController.html":{},"classes/GetMessageInput.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"controllers/MessageController.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{},"interfaces/SendMessageToChatDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["args('savemessagedata",{"_index":660,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["args.eventchatid",{"_index":936,"title":{},"body":{"controllers/MessageController.html":{},"interfaces/SendMessageToChatDto.html":{}}}],["args.message",{"_index":935,"title":{},"body":{"controllers/MessageController.html":{},"interfaces/SendMessageToChatDto.html":{}}}],["args.sendername",{"_index":934,"title":{},"body":{"controllers/MessageController.html":{},"interfaces/SendMessageToChatDto.html":{}}}],["arguments",{"_index":781,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"classes/RtGuard.html":{}}}],["async",{"_index":91,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"classes/GetMessageInput.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerService.html":{},"controllers/MessageController.html":{},"classes/MessageResolver.html":{},"injectables/MessageService.html":{},"injectables/PrismaService.html":{},"classes/SaveMessageInput.html":{},"interfaces/SendMessageToChatDto.html":{},"classes/UnAuthorizedResponse.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["at_privatekey",{"_index":308,"title":{},"body":{"interfaces/AuthKey.html":{},"miscellaneous/variables.html":{}}}],["at_publickey",{"_index":309,"title":{},"body":{"interfaces/AuthKey.html":{},"miscellaneous/variables.html":{}}}],["atprivatekey",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{},"classes/GetMessageInput.html":{},"injectables/JwtAuthGuardGraphql.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{},"coverage.html":{}}}],["auth.controller",{"_index":325,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.dto",{"_index":45,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UnAuthorizedResponse.html":{}}}],["auth.guard",{"_index":37,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["auth.guard.ts",{"_index":746,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:11",{"_index":751,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:15",{"_index":754,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:31",{"_index":757,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.processor.types",{"_index":382,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["auth.service",{"_index":34,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"classes/UnAuthorizedResponse.html":{}}}],["auth/auth.module",{"_index":201,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guard/jwt",{"_index":637,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["authcontroller",{"_index":83,"title":{"controllers/AuthController.html":{}},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/UnAuthorizedResponse.html":{},"coverage.html":{}}}],["authdto",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{}}}],["authdto.email",{"_index":392,"title":{},"body":{"injectables/AuthService.html":{}}}],["authdto.name",{"_index":396,"title":{},"body":{"injectables/AuthService.html":{}}}],["authdto.username",{"_index":391,"title":{},"body":{"injectables/AuthService.html":{}}}],["authentication",{"_index":765,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"classes/RtGuard.html":{}}}],["authguard",{"_index":680,"title":{},"body":{"injectables/GoogleOauthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"classes/RtGuard.html":{}}}],["authguard('google",{"_index":681,"title":{},"body":{"injectables/GoogleOauthGuard.html":{}}}],["authguard('jwt",{"_index":761,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"classes/RtGuard.html":{}}}],["authkey",{"_index":306,"title":{"interfaces/AuthKey.html":{}},"body":{"interfaces/AuthKey.html":{},"coverage.html":{}}}],["authmodule",{"_index":163,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":672,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{},"properties.html":{}}}],["authorid",{"_index":674,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["authorization",{"_index":80,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{},"miscellaneous/variables.html":{}}}],["authprocessor",{"_index":1201,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["authservice",{"_index":33,"title":{"injectables/AuthService.html":{}},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UnAuthorizedResponse.html":{},"coverage.html":{},"overview.html":{}}}],["auto_increment",{"_index":1271,"title":{},"body":{"index.html":{}}}],["automatic",{"_index":1259,"title":{},"body":{"index.html":{}}}],["autoschemafile",{"_index":246,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":102,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EventService.html":{},"classes/GetMessageInput.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"injectables/JwtStrategy.html":{},"classes/MessageResolver.html":{},"injectables/PrismaService.html":{},"classes/SaveMessageInput.html":{},"classes/UnAuthorizedResponse.html":{},"controllers/UserController.html":{}}}],["backend",{"_index":724,"title":{},"body":{"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/UserService.html":{},"index.html":{},"properties.html":{}}}],["background.components",{"_index":1228,"title":{},"body":{"index.html":{}}}],["base64').tostring('utf8",{"_index":1337,"title":{},"body":{"miscellaneous/variables.html":{}}}],["based",{"_index":780,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"classes/RtGuard.html":{}}}],["before",{"_index":1008,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["bio",{"_index":721,"title":{},"body":{"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/UserService.html":{},"classes/UserUpdateProfileDto.html":{}}}],["bit",{"_index":1241,"title":{},"body":{"index.html":{}}}],["bitnami/mysql:latestfinally",{"_index":1213,"title":{},"body":{"index.html":{}}}],["bitnami/redis:latest",{"_index":1212,"title":{},"body":{"index.html":{}}}],["body",{"_index":27,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"controllers/EventController.html":{},"controllers/MessageController.html":{},"interfaces/SendMessageToChatDto.html":{},"classes/UnAuthorizedResponse.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":115,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"interfaces/CacheDatabaseConfig.html":{},"classes/UnAuthorizedResponse.html":{}}}],["boolean})@apiunauthorizedresponse({description",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{}}}],["bootstrap",{"_index":1139,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["bounded",{"_index":252,"title":{},"body":{"modules/AppModule.html":{}}}],["browse",{"_index":1290,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":71,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{},"modules.html":{}}}],["buffer.from(process.env.at_private",{"_index":1336,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buffer.from(process.env.at_public",{"_index":1338,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buffer.from(process.env.rt_private",{"_index":1339,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buffer.from(process.env.rt_public",{"_index":1340,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cache",{"_index":223,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["cached",{"_index":826,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cachedatabase",{"_index":1313,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cachedatabaseconfig",{"_index":458,"title":{"interfaces/CacheDatabaseConfig.html":{}},"body":{"interfaces/CacheDatabaseConfig.html":{},"coverage.html":{}}}],["cachedatabaseconfigobject",{"_index":205,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cacheinterceptor",{"_index":184,"title":{},"body":{"modules/AppModule.html":{},"modules/MessageModule.html":{},"modules/UserModule.html":{}}}],["cachemanager",{"_index":813,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cachemodule",{"_index":183,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["cachemodule.register",{"_index":327,"title":{},"body":{"modules/AuthModule.html":{}}}],["call",{"_index":769,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"classes/RtGuard.html":{}}}],["canactivate",{"_index":747,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"classes/RtGuard.html":{}}}],["canactivate(context",{"_index":752,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"classes/RtGuard.html":{}}}],["cast",{"_index":993,"title":{},"body":{"classes/RtGuard.html":{}}}],["catch((error",{"_index":703,"title":{},"body":{"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/MessageService.html":{},"injectables/UserService.html":{}}}],["change",{"_index":1262,"title":{},"body":{"index.html":{}}}],["changelog",{"_index":1104,"title":{"changelog.html":{}},"body":{}}],["character",{"_index":1278,"title":{},"body":{"index.html":{}}}],["childs",{"_index":853,"title":{},"body":{"modules/LoggerModule.html":{}}}],["class",{"_index":0,"title":{"classes/AcessDeniedResponse.html":{},"classes/AddAndRemoveParticipantDto.html":{},"classes/AddParticipantDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"classes/EventDto.html":{},"classes/GetEventByIdDto.html":{},"classes/GetMessageInput.html":{},"classes/Message.html":{},"classes/MessageResolver.html":{},"classes/RemoveParticipantDto.html":{},"classes/RtGuard.html":{},"classes/SaveMessageInput.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/TokenDto.html":{},"classes/TokenDtoWithUserId.html":{},"classes/UnAuthorizedResponse.html":{},"classes/UserDto.html":{},"classes/UserFromJwtDto.html":{},"classes/UserRespondDto.html":{},"classes/UserUpdateProfileDto.html":{}},"body":{"classes/AcessDeniedResponse.html":{},"classes/AddAndRemoveParticipantDto.html":{},"classes/AddParticipantDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"classes/GetEventByIdDto.html":{},"classes/GetMessageInput.html":{},"injectables/GoogleOauthGuard.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"classes/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"classes/MessageResolver.html":{},"injectables/MessageService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/RemoveParticipantDto.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SaveMessageInput.html":{},"interfaces/SendMessageToChatDto.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/TokenDto.html":{},"classes/TokenDtoWithUserId.html":{},"classes/UnAuthorizedResponse.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserFromJwtDto.html":{},"modules/UserModule.html":{},"classes/UserRespondDto.html":{},"injectables/UserService.html":{},"classes/UserUpdateProfileDto.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"classes/AddAndRemoveParticipantDto.html":{},"classes/AddParticipantDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"classes/EventDto.html":{},"classes/GetEventByIdDto.html":{},"classes/GetMessageInput.html":{},"classes/Message.html":{},"classes/MessageResolver.html":{},"classes/RemoveParticipantDto.html":{},"classes/RtGuard.html":{},"classes/SaveMessageInput.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/TokenDto.html":{},"classes/TokenDtoWithUserId.html":{},"classes/UnAuthorizedResponse.html":{},"classes/UserDto.html":{},"classes/UserFromJwtDto.html":{},"classes/UserRespondDto.html":{},"classes/UserUpdateProfileDto.html":{},"overview.html":{}}}],["cleartoken",{"_index":1204,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["cleartokens",{"_index":1203,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["client",{"_index":381,"title":{},"body":{"injectables/AuthService.html":{}}}],["cluster_appmodule",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":162,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":312,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":315,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":313,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":314,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_eventmodule",{"_index":553,"title":{},"body":{"modules/EventModule.html":{},"overview.html":{}}}],["cluster_eventmodule_imports",{"_index":554,"title":{},"body":{"modules/EventModule.html":{}}}],["cluster_eventmodule_providers",{"_index":555,"title":{},"body":{"modules/EventModule.html":{},"overview.html":{}}}],["cluster_loggermodule",{"_index":845,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_loggermodule_exports",{"_index":847,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_loggermodule_imports",{"_index":846,"title":{},"body":{"modules/LoggerModule.html":{}}}],["cluster_loggermodule_providers",{"_index":848,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_messagemodule",{"_index":940,"title":{},"body":{"modules/MessageModule.html":{},"overview.html":{}}}],["cluster_messagemodule_providers",{"_index":941,"title":{},"body":{"modules/MessageModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":971,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":973,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":972,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1073,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":1075,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":1074,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["collate",{"_index":1280,"title":{},"body":{"index.html":{}}}],["collection",{"_index":1364,"title":{},"body":{"miscellaneous/variables.html":{}}}],["command",{"_index":1225,"title":{},"body":{"index.html":{}}}],["compose",{"_index":1216,"title":{},"body":{"index.html":{}}}],["compose.yml",{"_index":1222,"title":{},"body":{"index.html":{}}}],["config",{"_index":228,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["config/cachedatabase.config",{"_index":206,"title":{},"body":{"modules/AppModule.html":{}}}],["config/env.config",{"_index":208,"title":{},"body":{"modules/AppModule.html":{}}}],["config/key.config",{"_index":210,"title":{},"body":{"modules/AppModule.html":{}}}],["config/queuedatabase.config",{"_index":204,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":198,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":225,"title":{},"body":{"modules/AppModule.html":{}}}],["configoptionforroot",{"_index":221,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configservice",{"_index":216,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["configservice.get('cachedatabase.host",{"_index":230,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('cachedatabase.password",{"_index":233,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('cachedatabase.port",{"_index":232,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('jwtkey.at_publickey",{"_index":823,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('jwtkey.rt_publickey",{"_index":1001,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["configure",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["connect",{"_index":588,"title":{},"body":{"injectables/EventService.html":{},"classes/GetMessageInput.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"interfaces/ISendMessageToChatArgs.html":{},"classes/MessageResolver.html":{},"injectables/MessageService.html":{},"classes/SaveMessageInput.html":{}}}],["connectorcreate",{"_index":585,"title":{},"body":{"injectables/EventService.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{}}}],["console.log('in",{"_index":454,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('refreshtoken",{"_index":1006,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["console.log(data",{"_index":657,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["console.log(error",{"_index":706,"title":{},"body":{"interfaces/ISendMessageToChatArgs.html":{},"injectables/MessageService.html":{}}}],["console.log(eventchatid",{"_index":701,"title":{},"body":{"interfaces/ISendMessageToChatArgs.html":{},"injectables/MessageService.html":{}}}],["console.log(rawreq.csrftoken",{"_index":108,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["console.log(savemessagedata",{"_index":662,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["console.log(user",{"_index":778,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"injectables/JwtStrategy.html":{}}}],["const",{"_index":94,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"classes/GetMessageInput.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"injectables/JwtStrategy.html":{},"controllers/MessageController.html":{},"classes/MessageResolver.html":{},"injectables/MessageService.html":{},"injectables/RtStrategy.html":{},"classes/SaveMessageInput.html":{},"interfaces/SendMessageToChatDto.html":{},"classes/UnAuthorizedResponse.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EventService.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"classes/MessageResolver.html":{},"injectables/MessageService.html":{},"injectables/RtStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor(configservice",{"_index":997,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["constructor(logger",{"_index":564,"title":{},"body":{"injectables/EventService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{}}}],["constructor(msgsservice",{"_index":946,"title":{},"body":{"classes/MessageResolver.html":{}}}],["constructor(prisma",{"_index":961,"title":{},"body":{"injectables/MessageService.html":{},"injectables/UserService.html":{}}}],["constructor(private",{"_index":84,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/EventController.html":{},"classes/GetMessageInput.html":{},"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MessageController.html":{},"classes/MessageResolver.html":{},"injectables/MessageService.html":{},"injectables/RtStrategy.html":{},"classes/SaveMessageInput.html":{},"interfaces/SendMessageToChatDto.html":{},"classes/UnAuthorizedResponse.html":{},"injectables/UserService.html":{}}}],["constructor(reflector",{"_index":749,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{}}}],["constructor(userservice",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["consumer",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(loggermiddleware).forroutes",{"_index":258,"title":{},"body":{"modules/AppModule.html":{}}}],["context",{"_index":755,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"injectables/LoggerService.html":{},"classes/RtGuard.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["context.getclass",{"_index":776,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{}}}],["context.gethandler",{"_index":775,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{}}}],["context.switchtohttp().getrequest",{"_index":1329,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contributing",{"_index":1105,"title":{"contributing.html":{}},"body":{}}],["controller",{"_index":23,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/EventController.html":{},"controllers/MessageController.html":{},"controllers/UserController.html":{}},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/EventController.html":{},"controllers/MessageController.html":{},"interfaces/SendMessageToChatDto.html":{},"classes/UnAuthorizedResponse.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":82,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["controller('event",{"_index":527,"title":{},"body":{"controllers/EventController.html":{}}}],["controller('message",{"_index":929,"title":{},"body":{"controllers/MessageController.html":{},"interfaces/SendMessageToChatDto.html":{}}}],["controller('user",{"_index":1055,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":146,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/EventController.html":{},"modules/EventModule.html":{},"modules/LoggerModule.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"modules/PrismaModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["cookies",{"_index":67,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{},"miscellaneous/variables.html":{}}}],["cors",{"_index":249,"title":{},"body":{"modules/AppModule.html":{}}}],["coverage",{"_index":1106,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":395,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EventService.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/MessageService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["createdat",{"_index":483,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"classes/EventDto.html":{},"classes/GetEventByIdDto.html":{},"classes/UserDto.html":{},"classes/UserRespondDto.html":{},"index.html":{}}}],["createevent",{"_index":499,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{}}}],["createevent(createeventparam",{"_index":508,"title":{},"body":{"controllers/EventController.html":{}}}],["createevent(data",{"_index":569,"title":{},"body":{"injectables/EventService.html":{}}}],["createeventdto",{"_index":462,"title":{"classes/CreateEventDto.html":{}},"body":{"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"classes/GetEventByIdDto.html":{},"coverage.html":{}}}],["createeventparam",{"_index":512,"title":{},"body":{"controllers/EventController.html":{}}}],["createeventparam.creatorusername",{"_index":534,"title":{},"body":{"controllers/EventController.html":{}}}],["createeventparam.description",{"_index":531,"title":{},"body":{"controllers/EventController.html":{}}}],["createeventparam.eventname",{"_index":530,"title":{},"body":{"controllers/EventController.html":{}}}],["createeventparam.location",{"_index":532,"title":{},"body":{"controllers/EventController.html":{}}}],["createeventresponsedto",{"_index":486,"title":{"classes/CreateEventResponseDto.html":{}},"body":{"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"classes/GetEventByIdDto.html":{},"coverage.html":{}}}],["createeventresponsedto})@httpcode(200",{"_index":510,"title":{},"body":{"controllers/EventController.html":{}}}],["createlog",{"_index":869,"title":{},"body":{"injectables/LoggerService.html":{}}}],["createlog(data",{"_index":874,"title":{},"body":{"injectables/LoggerService.html":{}}}],["createmessage",{"_index":956,"title":{},"body":{"injectables/MessageService.html":{}}}],["createmessage(data",{"_index":693,"title":{},"body":{"interfaces/ISendMessageToChatArgs.html":{},"injectables/MessageService.html":{}}}],["createparamdecorator",{"_index":1327,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createtable",{"_index":1268,"title":{},"body":{"index.html":{}}}],["createuser",{"_index":1084,"title":{},"body":{"injectables/UserService.html":{}}}],["createuser(data",{"_index":734,"title":{},"body":{"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/UserService.html":{}}}],["creator",{"_index":488,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"classes/EventDto.html":{},"injectables/EventService.html":{},"classes/GetEventByIdDto.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{}}}],["creatorid",{"_index":484,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"classes/EventDto.html":{},"classes/GetEventByIdDto.html":{}}}],["creatorusername",{"_index":465,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"injectables/EventService.html":{},"classes/GetEventByIdDto.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{}}}],["crypto",{"_index":376,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["ctx",{"_index":790,"title":{},"body":{"injectables/JwtAuthGuardGraphql.html":{},"miscellaneous/variables.html":{}}}],["ctx.getcontext().req",{"_index":792,"title":{},"body":{"injectables/JwtAuthGuardGraphql.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1332,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getresponse",{"_index":1345,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current_timestamp(3",{"_index":1275,"title":{},"body":{"index.html":{}}}],["cursor",{"_index":688,"title":{},"body":{"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/MessageService.html":{},"injectables/UserService.html":{}}}],["custom",{"_index":764,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"classes/RtGuard.html":{}}}],["d",{"_index":1226,"title":{},"body":{"index.html":{}}}],["data",{"_index":272,"title":{},"body":{"interfaces/ArgonHashPayload.html":{},"injectables/AuthService.html":{},"injectables/EventService.html":{},"classes/GetMessageInput.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerService.html":{},"classes/MessageResolver.html":{},"injectables/MessageService.html":{},"classes/SaveMessageInput.html":{},"interfaces/TripleDesDecryptPayload.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["data.creatorusername",{"_index":586,"title":{},"body":{"injectables/EventService.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{}}}],["data.date",{"_index":583,"title":{},"body":{"injectables/EventService.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{}}}],["data.description",{"_index":582,"title":{},"body":{"injectables/EventService.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{}}}],["data.location",{"_index":584,"title":{},"body":{"injectables/EventService.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{}}}],["data.name",{"_index":581,"title":{},"body":{"injectables/EventService.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{}}}],["database",{"_index":1218,"title":{},"body":{"index.html":{}}}],["databse",{"_index":1261,"title":{},"body":{"index.html":{}}}],["date",{"_index":466,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"injectables/EventService.html":{},"classes/GetEventByIdDto.html":{},"classes/GetMessageInput.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"interfaces/ISendMessageToChatArgs.html":{},"injectables/LoggerService.html":{},"classes/Message.html":{},"controllers/MessageController.html":{},"classes/MessageResolver.html":{},"injectables/MessageService.html":{},"classes/SaveMessageInput.html":{},"interfaces/SendMessageToChatDto.html":{},"classes/UserDto.html":{},"classes/UserRespondDto.html":{},"index.html":{}}}],["date(args.date",{"_index":932,"title":{},"body":{"controllers/MessageController.html":{},"interfaces/SendMessageToChatDto.html":{}}}],["date(createeventparam.date",{"_index":529,"title":{},"body":{"controllers/EventController.html":{}}}],["date(date.now",{"_index":533,"title":{},"body":{"controllers/EventController.html":{}}}],["datetime(3",{"_index":1273,"title":{},"body":{"index.html":{}}}],["db",{"_index":1245,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["debug",{"_index":242,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerService.html":{}}}],["debug(message",{"_index":877,"title":{},"body":{"injectables/LoggerService.html":{}}}],["declaration",{"_index":1200,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["decodedsub",{"_index":427,"title":{},"body":{"injectables/AuthService.html":{}}}],["decorators",{"_index":15,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"classes/AddAndRemoveParticipantDto.html":{},"classes/AddParticipantDto.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"classes/GetEventByIdDto.html":{},"classes/GetMessageInput.html":{},"classes/Message.html":{},"controllers/MessageController.html":{},"classes/MessageResolver.html":{},"classes/RemoveParticipantDto.html":{},"classes/SaveMessageInput.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/TokenDto.html":{},"classes/TokenDtoWithUserId.html":{},"classes/UnAuthorizedResponse.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserFromJwtDto.html":{},"classes/UserRespondDto.html":{},"classes/UserUpdateProfileDto.html":{}}}],["decorators/getcurrentuser.decorator",{"_index":47,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["decorators/getcurrentusercookie.decorator",{"_index":52,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["decorators/usecookie.decorator",{"_index":55,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["decrypted",{"_index":452,"title":{},"body":{"injectables/AuthService.html":{}}}],["decrypted.tostring",{"_index":456,"title":{},"body":{"injectables/AuthService.html":{}}}],["decrypted.tostring(enc.utf8",{"_index":457,"title":{},"body":{"injectables/AuthService.html":{}}}],["decryptjwtpayload",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{}}}],["decryptjwtpayload(payload",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{}}}],["default",{"_index":1274,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["defaultvalue",{"_index":618,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["defined",{"_index":17,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"classes/AddAndRemoveParticipantDto.html":{},"classes/AddParticipantDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"injectables/EventService.html":{},"classes/GetEventByIdDto.html":{},"classes/GetMessageInput.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"classes/Message.html":{},"controllers/MessageController.html":{},"classes/MessageResolver.html":{},"injectables/MessageService.html":{},"injectables/PrismaService.html":{},"classes/RemoveParticipantDto.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SaveMessageInput.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/TokenDto.html":{},"classes/TokenDtoWithUserId.html":{},"classes/UnAuthorizedResponse.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserFromJwtDto.html":{},"classes/UserRespondDto.html":{},"injectables/UserService.html":{},"classes/UserUpdateProfileDto.html":{}}}],["deleted",{"_index":1264,"title":{},"body":{"index.html":{}}}],["deletemessage",{"_index":957,"title":{},"body":{"injectables/MessageService.html":{}}}],["deletemessage(where",{"_index":698,"title":{},"body":{"interfaces/ISendMessageToChatArgs.html":{},"injectables/MessageService.html":{}}}],["denied",{"_index":122,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UnAuthorizedResponse.html":{}}}],["denied(user",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{}}}],["dependencies",{"_index":159,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/LoggerModule.html":{},"modules/MessageModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":1267,"title":{},"body":{"index.html":{}}}],["desc",{"_index":656,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["description",{"_index":89,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"injectables/EventService.html":{},"classes/GetEventByIdDto.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"classes/UnAuthorizedResponse.html":{},"controllers/UserController.html":{},"properties.html":{}}}],["dev",{"_index":1215,"title":{},"body":{"index.html":{}}}],["development",{"_index":244,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["direct",{"_index":864,"title":{},"body":{"modules/LoggerModule.html":{}}}],["directly",{"_index":860,"title":{},"body":{"modules/LoggerModule.html":{}}}],["disconnect",{"_index":593,"title":{},"body":{"injectables/EventService.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{}}}],["docker",{"_index":1209,"title":{},"body":{"index.html":{}}}],["docs",{"_index":256,"title":{},"body":{"modules/AppModule.html":{}}}],["documentation",{"_index":1107,"title":{},"body":{"coverage.html":{}}}],["don't",{"_index":863,"title":{},"body":{"modules/LoggerModule.html":{}}}],["down",{"_index":1223,"title":{},"body":{"index.html":{}}}],["driver",{"_index":236,"title":{},"body":{"modules/AppModule.html":{}}}],["dto",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.password",{"_index":415,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.username",{"_index":405,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto/create",{"_index":523,"title":{},"body":{"controllers/EventController.html":{}}}],["dto/participant.dto",{"_index":525,"title":{},"body":{"controllers/EventController.html":{}}}],["dto/user",{"_index":1052,"title":{},"body":{"controllers/UserController.html":{}}}],["dto/user.dto",{"_index":1051,"title":{},"body":{"controllers/UserController.html":{}}}],["duplicated",{"_index":865,"title":{},"body":{"modules/LoggerModule.html":{}}}],["email",{"_index":97,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EventService.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/TokenDto.html":{},"classes/TokenDtoWithUserId.html":{},"classes/UnAuthorizedResponse.html":{},"classes/UserDto.html":{},"classes/UserFromJwtDto.html":{},"classes/UserRespondDto.html":{},"index.html":{}}}],["enableshutdownhooks",{"_index":978,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":980,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enc",{"_index":375,"title":{},"body":{"injectables/AuthService.html":{}}}],["encryptedat",{"_index":432,"title":{},"body":{"injectables/AuthService.html":{}}}],["encryptedrt",{"_index":442,"title":{},"body":{"injectables/AuthService.html":{}}}],["end",{"_index":1227,"title":{},"body":{"index.html":{}}}],["enum",{"_index":275,"title":{},"body":{"interfaces/ArgonHashPayload.html":{},"interfaces/TripleDesDecryptPayload.html":{}}}],["enumerations",{"_index":1196,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":1236,"title":{},"body":{"index.html":{}}}],["envconfig",{"_index":1142,"title":{"interfaces/envConfig.html":{}},"body":{"coverage.html":{},"interfaces/envConfig.html":{}}}],["envconfigobject",{"_index":207,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["err",{"_index":758,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"classes/RtGuard.html":{}}}],["error",{"_index":9,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/LoggerService.html":{},"injectables/MessageService.html":{},"classes/UnAuthorizedResponse.html":{},"injectables/UserService.html":{}}}],["error(message",{"_index":880,"title":{},"body":{"injectables/LoggerService.html":{}}}],["error.code",{"_index":707,"title":{},"body":{"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/MessageService.html":{},"injectables/UserService.html":{}}}],["establish",{"_index":771,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"classes/RtGuard.html":{}}}],["event",{"_index":474,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"injectables/EventService.html":{},"classes/GetEventByIdDto.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{}}}],["event.controller",{"_index":559,"title":{},"body":{"modules/EventModule.html":{}}}],["event.dto",{"_index":524,"title":{},"body":{"controllers/EventController.html":{}}}],["event.dto.ts",{"_index":464,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"classes/EventDto.html":{},"classes/GetEventByIdDto.html":{},"coverage.html":{}}}],["event.dto.ts:10",{"_index":473,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:12",{"_index":470,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:14",{"_index":469,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:19",{"_index":494,"title":{},"body":{"classes/EventChatDto.html":{}}}],["event.dto.ts:21",{"_index":495,"title":{},"body":{"classes/EventChatDto.html":{}}}],["event.dto.ts:23",{"_index":493,"title":{},"body":{"classes/EventChatDto.html":{}}}],["event.dto.ts:27",{"_index":548,"title":{},"body":{"classes/EventDto.html":{}}}],["event.dto.ts:29",{"_index":544,"title":{},"body":{"classes/EventDto.html":{}}}],["event.dto.ts:31",{"_index":552,"title":{},"body":{"classes/EventDto.html":{}}}],["event.dto.ts:33",{"_index":550,"title":{},"body":{"classes/EventDto.html":{}}}],["event.dto.ts:35",{"_index":546,"title":{},"body":{"classes/EventDto.html":{}}}],["event.dto.ts:37",{"_index":549,"title":{},"body":{"classes/EventDto.html":{}}}],["event.dto.ts:39",{"_index":547,"title":{},"body":{"classes/EventDto.html":{}}}],["event.dto.ts:41",{"_index":545,"title":{},"body":{"classes/EventDto.html":{}}}],["event.dto.ts:43",{"_index":551,"title":{},"body":{"classes/EventDto.html":{}}}],["event.dto.ts:47",{"_index":491,"title":{},"body":{"classes/CreateEventResponseDto.html":{}}}],["event.dto.ts:49",{"_index":492,"title":{},"body":{"classes/CreateEventResponseDto.html":{}}}],["event.dto.ts:53",{"_index":596,"title":{},"body":{"classes/GetEventByIdDto.html":{}}}],["event.dto.ts:55",{"_index":599,"title":{},"body":{"classes/GetEventByIdDto.html":{}}}],["event.dto.ts:57",{"_index":597,"title":{},"body":{"classes/GetEventByIdDto.html":{}}}],["event.dto.ts:6",{"_index":472,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:8",{"_index":471,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.id",{"_index":589,"title":{},"body":{"injectables/EventService.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{}}}],["event.service",{"_index":522,"title":{},"body":{"controllers/EventController.html":{},"modules/EventModule.html":{}}}],["event/event.module",{"_index":217,"title":{},"body":{"modules/AppModule.html":{}}}],["eventchat",{"_index":475,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"classes/EventDto.html":{},"injectables/EventService.html":{},"classes/GetEventByIdDto.html":{},"classes/GetMessageInput.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"interfaces/ISendMessageToChatArgs.html":{},"classes/MessageResolver.html":{},"injectables/MessageService.html":{},"classes/SaveMessageInput.html":{}}}],["eventchatdto",{"_index":479,"title":{"classes/EventChatDto.html":{}},"body":{"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"classes/EventDto.html":{},"classes/GetEventByIdDto.html":{},"coverage.html":{}}}],["eventchatid",{"_index":611,"title":{},"body":{"classes/GetMessageInput.html":{},"interfaces/ISendMessageToChatArgs.html":{},"controllers/MessageController.html":{},"classes/MessageResolver.html":{},"injectables/MessageService.html":{},"classes/SaveMessageInput.html":{},"interfaces/SendMessageToChatDto.html":{}}}],["eventcontroller",{"_index":496,"title":{"controllers/EventController.html":{}},"body":{"controllers/EventController.html":{},"modules/EventModule.html":{},"coverage.html":{}}}],["eventdto",{"_index":482,"title":{"classes/EventDto.html":{}},"body":{"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"classes/GetEventByIdDto.html":{},"coverage.html":{}}}],["eventdto:27",{"_index":604,"title":{},"body":{"classes/GetEventByIdDto.html":{}}}],["eventdto:29",{"_index":600,"title":{},"body":{"classes/GetEventByIdDto.html":{}}}],["eventdto:31",{"_index":608,"title":{},"body":{"classes/GetEventByIdDto.html":{}}}],["eventdto:33",{"_index":606,"title":{},"body":{"classes/GetEventByIdDto.html":{}}}],["eventdto:35",{"_index":602,"title":{},"body":{"classes/GetEventByIdDto.html":{}}}],["eventdto:37",{"_index":605,"title":{},"body":{"classes/GetEventByIdDto.html":{}}}],["eventdto:39",{"_index":603,"title":{},"body":{"classes/GetEventByIdDto.html":{}}}],["eventdto:41",{"_index":601,"title":{},"body":{"classes/GetEventByIdDto.html":{}}}],["eventdto:43",{"_index":607,"title":{},"body":{"classes/GetEventByIdDto.html":{}}}],["eventdto})@httpcode(200",{"_index":505,"title":{},"body":{"controllers/EventController.html":{}}}],["eventid",{"_index":136,"title":{},"body":{"classes/AddAndRemoveParticipantDto.html":{},"classes/AddParticipantDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"injectables/EventService.html":{},"classes/GetEventByIdDto.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"controllers/MessageController.html":{},"classes/RemoveParticipantDto.html":{},"interfaces/SendMessageToChatDto.html":{}}}],["eventmodule",{"_index":164,"title":{"modules/EventModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EventModule.html":{},"modules.html":{},"overview.html":{}}}],["eventname",{"_index":467,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"classes/EventDto.html":{},"classes/GetEventByIdDto.html":{}}}],["eventservice",{"_index":521,"title":{"injectables/EventService.html":{}},"body":{"controllers/EventController.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"coverage.html":{},"overview.html":{}}}],["eventsjoined",{"_index":1062,"title":{},"body":{"classes/UserDto.html":{},"classes/UserRespondDto.html":{}}}],["ex",{"_index":832,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["example",{"_index":768,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"classes/RtGuard.html":{}}}],["exception",{"_index":779,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"classes/RtGuard.html":{}}}],["executioncontext",{"_index":753,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"classes/RtGuard.html":{},"miscellaneous/variables.html":{}}}],["exp",{"_index":795,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/JwtPayloadForSign.html":{},"interfaces/JwtPayloadWithRt.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/TokenDto.html":{},"classes/TokenDtoWithUserId.html":{},"classes/UserFromJwtDto.html":{}}}],["expiresin",{"_index":437,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":63,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"classes/AddAndRemoveParticipantDto.html":{},"classes/AddParticipantDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"interfaces/ArgonHashPayload.html":{},"controllers/AuthController.html":{},"interfaces/AuthKey.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CacheDatabaseConfig.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"classes/GetEventByIdDto.html":{},"classes/GetMessageInput.html":{},"injectables/GoogleOauthGuard.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayloadForSign.html":{},"interfaces/JwtPayloadWithRt.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"classes/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"classes/MessageResolver.html":{},"injectables/MessageService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"interfaces/QueueDatabaseConfig.html":{},"classes/RemoveParticipantDto.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SaveMessageInput.html":{},"interfaces/SendMessageToChatDto.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/TokenDto.html":{},"classes/TokenDtoWithUserId.html":{},"interfaces/TripleDesDecryptPayload.html":{},"classes/UnAuthorizedResponse.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserFromJwtDto.html":{},"modules/UserModule.html":{},"classes/UserRespondDto.html":{},"injectables/UserService.html":{},"classes/UserUpdateProfileDto.html":{},"interfaces/envConfig.html":{}}}],["exports",{"_index":319,"title":{},"body":{"modules/AuthModule.html":{},"modules/LoggerModule.html":{},"modules/MessageModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{}}}],["expose",{"_index":1217,"title":{},"body":{"index.html":{}}}],["express",{"_index":50,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/RtStrategy.html":{},"classes/UnAuthorizedResponse.html":{},"dependencies.html":{}}}],["extends",{"_index":140,"title":{},"body":{"classes/AddAndRemoveParticipantDto.html":{},"classes/AddParticipantDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"classes/EventDto.html":{},"classes/GetEventByIdDto.html":{},"injectables/GoogleOauthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayloadForSign.html":{},"interfaces/JwtPayloadWithRt.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"classes/RemoveParticipantDto.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/TokenDto.html":{},"classes/TokenDtoWithUserId.html":{},"classes/UserFromJwtDto.html":{}}}],["extractjwt",{"_index":805,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":820,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken()(req",{"_index":818,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["extractjwtfromcookie",{"_index":814,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["f",{"_index":1221,"title":{},"body":{"index.html":{}}}],["false",{"_index":251,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["fetch",{"_index":72,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["field",{"_index":623,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/Message.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["field((type",{"_index":639,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/Message.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["field(type",{"_index":614,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/Message.html":{},"classes/SaveMessageInput.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"classes/AddAndRemoveParticipantDto.html":{},"classes/AddParticipantDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"interfaces/ArgonHashPayload.html":{},"controllers/AuthController.html":{},"interfaces/AuthKey.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CacheDatabaseConfig.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"classes/GetEventByIdDto.html":{},"classes/GetMessageInput.html":{},"injectables/GoogleOauthGuard.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayloadForSign.html":{},"interfaces/JwtPayloadWithRt.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"classes/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"classes/MessageResolver.html":{},"injectables/MessageService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"interfaces/QueueDatabaseConfig.html":{},"classes/RemoveParticipantDto.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SaveMessageInput.html":{},"interfaces/SendMessageToChatDto.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/TokenDto.html":{},"classes/TokenDtoWithUserId.html":{},"interfaces/TripleDesDecryptPayload.html":{},"classes/UnAuthorizedResponse.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserFromJwtDto.html":{},"modules/UserModule.html":{},"classes/UserRespondDto.html":{},"injectables/UserService.html":{},"classes/UserUpdateProfileDto.html":{},"coverage.html":{},"interfaces/envConfig.html":{}}}],["findmany",{"_index":714,"title":{},"body":{"interfaces/ISendMessageToChatArgs.html":{},"injectables/MessageService.html":{}}}],["first",{"_index":1242,"title":{},"body":{"index.html":{}}}],["forbiddenexception",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/MessageService.html":{},"injectables/RtStrategy.html":{},"injectables/UserService.html":{}}}],["forbiddenexception('access",{"_index":411,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception('credentials",{"_index":738,"title":{},"body":{"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/UserService.html":{}}}],["forbiddenexception('eventchat",{"_index":711,"title":{},"body":{"interfaces/ISendMessageToChatArgs.html":{},"injectables/MessageService.html":{}}}],["forbiddenexception('invalid",{"_index":709,"title":{},"body":{"interfaces/ISendMessageToChatArgs.html":{},"injectables/MessageService.html":{}}}],["forbiddenexception('refresh",{"_index":1010,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["format",{"_index":1355,"title":{},"body":{"miscellaneous/variables.html":{}}}],["found",{"_index":712,"title":{},"body":{"interfaces/ISendMessageToChatArgs.html":{},"injectables/JwtStrategy.html":{},"injectables/MessageService.html":{},"controllers/UserController.html":{}}}],["function",{"_index":1138,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1206,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generic",{"_index":995,"title":{},"body":{"classes/RtGuard.html":{}}}],["get('/getevent/:eventid",{"_index":541,"title":{},"body":{"controllers/EventController.html":{}}}],["get('/getmessagesbyeventid",{"_index":937,"title":{},"body":{"controllers/MessageController.html":{},"interfaces/SendMessageToChatDto.html":{}}}],["get('/getmessagesbyeventid')@httpcode(200",{"_index":923,"title":{},"body":{"controllers/MessageController.html":{}}}],["get('/me",{"_index":129,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["get(':username",{"_index":1057,"title":{},"body":{"controllers/UserController.html":{}}}],["get(':username')@apiokresponse({description",{"_index":1042,"title":{},"body":{"controllers/UserController.html":{}}}],["get('authorization",{"_index":1003,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["get()@apiokresponse({description",{"_index":1039,"title":{},"body":{"controllers/UserController.html":{}}}],["getallusers",{"_index":1036,"title":{},"body":{"controllers/UserController.html":{}}}],["getcurrentuser",{"_index":46,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getcurrentuser('refreshtoken",{"_index":125,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["getcurrentuser('userid",{"_index":124,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["getcurrentusercookie",{"_index":51,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getdata",{"_index":722,"title":{},"body":{"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/UserService.html":{}}}],["getevent",{"_index":500,"title":{},"body":{"controllers/EventController.html":{}}}],["getevent(@param('eventid",{"_index":542,"title":{},"body":{"controllers/EventController.html":{}}}],["getevent(eventid",{"_index":513,"title":{},"body":{"controllers/EventController.html":{}}}],["geteventbyid",{"_index":562,"title":{},"body":{"injectables/EventService.html":{}}}],["geteventbyid(eventid",{"_index":572,"title":{},"body":{"injectables/EventService.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{}}}],["geteventbyiddto",{"_index":487,"title":{"classes/GetEventByIdDto.html":{}},"body":{"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"classes/GetEventByIdDto.html":{},"coverage.html":{}}}],["geteventbyiddto})@get('/getevent/:eventid",{"_index":515,"title":{},"body":{"controllers/EventController.html":{}}}],["gethello",{"_index":149,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getmessage",{"_index":945,"title":{},"body":{"classes/MessageResolver.html":{}}}],["getmessage(@args('getmessageinput",{"_index":648,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["getmessage(getmessageinput",{"_index":948,"title":{},"body":{"classes/MessageResolver.html":{}}}],["getmessageinput",{"_index":609,"title":{"classes/GetMessageInput.html":{}},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{},"coverage.html":{}}}],["getmessageinput.eventchatid",{"_index":654,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["getmessageinput.limit",{"_index":653,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["getmessageinput.offset",{"_index":651,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["getmessagesbyeventchatid",{"_index":958,"title":{},"body":{"injectables/MessageService.html":{}}}],["getmessagesbyeventchatid(eventchatid",{"_index":713,"title":{},"body":{"interfaces/ISendMessageToChatArgs.html":{},"injectables/MessageService.html":{}}}],["getmessagesbyeventid",{"_index":920,"title":{},"body":{"controllers/MessageController.html":{}}}],["getmessagesbyeventid(@body",{"_index":938,"title":{},"body":{"controllers/MessageController.html":{},"interfaces/SendMessageToChatDto.html":{}}}],["getmessagesbyeventid(args",{"_index":922,"title":{},"body":{"controllers/MessageController.html":{}}}],["getprofile",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(@req",{"_index":130,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["getprofile(req",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{}}}],["getrequest",{"_index":783,"title":{},"body":{"injectables/JwtAuthGuardGraphql.html":{}}}],["getrequest(context",{"_index":786,"title":{},"body":{"injectables/JwtAuthGuardGraphql.html":{}}}],["getting",{"_index":1102,"title":{"changelog.html":{},"contributing.html":{},"index.html":{},"license.html":{},"todo.html":{}},"body":{}}],["gettokens",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{}}}],["gettokens(payload",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{}}}],["getuser",{"_index":1037,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(username",{"_index":1041,"title":{},"body":{"controllers/UserController.html":{}}}],["git+https://github.com/maszz/sf341",{"_index":1301,"title":{},"body":{"properties.html":{}}}],["global",{"_index":558,"title":{},"body":{"modules/EventModule.html":{},"modules/LoggerModule.html":{},"modules/PrismaModule.html":{}}}],["globalprefix",{"_index":1205,"title":{},"body":{"interfaces/envConfig.html":{},"miscellaneous/variables.html":{}}}],["googleoauthguard",{"_index":677,"title":{"injectables/GoogleOauthGuard.html":{}},"body":{"injectables/GoogleOauthGuard.html":{},"coverage.html":{}}}],["gqlexecutioncontext",{"_index":789,"title":{},"body":{"injectables/JwtAuthGuardGraphql.html":{}}}],["gqlexecutioncontext.create(context",{"_index":791,"title":{},"body":{"injectables/JwtAuthGuardGraphql.html":{}}}],["graphql",{"_index":239,"title":{},"body":{"modules/AppModule.html":{},"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{},"dependencies.html":{}}}],["graphql.guard",{"_index":638,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["graphql.guard.ts",{"_index":782,"title":{},"body":{"injectables/JwtAuthGuardGraphql.html":{},"coverage.html":{}}}],["graphql.guard.ts:12",{"_index":784,"title":{},"body":{"injectables/JwtAuthGuardGraphql.html":{}}}],["graphql.guard.ts:16",{"_index":785,"title":{},"body":{"injectables/JwtAuthGuardGraphql.html":{}}}],["graphql.guard.ts:33",{"_index":787,"title":{},"body":{"injectables/JwtAuthGuardGraphql.html":{}}}],["graphql.guard.ts:38",{"_index":788,"title":{},"body":{"injectables/JwtAuthGuardGraphql.html":{}}}],["graphqlmodule",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlmodule.forroot",{"_index":235,"title":{},"body":{"modules/AppModule.html":{}}}],["guard",{"_index":1009,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["guard/jwt",{"_index":36,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["guard/rt.guard",{"_index":39,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["handlerequest",{"_index":748,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"classes/RtGuard.html":{}}}],["handlerequest(err",{"_index":756,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"classes/RtGuard.html":{}}}],["hard",{"_index":1263,"title":{},"body":{"index.html":{}}}],["hash",{"_index":387,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashdata",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashdata(data",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashed",{"_index":406,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["hashedrt",{"_index":431,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserDto.html":{},"classes/UserRespondDto.html":{},"index.html":{}}}],["hashlength",{"_index":278,"title":{},"body":{"interfaces/ArgonHashPayload.html":{},"interfaces/TripleDesDecryptPayload.html":{}}}],["hashpw",{"_index":393,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserDto.html":{},"classes/UserRespondDto.html":{},"index.html":{}}}],["header",{"_index":68,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{},"miscellaneous/variables.html":{}}}],["hello",{"_index":265,"title":{},"body":{"injectables/AppService.html":{}}}],["helper",{"_index":1199,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["here",{"_index":767,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"classes/RtGuard.html":{}}}],["host",{"_index":229,"title":{},"body":{"modules/AppModule.html":{},"interfaces/CacheDatabaseConfig.html":{},"interfaces/QueueDatabaseConfig.html":{},"miscellaneous/variables.html":{}}}],["http",{"_index":870,"title":{},"body":{"injectables/LoggerService.html":{}}}],["http(request",{"_index":887,"title":{},"body":{"injectables/LoggerService.html":{}}}],["httpcode",{"_index":31,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"controllers/EventController.html":{},"controllers/MessageController.html":{},"interfaces/SendMessageToChatDto.html":{},"classes/UnAuthorizedResponse.html":{},"controllers/UserController.html":{}}}],["httpcode(200",{"_index":105,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"controllers/EventController.html":{},"controllers/MessageController.html":{},"interfaces/SendMessageToChatDto.html":{},"classes/UnAuthorizedResponse.html":{},"controllers/UserController.html":{}}}],["httponly",{"_index":1350,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httprequest",{"_index":909,"title":{},"body":{"injectables/LoggerService.html":{}}}],["iaddparticipantargs",{"_index":567,"title":{"interfaces/IAddParticipantArgs.html":{}},"body":{"injectables/EventService.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"coverage.html":{}}}],["iat",{"_index":796,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/JwtPayloadForSign.html":{},"interfaces/JwtPayloadWithRt.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/TokenDto.html":{},"classes/TokenDtoWithUserId.html":{},"classes/UserFromJwtDto.html":{}}}],["icreateeventargs",{"_index":570,"title":{"interfaces/ICreateEventArgs.html":{}},"body":{"injectables/EventService.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"coverage.html":{}}}],["id",{"_index":480,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"injectables/EventService.html":{},"classes/GetEventByIdDto.html":{},"classes/GetMessageInput.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"interfaces/ISendMessageToChatArgs.html":{},"injectables/JwtStrategy.html":{},"classes/Message.html":{},"classes/MessageResolver.html":{},"injectables/MessageService.html":{},"classes/SaveMessageInput.html":{},"classes/UserDto.html":{},"classes/UserRespondDto.html":{},"index.html":{}}}],["identifier",{"_index":1108,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":821,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["image",{"_index":1211,"title":{},"body":{"index.html":{}}}],["implements",{"_index":843,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/PrismaService.html":{}}}],["import",{"_index":22,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"classes/AddAndRemoveParticipantDto.html":{},"classes/AddParticipantDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"classes/GetEventByIdDto.html":{},"classes/GetMessageInput.html":{},"injectables/GoogleOauthGuard.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"classes/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"classes/MessageResolver.html":{},"injectables/MessageService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/RemoveParticipantDto.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SaveMessageInput.html":{},"interfaces/SendMessageToChatDto.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/TokenDto.html":{},"classes/TokenDtoWithUserId.html":{},"classes/UnAuthorizedResponse.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserFromJwtDto.html":{},"modules/UserModule.html":{},"classes/UserRespondDto.html":{},"injectables/UserService.html":{},"classes/UserUpdateProfileDto.html":{}}}],["imports",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/LoggerModule.html":{},"modules/MessageModule.html":{},"modules/PrismaModule.html":{}}}],["include",{"_index":595,"title":{},"body":{"injectables/EventService.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/MessageService.html":{},"injectables/UserService.html":{}}}],["includeinput",{"_index":727,"title":{},"body":{"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/UserService.html":{}}}],["incorrect",{"_index":739,"title":{},"body":{"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/UserService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"classes/AcessDeniedResponse.html":{},"classes/AddAndRemoveParticipantDto.html":{},"classes/AddParticipantDto.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"interfaces/ArgonHashPayload.html":{},"controllers/AuthController.html":{},"interfaces/AuthKey.html":{},"injectables/AuthService.html":{},"interfaces/CacheDatabaseConfig.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"injectables/EventService.html":{},"classes/GetEventByIdDto.html":{},"classes/GetMessageInput.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayloadForSign.html":{},"interfaces/JwtPayloadWithRt.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"classes/Message.html":{},"controllers/MessageController.html":{},"classes/MessageResolver.html":{},"injectables/MessageService.html":{},"injectables/PrismaService.html":{},"interfaces/QueueDatabaseConfig.html":{},"classes/RemoveParticipantDto.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SaveMessageInput.html":{},"interfaces/SendMessageToChatDto.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/TokenDto.html":{},"classes/TokenDtoWithUserId.html":{},"interfaces/TripleDesDecryptPayload.html":{},"classes/UnAuthorizedResponse.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserFromJwtDto.html":{},"classes/UserRespondDto.html":{},"injectables/UserService.html":{},"classes/UserUpdateProfileDto.html":{},"miscellaneous/enumerations.html":{},"interfaces/envConfig.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":981,"title":{},"body":{"injectables/PrismaService.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"classes/AddAndRemoveParticipantDto.html":{},"classes/AddParticipantDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"interfaces/ArgonHashPayload.html":{},"controllers/AuthController.html":{},"interfaces/AuthKey.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CacheDatabaseConfig.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"classes/GetEventByIdDto.html":{},"classes/GetMessageInput.html":{},"injectables/GoogleOauthGuard.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayloadForSign.html":{},"interfaces/JwtPayloadWithRt.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"classes/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"classes/MessageResolver.html":{},"injectables/MessageService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"interfaces/QueueDatabaseConfig.html":{},"classes/RemoveParticipantDto.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SaveMessageInput.html":{},"interfaces/SendMessageToChatDto.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/TokenDto.html":{},"classes/TokenDtoWithUserId.html":{},"interfaces/TripleDesDecryptPayload.html":{},"classes/UnAuthorizedResponse.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserFromJwtDto.html":{},"modules/UserModule.html":{},"classes/UserRespondDto.html":{},"injectables/UserService.html":{},"classes/UserUpdateProfileDto.html":{},"interfaces/envConfig.html":{}}}],["information",{"_index":886,"title":{},"body":{"injectables/LoggerService.html":{}}}],["inherited",{"_index":142,"title":{},"body":{"classes/AddParticipantDto.html":{},"classes/GetEventByIdDto.html":{},"classes/RemoveParticipantDto.html":{},"classes/TokenDtoWithUserId.html":{}}}],["init",{"_index":1251,"title":{},"body":{"index.html":{}}}],["initialize",{"_index":577,"title":{},"body":{"injectables/EventService.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"injectables/LoggerService.html":{},"index.html":{}}}],["inject",{"_index":234,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{}}}],["inject(cache_manager",{"_index":812,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["injectable",{"_index":261,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/EventService.html":{},"injectables/GoogleOauthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/MessageService.html":{},"injectables/PrismaService.html":{},"injectables/RtStrategy.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/EventService.html":{},"injectables/GoogleOauthGuard.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/MessageService.html":{},"injectables/PrismaService.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":262,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/EventService.html":{},"injectables/GoogleOauthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/MessageService.html":{},"injectables/PrismaService.html":{},"injectables/RtStrategy.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["inputtype",{"_index":630,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["install",{"_index":1208,"title":{},"body":{"index.html":{}}}],["installsubscriptionhandlers",{"_index":237,"title":{},"body":{"modules/AppModule.html":{}}}],["instance",{"_index":578,"title":{},"body":{"injectables/EventService.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"injectables/LoggerService.html":{},"index.html":{}}}],["instanceof",{"_index":704,"title":{},"body":{"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/MessageService.html":{},"injectables/UserService.html":{}}}],["instnace",{"_index":1366,"title":{},"body":{"miscellaneous/variables.html":{}}}],["int",{"_index":617,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/Message.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["integer",{"_index":1269,"title":{},"body":{"index.html":{}}}],["interact",{"_index":1260,"title":{},"body":{"index.html":{}}}],["interface",{"_index":268,"title":{"interfaces/ArgonHashPayload.html":{},"interfaces/AuthKey.html":{},"interfaces/CacheDatabaseConfig.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayloadForSign.html":{},"interfaces/JwtPayloadWithRt.html":{},"interfaces/QueueDatabaseConfig.html":{},"interfaces/SendMessageToChatDto.html":{},"interfaces/TripleDesDecryptPayload.html":{},"interfaces/envConfig.html":{}},"body":{"interfaces/ArgonHashPayload.html":{},"interfaces/AuthKey.html":{},"interfaces/CacheDatabaseConfig.html":{},"injectables/EventService.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayloadForSign.html":{},"interfaces/JwtPayloadWithRt.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"interfaces/QueueDatabaseConfig.html":{},"interfaces/SendMessageToChatDto.html":{},"interfaces/TripleDesDecryptPayload.html":{},"injectables/UserService.html":{},"coverage.html":{},"interfaces/envConfig.html":{}}}],["interfaces",{"_index":270,"title":{},"body":{"interfaces/ArgonHashPayload.html":{},"interfaces/AuthKey.html":{},"interfaces/CacheDatabaseConfig.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayloadForSign.html":{},"interfaces/JwtPayloadWithRt.html":{},"interfaces/QueueDatabaseConfig.html":{},"interfaces/SendMessageToChatDto.html":{},"interfaces/TripleDesDecryptPayload.html":{},"interfaces/envConfig.html":{},"overview.html":{}}}],["ioredis",{"_index":1176,"title":{},"body":{"dependencies.html":{}}}],["isemail",{"_index":1018,"title":{},"body":{"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/TokenDto.html":{},"classes/TokenDtoWithUserId.html":{},"classes/UserFromJwtDto.html":{}}}],["isemail()@apiproperty",{"_index":1021,"title":{},"body":{"classes/SignUpDto.html":{}}}],["isendmessagetochatargs",{"_index":682,"title":{"interfaces/ISendMessageToChatArgs.html":{}},"body":{"interfaces/ISendMessageToChatArgs.html":{},"injectables/MessageService.html":{},"coverage.html":{}}}],["isglobal",{"_index":224,"title":{},"body":{"modules/AppModule.html":{},"interfaces/CacheDatabaseConfig.html":{},"miscellaneous/variables.html":{}}}],["isnotempty",{"_index":1019,"title":{},"body":{"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/TokenDto.html":{},"classes/TokenDtoWithUserId.html":{},"classes/UserFromJwtDto.html":{}}}],["ispublic",{"_index":773,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{}}}],["items",{"_index":1319,"title":{},"body":{"miscellaneous/variables.html":{}}}],["iupdateprofileparamsargs",{"_index":717,"title":{"interfaces/IUpdateProfileParamsArgs.html":{}},"body":{"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["join",{"_index":192,"title":{},"body":{"modules/AppModule.html":{}}}],["join(__dirname",{"_index":255,"title":{},"body":{"modules/AppModule.html":{}}}],["join(process.cwd",{"_index":247,"title":{},"body":{"modules/AppModule.html":{}}}],["js",{"_index":377,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["jwt",{"_index":808,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["jwtauthguard",{"_index":35,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"classes/UnAuthorizedResponse.html":{},"coverage.html":{}}}],["jwtauthguardgraphql",{"_index":636,"title":{"injectables/JwtAuthGuardGraphql.html":{}},"body":{"classes/GetMessageInput.html":{},"injectables/JwtAuthGuardGraphql.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":819,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["jwtkeyconfigobject",{"_index":209,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtmodule",{"_index":322,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":328,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":793,"title":{"interfaces/JwtPayload.html":{}},"body":{"interfaces/JwtPayload.html":{},"interfaces/JwtPayloadForSign.html":{},"interfaces/JwtPayloadWithRt.html":{},"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{},"coverage.html":{}}}],["jwtpayloadforsign",{"_index":372,"title":{"interfaces/JwtPayloadForSign.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayloadForSign.html":{},"interfaces/JwtPayloadWithRt.html":{},"coverage.html":{}}}],["jwtpayloadwithrt",{"_index":797,"title":{"interfaces/JwtPayloadWithRt.html":{}},"body":{"interfaces/JwtPayload.html":{},"interfaces/JwtPayloadForSign.html":{},"interfaces/JwtPayloadWithRt.html":{},"injectables/RtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtservice",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":316,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":1277,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["keyof",{"_index":1328,"title":{},"body":{"miscellaneous/variables.html":{}}}],["level",{"_index":884,"title":{},"body":{"injectables/LoggerService.html":{},"index.html":{}}}],["liaoliaots/nestjs",{"_index":214,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["license",{"_index":1287,"title":{"license.html":{}},"body":{"properties.html":{}}}],["limit",{"_index":612,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["literal",{"_index":274,"title":{},"body":{"interfaces/ArgonHashPayload.html":{},"injectables/AuthService.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/UserService.html":{}}}],["load",{"_index":222,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["local",{"_index":1185,"title":{},"body":{"dependencies.html":{}}}],["localhost",{"_index":1219,"title":{},"body":{"index.html":{}}}],["location",{"_index":468,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"injectables/EventService.html":{},"classes/GetEventByIdDto.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{}}}],["log",{"_index":576,"title":{},"body":{"injectables/EventService.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"injectables/LoggerService.html":{},"index.html":{}}}],["log(message",{"_index":889,"title":{},"body":{"injectables/LoggerService.html":{}}}],["logger",{"_index":557,"title":{},"body":{"modules/EventModule.html":{},"injectables/EventService.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["logger.middleware",{"_index":862,"title":{},"body":{"modules/LoggerModule.html":{}}}],["logger.service",{"_index":842,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"modules/LoggerModule.html":{}}}],["logger/logger.middleware",{"_index":212,"title":{},"body":{"modules/AppModule.html":{}}}],["logger/logger.module",{"_index":202,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["logger/logger.service",{"_index":810,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/UserController.html":{}}}],["loggermiddleware",{"_index":211,"title":{"injectables/LoggerMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/LoggerMiddleware.html":{},"modules/LoggerModule.html":{},"coverage.html":{},"overview.html":{}}}],["loggermodule",{"_index":165,"title":{"modules/LoggerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LoggerModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["loggerservice",{"_index":801,"title":{"injectables/LoggerService.html":{}},"body":{"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"controllers/UserController.html":{},"coverage.html":{},"overview.html":{}}}],["loggerservice`,`logger",{"_index":866,"title":{},"body":{"modules/LoggerModule.html":{}}}],["logic",{"_index":766,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"classes/RtGuard.html":{}}}],["login",{"_index":69,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["login(@body",{"_index":106,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["login(req",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout(@getcurrentuser('userid",{"_index":117,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["logout(userid",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logs",{"_index":1365,"title":{},"body":{"miscellaneous/variables.html":{}}}],["main.ts",{"_index":859,"title":{},"body":{"modules/LoggerModule.html":{}}}],["malformed",{"_index":1011,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["manager",{"_index":1166,"title":{},"body":{"dependencies.html":{}}}],["master",{"_index":1229,"title":{},"body":{"index.html":{}}}],["match",{"_index":1248,"title":{},"body":{"index.html":{}}}],["matching",{"_index":133,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"classes/AddAndRemoveParticipantDto.html":{},"classes/AddParticipantDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"interfaces/ArgonHashPayload.html":{},"controllers/AuthController.html":{},"interfaces/AuthKey.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CacheDatabaseConfig.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"classes/GetEventByIdDto.html":{},"classes/GetMessageInput.html":{},"injectables/GoogleOauthGuard.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayloadForSign.html":{},"interfaces/JwtPayloadWithRt.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"classes/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"classes/MessageResolver.html":{},"injectables/MessageService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"interfaces/QueueDatabaseConfig.html":{},"classes/RemoveParticipantDto.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SaveMessageInput.html":{},"interfaces/SendMessageToChatDto.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/TokenDto.html":{},"classes/TokenDtoWithUserId.html":{},"interfaces/TripleDesDecryptPayload.html":{},"classes/UnAuthorizedResponse.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserFromJwtDto.html":{},"modules/UserModule.html":{},"classes/UserRespondDto.html":{},"injectables/UserService.html":{},"classes/UserUpdateProfileDto.html":{},"changelog.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"interfaces/envConfig.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["matter",{"_index":994,"title":{},"body":{"classes/RtGuard.html":{}}}],["max",{"_index":460,"title":{},"body":{"interfaces/CacheDatabaseConfig.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":1318,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message",{"_index":10,"title":{"classes/Message.html":{}},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/GetMessageInput.html":{},"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/LoggerService.html":{},"classes/Message.html":{},"controllers/MessageController.html":{},"classes/MessageResolver.html":{},"injectables/MessageService.html":{},"classes/SaveMessageInput.html":{},"interfaces/SendMessageToChatDto.html":{},"classes/UnAuthorizedResponse.html":{},"injectables/UserService.html":{},"coverage.html":{},"index.html":{}}}],["message(messagewhereuniqueinput",{"_index":966,"title":{},"body":{"injectables/MessageService.html":{}}}],["message.controller",{"_index":944,"title":{},"body":{"modules/MessageModule.html":{}}}],["message.model",{"_index":633,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["message.resolver",{"_index":943,"title":{},"body":{"modules/MessageModule.html":{}}}],["message.service",{"_index":635,"title":{},"body":{"classes/GetMessageInput.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{},"interfaces/SendMessageToChatDto.html":{}}}],["message/message.module",{"_index":197,"title":{},"body":{"modules/AppModule.html":{}}}],["messageadded",{"_index":670,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["messagecontroller",{"_index":918,"title":{"controllers/MessageController.html":{}},"body":{"controllers/MessageController.html":{},"modules/MessageModule.html":{},"interfaces/SendMessageToChatDto.html":{},"coverage.html":{}}}],["messagemodule",{"_index":166,"title":{"modules/MessageModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MessageModule.html":{},"modules.html":{},"overview.html":{}}}],["messageresolver",{"_index":644,"title":{"classes/MessageResolver.html":{}},"body":{"classes/GetMessageInput.html":{},"modules/MessageModule.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{},"coverage.html":{}}}],["messages",{"_index":716,"title":{},"body":{"interfaces/ISendMessageToChatArgs.html":{},"injectables/MessageService.html":{}}}],["messages(params",{"_index":687,"title":{},"body":{"interfaces/ISendMessageToChatArgs.html":{},"injectables/MessageService.html":{}}}],["messageservice",{"_index":634,"title":{"injectables/MessageService.html":{}},"body":{"classes/GetMessageInput.html":{},"interfaces/ISendMessageToChatArgs.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"classes/MessageResolver.html":{},"injectables/MessageService.html":{},"classes/SaveMessageInput.html":{},"interfaces/SendMessageToChatDto.html":{},"coverage.html":{},"overview.html":{}}}],["messagewhereuniqueinput",{"_index":684,"title":{},"body":{"interfaces/ISendMessageToChatArgs.html":{},"injectables/MessageService.html":{}}}],["metadata",{"_index":1188,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":259,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerService.html":{}}}],["methods",{"_index":148,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"controllers/MessageController.html":{},"classes/MessageResolver.html":{},"injectables/MessageService.html":{},"injectables/PrismaService.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["middlewareconsumer",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["migrate",{"_index":1243,"title":{},"body":{"index.html":{}}}],["migration",{"_index":1265,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":1195,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["module",{"_index":156,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/LoggerModule.html":{},"modules/MessageModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/LoggerModule.html":{},"modules/MessageModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":158,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/LoggerModule.html":{},"modules/MessageModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["mongoose",{"_index":1178,"title":{},"body":{"dependencies.html":{}}}],["mongoosemodule",{"_index":194,"title":{},"body":{"modules/AppModule.html":{}}}],["morgan.middleware",{"_index":858,"title":{},"body":{"modules/LoggerModule.html":{}}}],["msgsservice",{"_index":645,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["mutation",{"_index":629,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["mutation((returns",{"_index":658,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["mutation(returns",{"_index":954,"title":{},"body":{"classes/MessageResolver.html":{}}}],["mysql",{"_index":1232,"title":{},"body":{"index.html":{}}}],["n",{"_index":1250,"title":{},"body":{"index.html":{}}}],["name",{"_index":96,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"injectables/EventService.html":{},"classes/GetEventByIdDto.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"controllers/MessageController.html":{},"classes/MessageResolver.html":{},"injectables/MessageService.html":{},"injectables/PrismaService.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/TokenDto.html":{},"classes/TokenDtoWithUserId.html":{},"classes/UnAuthorizedResponse.html":{},"controllers/UserController.html":{},"classes/UserFromJwtDto.html":{},"injectables/UserService.html":{},"classes/UserUpdateProfileDto.html":{},"index.html":{}}}],["need",{"_index":1238,"title":{},"body":{"index.html":{}}}],["nest",{"_index":1180,"title":{},"body":{"dependencies.html":{}}}],["nestjs",{"_index":267,"title":{},"body":{"injectables/AppService.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{}}}],["nestjs/apollo",{"_index":191,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":32,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/EventController.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"classes/GetMessageInput.html":{},"injectables/GoogleOauthGuard.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"classes/MessageResolver.html":{},"injectables/MessageService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SaveMessageInput.html":{},"interfaces/SendMessageToChatDto.html":{},"classes/UnAuthorizedResponse.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":199,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":760,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/graphql",{"_index":188,"title":{},"body":{"modules/AppModule.html":{},"classes/GetMessageInput.html":{},"injectables/JwtAuthGuardGraphql.html":{},"classes/Message.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":323,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":195,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":321,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GoogleOauthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"injectables/JwtStrategy.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1154,"title":{},"body":{"dependencies.html":{}}}],["nestjs/serve",{"_index":219,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":62,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"classes/AddAndRemoveParticipantDto.html":{},"classes/AddParticipantDto.html":{},"controllers/AuthController.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"classes/GetEventByIdDto.html":{},"classes/RemoveParticipantDto.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/TokenDto.html":{},"classes/TokenDtoWithUserId.html":{},"classes/UnAuthorizedResponse.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserFromJwtDto.html":{},"classes/UserRespondDto.html":{},"classes/UserUpdateProfileDto.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":841,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["nestwinstonmoduleutilities.format.nestlike('app",{"_index":1359,"title":{},"body":{"miscellaneous/variables.html":{}}}],["new",{"_index":410,"title":{},"body":{"injectables/AuthService.html":{},"controllers/EventController.html":{},"classes/GetMessageInput.html":{},"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"injectables/LoggerService.html":{},"controllers/MessageController.html":{},"classes/MessageResolver.html":{},"injectables/MessageService.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SaveMessageInput.html":{},"interfaces/SendMessageToChatDto.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newuser",{"_index":389,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser.id",{"_index":400,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser.username",{"_index":401,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":838,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["nextfunction",{"_index":839,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["non",{"_index":70,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["npm",{"_index":1255,"title":{},"body":{"index.html":{}}}],["npx",{"_index":1249,"title":{},"body":{"index.html":{}}}],["null",{"_index":424,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{},"classes/UserDto.html":{},"classes/UserRespondDto.html":{},"injectables/UserService.html":{},"index.html":{}}}],["nullable",{"_index":615,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/Message.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["number",{"_index":20,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"interfaces/ArgonHashPayload.html":{},"controllers/AuthController.html":{},"interfaces/CacheDatabaseConfig.html":{},"classes/GetMessageInput.html":{},"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayloadForSign.html":{},"interfaces/JwtPayloadWithRt.html":{},"classes/Message.html":{},"classes/MessageResolver.html":{},"injectables/MessageService.html":{},"interfaces/QueueDatabaseConfig.html":{},"classes/SaveMessageInput.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/TokenDto.html":{},"classes/TokenDtoWithUserId.html":{},"interfaces/TripleDesDecryptPayload.html":{},"classes/UnAuthorizedResponse.html":{},"classes/UserFromJwtDto.html":{},"injectables/UserService.html":{},"interfaces/envConfig.html":{},"miscellaneous/variables.html":{}}}],["oauth.guard.ts",{"_index":679,"title":{},"body":{"injectables/GoogleOauthGuard.html":{},"coverage.html":{}}}],["object",{"_index":1323,"title":{},"body":{"miscellaneous/variables.html":{}}}],["objecttype",{"_index":624,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/Message.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["offset",{"_index":613,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["onmoduleinit",{"_index":979,"title":{},"body":{"injectables/PrismaService.html":{}}}],["open",{"_index":1252,"title":{},"body":{"index.html":{}}}],["operation",{"_index":1246,"title":{},"body":{"index.html":{}}}],["optional",{"_index":180,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"classes/GetMessageInput.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"classes/Message.html":{},"controllers/MessageController.html":{},"classes/MessageResolver.html":{},"injectables/MessageService.html":{},"injectables/PrismaService.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/UserUpdateProfileDto.html":{}}}],["options",{"_index":273,"title":{},"body":{"interfaces/ArgonHashPayload.html":{},"interfaces/TripleDesDecryptPayload.html":{},"miscellaneous/variables.html":{}}}],["orderby",{"_index":655,"title":{},"body":{"classes/GetMessageInput.html":{},"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"classes/MessageResolver.html":{},"injectables/MessageService.html":{},"classes/SaveMessageInput.html":{},"injectables/UserService.html":{}}}],["orm",{"_index":1257,"title":{},"body":{"index.html":{}}}],["out",{"_index":171,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/LoggerModule.html":{},"modules/MessageModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":1291,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p2002",{"_index":737,"title":{},"body":{"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/UserService.html":{}}}],["p2023",{"_index":708,"title":{},"body":{"interfaces/ISendMessageToChatArgs.html":{},"injectables/MessageService.html":{}}}],["p2025",{"_index":710,"title":{},"body":{"interfaces/ISendMessageToChatArgs.html":{},"injectables/MessageService.html":{}}}],["package",{"_index":1147,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":520,"title":{},"body":{"controllers/EventController.html":{},"injectables/LoggerService.html":{},"classes/RtGuard.html":{},"controllers/UserController.html":{}}}],["param('username",{"_index":1058,"title":{},"body":{"controllers/UserController.html":{}}}],["parameters",{"_index":179,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"controllers/MessageController.html":{},"classes/MessageResolver.html":{},"injectables/MessageService.html":{},"injectables/PrismaService.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["params",{"_index":691,"title":{},"body":{"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/MessageService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["parent",{"_index":628,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["parseint(process.env.cache_database_config_max",{"_index":1316,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(process.env.cache_database_config_port",{"_index":1321,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(process.env.cache_database_config_ttl",{"_index":1314,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(process.env.port",{"_index":1325,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(process.env.queue_database_config_port",{"_index":1343,"title":{},"body":{"miscellaneous/variables.html":{}}}],["participants",{"_index":489,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"classes/EventDto.html":{},"injectables/EventService.html":{},"classes/GetEventByIdDto.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{}}}],["participantsid",{"_index":485,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"classes/EventDto.html":{},"classes/GetEventByIdDto.html":{}}}],["passing",{"_index":78,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["passport",{"_index":807,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":320,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":809,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":811,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["passreqtocallback",{"_index":1002,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["password",{"_index":98,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/TokenDto.html":{},"classes/TokenDtoWithUserId.html":{},"classes/UnAuthorizedResponse.html":{},"classes/UserFromJwtDto.html":{},"miscellaneous/variables.html":{}}}],["passwordmatches",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{}}}],["path",{"_index":193,"title":{},"body":{"modules/AppModule.html":{}}}],["paticipan",{"_index":591,"title":{},"body":{"injectables/EventService.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{}}}],["payload",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["payload.sub",{"_index":436,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.type",{"_index":451,"title":{},"body":{"injectables/AuthService.html":{}}}],["payload.userid",{"_index":829,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.username",{"_index":422,"title":{},"body":{"injectables/AuthService.html":{}}}],["persistedqueries",{"_index":250,"title":{},"body":{"modules/AppModule.html":{}}}],["playground",{"_index":245,"title":{},"body":{"modules/AppModule.html":{}}}],["port",{"_index":231,"title":{},"body":{"modules/AppModule.html":{},"interfaces/CacheDatabaseConfig.html":{},"interfaces/QueueDatabaseConfig.html":{},"interfaces/envConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["post",{"_index":24,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"controllers/EventController.html":{},"controllers/MessageController.html":{},"interfaces/SendMessageToChatDto.html":{},"classes/UnAuthorizedResponse.html":{},"controllers/UserController.html":{}}}],["post('/addparticipant",{"_index":536,"title":{},"body":{"controllers/EventController.html":{}}}],["post('/addparticipant')@apiokresponse({description",{"_index":503,"title":{},"body":{"controllers/EventController.html":{}}}],["post('/createevent",{"_index":528,"title":{},"body":{"controllers/EventController.html":{}}}],["post('/createevent')@apiokresponse({description",{"_index":509,"title":{},"body":{"controllers/EventController.html":{}}}],["post('/logout",{"_index":114,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["post('/refresh",{"_index":120,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["post('/removeparticipant",{"_index":539,"title":{},"body":{"controllers/EventController.html":{}}}],["post('/removeparticipant')@apiokresponse({description",{"_index":518,"title":{},"body":{"controllers/EventController.html":{}}}],["post('/sendmessagetochat",{"_index":930,"title":{},"body":{"controllers/MessageController.html":{},"interfaces/SendMessageToChatDto.html":{}}}],["post('/sendmessagetochat')@httpcode(200",{"_index":927,"title":{},"body":{"controllers/MessageController.html":{}}}],["post('/signin",{"_index":104,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["post('/signin')@httpcode(200)@apiokresponse({description",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signup",{"_index":88,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["post('update/profile",{"_index":1059,"title":{},"body":{"controllers/UserController.html":{}}}],["post('update/profile')@apiokresponse({description",{"_index":1046,"title":{},"body":{"controllers/UserController.html":{}}}],["posts(@parent",{"_index":671,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["preconfig",{"_index":1237,"title":{},"body":{"index.html":{}}}],["predata",{"_index":663,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["prefix",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EventController.html":{},"controllers/MessageController.html":{},"controllers/UserController.html":{}}}],["prettyprint",{"_index":1360,"title":{},"body":{"miscellaneous/variables.html":{}}}],["primary",{"_index":1276,"title":{},"body":{"index.html":{}}}],["prisma",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EventService.html":{},"classes/GetMessageInput.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerService.html":{},"classes/MessageResolver.html":{},"injectables/MessageService.html":{},"classes/SaveMessageInput.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["prisma.logcreateinput",{"_index":875,"title":{},"body":{"injectables/LoggerService.html":{}}}],["prisma.messagecreateinput",{"_index":664,"title":{},"body":{"classes/GetMessageInput.html":{},"interfaces/ISendMessageToChatArgs.html":{},"classes/MessageResolver.html":{},"injectables/MessageService.html":{},"classes/SaveMessageInput.html":{}}}],["prisma.messageorderbywithrelationinput",{"_index":690,"title":{},"body":{"interfaces/ISendMessageToChatArgs.html":{},"injectables/MessageService.html":{}}}],["prisma.messageupdateinput",{"_index":696,"title":{},"body":{"interfaces/ISendMessageToChatArgs.html":{},"injectables/MessageService.html":{}}}],["prisma.messagewhereinput",{"_index":689,"title":{},"body":{"interfaces/ISendMessageToChatArgs.html":{},"injectables/MessageService.html":{}}}],["prisma.messagewhereuniqueinput",{"_index":685,"title":{},"body":{"interfaces/ISendMessageToChatArgs.html":{},"injectables/MessageService.html":{}}}],["prisma.prismaclientknownrequesterror",{"_index":705,"title":{},"body":{"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/MessageService.html":{},"injectables/UserService.html":{}}}],["prisma.service",{"_index":975,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma.usercreateinput",{"_index":735,"title":{},"body":{"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/UserService.html":{}}}],["prisma.userinclude",{"_index":728,"title":{},"body":{"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/UserService.html":{}}}],["prisma.userorderbywithrelationinput",{"_index":732,"title":{},"body":{"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/UserService.html":{}}}],["prisma.userupdateinput",{"_index":741,"title":{},"body":{"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/UserService.html":{}}}],["prisma.userwhereinput",{"_index":731,"title":{},"body":{"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/UserService.html":{}}}],["prisma.userwhereuniqueinput",{"_index":726,"title":{},"body":{"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/UserService.html":{}}}],["prisma/client",{"_index":476,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"injectables/EventService.html":{},"classes/GetEventByIdDto.html":{},"classes/GetMessageInput.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/LoggerService.html":{},"classes/MessageResolver.html":{},"injectables/MessageService.html":{},"injectables/PrismaService.html":{},"classes/SaveMessageInput.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["prisma/prisma",{"_index":380,"title":{},"body":{"injectables/AuthService.html":{}}}],["prisma/prisma.module",{"_index":196,"title":{},"body":{"modules/AppModule.html":{},"modules/EventModule.html":{},"modules/LoggerModule.html":{}}}],["prisma/prisma.service",{"_index":378,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EventService.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerService.html":{},"injectables/MessageService.html":{},"injectables/UserService.html":{}}}],["prismaclient",{"_index":977,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismamodule",{"_index":167,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EventModule.html":{},"modules/LoggerModule.html":{},"modules/PrismaModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":345,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/EventService.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerService.html":{},"injectables/MessageService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EventService.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerService.html":{},"controllers/UserController.html":{}}}],["privatekey",{"_index":441,"title":{},"body":{"injectables/AuthService.html":{}}}],["process",{"_index":455,"title":{},"body":{"injectables/AuthService.html":{}}}],["process.env.cache_database_config_host",{"_index":1320,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.cache_database_config_password",{"_index":1322,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.global_prefix",{"_index":1326,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.mongo_uri_nas",{"_index":1362,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":243,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.queue_database_config_host",{"_index":1342,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.queue_database_config_password",{"_index":1344,"title":{},"body":{"miscellaneous/variables.html":{}}}],["profile",{"_index":394,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/UserService.html":{}}}],["profile.dto",{"_index":1053,"title":{},"body":{"controllers/UserController.html":{}}}],["profile.dto.ts",{"_index":1097,"title":{},"body":{"classes/UserUpdateProfileDto.html":{},"coverage.html":{}}}],["profile.dto.ts:11",{"_index":1098,"title":{},"body":{"classes/UserUpdateProfileDto.html":{}}}],["profile.dto.ts:5",{"_index":1101,"title":{},"body":{"classes/UserUpdateProfileDto.html":{}}}],["profile.dto.ts:7",{"_index":1099,"title":{},"body":{"classes/UserUpdateProfileDto.html":{}}}],["profile.dto.ts:9",{"_index":1100,"title":{},"body":{"classes/UserUpdateProfileDto.html":{}}}],["project",{"_index":854,"title":{},"body":{"modules/LoggerModule.html":{}}}],["promise",{"_index":93,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerService.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/PrismaService.html":{},"interfaces/SendMessageToChatDto.html":{},"classes/UnAuthorizedResponse.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"classes/AcessDeniedResponse.html":{},"classes/AddAndRemoveParticipantDto.html":{},"classes/AddParticipantDto.html":{},"interfaces/ArgonHashPayload.html":{},"interfaces/AuthKey.html":{},"injectables/AuthService.html":{},"interfaces/CacheDatabaseConfig.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"classes/EventDto.html":{},"classes/GetEventByIdDto.html":{},"classes/GetMessageInput.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayloadForSign.html":{},"interfaces/JwtPayloadWithRt.html":{},"classes/Message.html":{},"interfaces/QueueDatabaseConfig.html":{},"classes/RemoveParticipantDto.html":{},"classes/SaveMessageInput.html":{},"interfaces/SendMessageToChatDto.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/TokenDto.html":{},"classes/TokenDtoWithUserId.html":{},"interfaces/TripleDesDecryptPayload.html":{},"classes/UnAuthorizedResponse.html":{},"classes/UserDto.html":{},"classes/UserFromJwtDto.html":{},"classes/UserRespondDto.html":{},"classes/UserUpdateProfileDto.html":{},"interfaces/envConfig.html":{},"properties.html":{}}}],["provider",{"_index":852,"title":{},"body":{"modules/LoggerModule.html":{}}}],["providers",{"_index":173,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/LoggerModule.html":{},"modules/MessageModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{}}}],["pubsub",{"_index":632,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["pubsub.asynciterator('messageadded",{"_index":676,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["pubsub.publish('messageadded",{"_index":669,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["pull",{"_index":1210,"title":{},"body":{"index.html":{}}}],["query",{"_index":626,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["query((returns",{"_index":647,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["query(returns",{"_index":949,"title":{},"body":{"classes/MessageResolver.html":{}}}],["queuedatabase",{"_index":1341,"title":{},"body":{"miscellaneous/variables.html":{}}}],["queuedatabaseconfig",{"_index":988,"title":{"interfaces/QueueDatabaseConfig.html":{}},"body":{"interfaces/QueueDatabaseConfig.html":{},"coverage.html":{}}}],["queuedatabaseconfigobject",{"_index":203,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["readonly",{"_index":154,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/EventService.html":{},"classes/GetMessageInput.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"classes/MessageResolver.html":{},"injectables/RtStrategy.html":{},"classes/SaveMessageInput.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["recommended",{"_index":855,"title":{},"body":{"modules/LoggerModule.html":{}}}],["records",{"_index":504,"title":{},"body":{"controllers/EventController.html":{}}}],["redis",{"_index":215,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{},"index.html":{}}}],["redismodule",{"_index":213,"title":{},"body":{"modules/AppModule.html":{}}}],["redismodule.forrootasync",{"_index":226,"title":{},"body":{"modules/AppModule.html":{}}}],["redisservice",{"_index":800,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["reflect",{"_index":1187,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":750,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{}}}],["refresh",{"_index":123,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/UnAuthorizedResponse.html":{}}}],["refresh(userid",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh_token",{"_index":101,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/TokenDto.html":{},"classes/TokenDtoWithUserId.html":{},"classes/UnAuthorizedResponse.html":{},"classes/UserFromJwtDto.html":{}}}],["refreshtoken",{"_index":126,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"interfaces/ArgonHashPayload.html":{},"controllers/AuthController.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayloadForSign.html":{},"interfaces/JwtPayloadWithRt.html":{},"injectables/RtStrategy.html":{},"interfaces/TripleDesDecryptPayload.html":{},"classes/UnAuthorizedResponse.html":{},"miscellaneous/enumerations.html":{}}}],["refreshtokens",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokens(userid",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{}}}],["register",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(@body",{"_index":92,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["register(req",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{}}}],["registeras",{"_index":1312,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras('envconfig",{"_index":1324,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras('jwtkey",{"_index":1335,"title":{},"body":{"miscellaneous/variables.html":{}}}],["removeparticipant",{"_index":501,"title":{},"body":{"controllers/EventController.html":{}}}],["removeparticipant(args",{"_index":517,"title":{},"body":{"controllers/EventController.html":{}}}],["removeparticipantdto",{"_index":141,"title":{"classes/RemoveParticipantDto.html":{}},"body":{"classes/AddAndRemoveParticipantDto.html":{},"classes/AddParticipantDto.html":{},"controllers/EventController.html":{},"classes/RemoveParticipantDto.html":{},"coverage.html":{}}}],["removepaticipanttoevent",{"_index":563,"title":{},"body":{"injectables/EventService.html":{}}}],["removepaticipanttoevent(data",{"_index":574,"title":{},"body":{"injectables/EventService.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{}}}],["replace('bearer",{"_index":1004,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["repository",{"_index":1300,"title":{},"body":{"properties.html":{}}}],["req",{"_index":26,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"controllers/EventController.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MessageController.html":{},"injectables/RtStrategy.html":{},"interfaces/SendMessageToChatDto.html":{},"classes/UnAuthorizedResponse.html":{},"controllers/UserController.html":{}}}],["req.signedcookies",{"_index":815,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["req.signedcookies['jwt",{"_index":816,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["req.user",{"_index":131,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["req.username",{"_index":112,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["request",{"_index":48,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ISendMessageToChatArgs.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/MessageService.html":{},"injectables/RtStrategy.html":{},"classes/UnAuthorizedResponse.html":{},"miscellaneous/variables.html":{}}}],["request.headers['user",{"_index":905,"title":{},"body":{"injectables/LoggerService.html":{}}}],["request.ip",{"_index":907,"title":{},"body":{"injectables/LoggerService.html":{}}}],["request.method",{"_index":903,"title":{},"body":{"injectables/LoggerService.html":{}}}],["request.protocol}/${request.httpversion",{"_index":908,"title":{},"body":{"injectables/LoggerService.html":{}}}],["request.signedcookies",{"_index":1334,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.signedcookies?.[data",{"_index":1333,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.url",{"_index":904,"title":{},"body":{"injectables/LoggerService.html":{}}}],["request.user",{"_index":1330,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user[data",{"_index":1331,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestmethod",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod.all",{"_index":260,"title":{},"body":{"modules/AppModule.html":{}}}],["res",{"_index":30,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"controllers/EventController.html":{},"interfaces/ISendMessageToChatArgs.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"interfaces/SendMessageToChatDto.html":{},"classes/UnAuthorizedResponse.html":{},"controllers/UserController.html":{}}}],["reset",{"_index":170,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/LoggerModule.html":{},"modules/MessageModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{},"index.html":{},"overview.html":{}}}],["resolvefield",{"_index":627,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["resolver",{"_index":625,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["resolver((of",{"_index":643,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["response",{"_index":49,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"injectables/LoggerMiddleware.html":{},"classes/UnAuthorizedResponse.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["response.clearcookie(key",{"_index":1347,"title":{},"body":{"miscellaneous/variables.html":{}}}],["response.cookie(usecookiecontext",{"_index":1348,"title":{},"body":{"miscellaneous/variables.html":{}}}],["results",{"_index":132,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"classes/AddAndRemoveParticipantDto.html":{},"classes/AddParticipantDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"interfaces/ArgonHashPayload.html":{},"controllers/AuthController.html":{},"interfaces/AuthKey.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CacheDatabaseConfig.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"classes/GetEventByIdDto.html":{},"classes/GetMessageInput.html":{},"injectables/GoogleOauthGuard.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayloadForSign.html":{},"interfaces/JwtPayloadWithRt.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"classes/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"classes/MessageResolver.html":{},"injectables/MessageService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"interfaces/QueueDatabaseConfig.html":{},"classes/RemoveParticipantDto.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SaveMessageInput.html":{},"interfaces/SendMessageToChatDto.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/TokenDto.html":{},"classes/TokenDtoWithUserId.html":{},"interfaces/TripleDesDecryptPayload.html":{},"classes/UnAuthorizedResponse.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserFromJwtDto.html":{},"modules/UserModule.html":{},"classes/UserRespondDto.html":{},"injectables/UserService.html":{},"classes/UserUpdateProfileDto.html":{},"changelog.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"interfaces/envConfig.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":90,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"classes/GetMessageInput.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerService.html":{},"controllers/MessageController.html":{},"classes/MessageResolver.html":{},"injectables/MessageService.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SaveMessageInput.html":{},"interfaces/SendMessageToChatDto.html":{},"classes/UnAuthorizedResponse.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":151,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"controllers/MessageController.html":{},"classes/MessageResolver.html":{},"injectables/MessageService.html":{},"injectables/PrismaService.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["reuse",{"_index":850,"title":{},"body":{"modules/LoggerModule.html":{}}}],["rimraf",{"_index":1190,"title":{},"body":{"dependencies.html":{}}}],["rootpath",{"_index":254,"title":{},"body":{"modules/AppModule.html":{}}}],["rs256",{"_index":440,"title":{},"body":{"injectables/AuthService.html":{}}}],["rt",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{}}}],["rt_privatekey",{"_index":310,"title":{},"body":{"interfaces/AuthKey.html":{},"miscellaneous/variables.html":{}}}],["rt_publickey",{"_index":311,"title":{},"body":{"interfaces/AuthKey.html":{},"miscellaneous/variables.html":{}}}],["rtguard",{"_index":38,"title":{"classes/RtGuard.html":{}},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/RtGuard.html":{},"classes/UnAuthorizedResponse.html":{},"coverage.html":{}}}],["rtmatches",{"_index":446,"title":{},"body":{"injectables/AuthService.html":{}}}],["rtprivatekey",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{}}}],["rtstrategy",{"_index":317,"title":{"injectables/RtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/RtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["run",{"_index":1214,"title":{},"body":{"index.html":{}}}],["running",{"_index":1007,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["rxjs",{"_index":1192,"title":{},"body":{"dependencies.html":{}}}],["savemessage",{"_index":659,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["savemessage(savemessagedata",{"_index":953,"title":{},"body":{"classes/MessageResolver.html":{}}}],["savemessagedata",{"_index":661,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["savemessagedata.eventchatid",{"_index":667,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["savemessagedata.message",{"_index":666,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["savemessagedata.sendername",{"_index":665,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["savemessageinput",{"_index":640,"title":{"classes/SaveMessageInput.html":{}},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{},"coverage.html":{}}}],["schema",{"_index":1244,"title":{},"body":{"index.html":{}}}],["seconds",{"_index":1315,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secret",{"_index":450,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretorkey",{"_index":822,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["sender_id",{"_index":641,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/Message.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{},"index.html":{}}}],["sendername",{"_index":642,"title":{},"body":{"classes/GetMessageInput.html":{},"interfaces/ISendMessageToChatArgs.html":{},"classes/Message.html":{},"controllers/MessageController.html":{},"classes/MessageResolver.html":{},"injectables/MessageService.html":{},"classes/SaveMessageInput.html":{},"interfaces/SendMessageToChatDto.html":{},"index.html":{}}}],["sendmessage",{"_index":921,"title":{},"body":{"controllers/MessageController.html":{}}}],["sendmessage(@body",{"_index":931,"title":{},"body":{"controllers/MessageController.html":{},"interfaces/SendMessageToChatDto.html":{}}}],["sendmessage(args",{"_index":925,"title":{},"body":{"controllers/MessageController.html":{}}}],["sendmessagetochatdto",{"_index":926,"title":{"interfaces/SendMessageToChatDto.html":{}},"body":{"controllers/MessageController.html":{},"interfaces/SendMessageToChatDto.html":{},"coverage.html":{}}}],["sentmessagetoeventchatbyeventchatid",{"_index":959,"title":{},"body":{"injectables/MessageService.html":{}}}],["sentmessagetoeventchatbyeventchatid(params",{"_index":700,"title":{},"body":{"interfaces/ISendMessageToChatArgs.html":{},"injectables/MessageService.html":{}}}],["server",{"_index":1163,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["serveroot",{"_index":257,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule",{"_index":218,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":253,"title":{},"body":{"modules/AppModule.html":{}}}],["service",{"_index":851,"title":{},"body":{"modules/LoggerModule.html":{},"injectables/LoggerService.html":{}}}],["session",{"_index":772,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"classes/RtGuard.html":{}}}],["set",{"_index":66,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{},"index.html":{}}}],["signed",{"_index":1349,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signinlocal",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{}}}],["signinlocal(dto",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{}}}],["signinoauth(useroauth",{"_index":419,"title":{},"body":{"injectables/AuthService.html":{}}}],["signinrequestdto",{"_index":41,"title":{"classes/SignInRequestDto.html":{}},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/TokenDto.html":{},"classes/TokenDtoWithUserId.html":{},"classes/UnAuthorizedResponse.html":{},"classes/UserFromJwtDto.html":{},"coverage.html":{}}}],["signupdto",{"_index":40,"title":{"classes/SignUpDto.html":{}},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/TokenDto.html":{},"classes/TokenDtoWithUserId.html":{},"classes/UnAuthorizedResponse.html":{},"classes/UserFromJwtDto.html":{},"coverage.html":{}}}],["signuplocal",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{}}}],["signuplocal(authdto",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{}}}],["skip",{"_index":650,"title":{},"body":{"classes/GetMessageInput.html":{},"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"classes/MessageResolver.html":{},"injectables/MessageService.html":{},"classes/SaveMessageInput.html":{},"injectables/UserService.html":{}}}],["slave",{"_index":1234,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"classes/AddAndRemoveParticipantDto.html":{},"classes/AddParticipantDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"interfaces/ArgonHashPayload.html":{},"controllers/AuthController.html":{},"interfaces/AuthKey.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CacheDatabaseConfig.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"classes/GetEventByIdDto.html":{},"classes/GetMessageInput.html":{},"injectables/GoogleOauthGuard.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayloadForSign.html":{},"interfaces/JwtPayloadWithRt.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"classes/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"classes/MessageResolver.html":{},"injectables/MessageService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"interfaces/QueueDatabaseConfig.html":{},"classes/RemoveParticipantDto.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SaveMessageInput.html":{},"interfaces/SendMessageToChatDto.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/TokenDto.html":{},"classes/TokenDtoWithUserId.html":{},"interfaces/TripleDesDecryptPayload.html":{},"classes/UnAuthorizedResponse.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserFromJwtDto.html":{},"modules/UserModule.html":{},"classes/UserRespondDto.html":{},"injectables/UserService.html":{},"classes/UserUpdateProfileDto.html":{},"interfaces/envConfig.html":{}}}],["src/.../app.module.ts",{"_index":1304,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.processor.types.ts",{"_index":1197,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../cachedatabase.config.ts",{"_index":1303,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../env.config.ts",{"_index":1305,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../getcurrentuser.decorator.ts",{"_index":1306,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../getcurrentusercookie.decorator.ts",{"_index":1307,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../key.config.ts",{"_index":1308,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1207,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../message.resolver.ts",{"_index":1309,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../queuedatabase.config.ts",{"_index":1310,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../usecookie.decorator.ts",{"_index":1198,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../winston.ts",{"_index":1311,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":147,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":150,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":172,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.module.ts:85",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":263,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":264,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":6,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:105",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:124",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:144",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:39",{"_index":19,"title":{},"body":{"classes/AcessDeniedResponse.html":{}}}],["src/auth/auth.controller.ts:41",{"_index":21,"title":{},"body":{"classes/AcessDeniedResponse.html":{}}}],["src/auth/auth.controller.ts:43",{"_index":18,"title":{},"body":{"classes/AcessDeniedResponse.html":{}}}],["src/auth/auth.controller.ts:48",{"_index":1032,"title":{},"body":{"classes/UnAuthorizedResponse.html":{}}}],["src/auth/auth.controller.ts:50",{"_index":1033,"title":{},"body":{"classes/UnAuthorizedResponse.html":{}}}],["src/auth/auth.controller.ts:67",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:83",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.dto.ts",{"_index":1015,"title":{},"body":{"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/TokenDto.html":{},"classes/TokenDtoWithUserId.html":{},"classes/UserFromJwtDto.html":{},"coverage.html":{}}}],["src/auth/auth.dto.ts:11",{"_index":1022,"title":{},"body":{"classes/SignUpDto.html":{}}}],["src/auth/auth.dto.ts:14",{"_index":1024,"title":{},"body":{"classes/SignUpDto.html":{}}}],["src/auth/auth.dto.ts:18",{"_index":1017,"title":{},"body":{"classes/SignInRequestDto.html":{}}}],["src/auth/auth.dto.ts:20",{"_index":1016,"title":{},"body":{"classes/SignInRequestDto.html":{}}}],["src/auth/auth.dto.ts:24",{"_index":1027,"title":{},"body":{"classes/TokenDto.html":{}}}],["src/auth/auth.dto.ts:26",{"_index":1028,"title":{},"body":{"classes/TokenDto.html":{}}}],["src/auth/auth.dto.ts:31",{"_index":1029,"title":{},"body":{"classes/TokenDtoWithUserId.html":{}}}],["src/auth/auth.dto.ts:36",{"_index":1071,"title":{},"body":{"classes/UserFromJwtDto.html":{}}}],["src/auth/auth.dto.ts:38",{"_index":1072,"title":{},"body":{"classes/UserFromJwtDto.html":{}}}],["src/auth/auth.dto.ts:40",{"_index":1070,"title":{},"body":{"classes/UserFromJwtDto.html":{}}}],["src/auth/auth.dto.ts:42",{"_index":1069,"title":{},"body":{"classes/UserFromJwtDto.html":{}}}],["src/auth/auth.dto.ts:6",{"_index":1026,"title":{},"body":{"classes/SignUpDto.html":{}}}],["src/auth/auth.dto.ts:8",{"_index":1025,"title":{},"body":{"classes/SignUpDto.html":{}}}],["src/auth/auth.module.ts",{"_index":318,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.processor.types.ts",{"_index":271,"title":{},"body":{"interfaces/ArgonHashPayload.html":{},"interfaces/TripleDesDecryptPayload.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/auth/auth.service.ts",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:110",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:128",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:164",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:193",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:201",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:207",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:21",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:22",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:33",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:59",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/getcurrentuser.decorator.ts",{"_index":1120,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/getcurrentusercookie.decorator.ts",{"_index":1121,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/usecookie.decorator.ts",{"_index":1119,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/auth/guard/google",{"_index":678,"title":{},"body":{"injectables/GoogleOauthGuard.html":{},"coverage.html":{}}}],["src/auth/guard/jwt",{"_index":745,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"coverage.html":{}}}],["src/auth/guard/rt.guard.ts",{"_index":990,"title":{},"body":{"classes/RtGuard.html":{},"coverage.html":{}}}],["src/auth/guard/rt.guard.ts:22",{"_index":992,"title":{},"body":{"classes/RtGuard.html":{}}}],["src/auth/guard/rt.guard.ts:9",{"_index":991,"title":{},"body":{"classes/RtGuard.html":{}}}],["src/auth/strategy/jwt.at.strategy.ts",{"_index":798,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategy/jwt.at.strategy.ts:14",{"_index":802,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategy/jwt.at.strategy.ts:39",{"_index":804,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategy/jwt.rt.strategy.ts",{"_index":996,"title":{},"body":{"injectables/RtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategy/jwt.rt.strategy.ts:27",{"_index":1000,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["src/auth/strategy/jwt.rt.strategy.ts:9",{"_index":998,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["src/config/cachedatabase.config.ts",{"_index":1124,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/env.config.ts",{"_index":1125,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/key.config.ts",{"_index":1126,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/queuedatabase.config.ts",{"_index":1127,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/event/dto/create",{"_index":463,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"classes/EventDto.html":{},"classes/GetEventByIdDto.html":{},"coverage.html":{}}}],["src/event/dto/participant.dto.ts",{"_index":135,"title":{},"body":{"classes/AddAndRemoveParticipantDto.html":{},"classes/AddParticipantDto.html":{},"classes/RemoveParticipantDto.html":{},"coverage.html":{}}}],["src/event/dto/participant.dto.ts:5",{"_index":137,"title":{},"body":{"classes/AddAndRemoveParticipantDto.html":{}}}],["src/event/dto/participant.dto.ts:7",{"_index":138,"title":{},"body":{"classes/AddAndRemoveParticipantDto.html":{}}}],["src/event/event.controller.ts",{"_index":497,"title":{},"body":{"controllers/EventController.html":{},"coverage.html":{}}}],["src/event/event.controller.ts:36",{"_index":511,"title":{},"body":{"controllers/EventController.html":{}}}],["src/event/event.controller.ts:56",{"_index":506,"title":{},"body":{"controllers/EventController.html":{}}}],["src/event/event.controller.ts:66",{"_index":519,"title":{},"body":{"controllers/EventController.html":{}}}],["src/event/event.controller.ts:77",{"_index":516,"title":{},"body":{"controllers/EventController.html":{}}}],["src/event/event.module.ts",{"_index":556,"title":{},"body":{"modules/EventModule.html":{}}}],["src/event/event.service.ts",{"_index":560,"title":{},"body":{"injectables/EventService.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"coverage.html":{}}}],["src/event/event.service.ts:16",{"_index":565,"title":{},"body":{"injectables/EventService.html":{}}}],["src/event/event.service.ts:22",{"_index":571,"title":{},"body":{"injectables/EventService.html":{}}}],["src/event/event.service.ts:57",{"_index":568,"title":{},"body":{"injectables/EventService.html":{}}}],["src/event/event.service.ts:76",{"_index":575,"title":{},"body":{"injectables/EventService.html":{}}}],["src/event/event.service.ts:95",{"_index":573,"title":{},"body":{"injectables/EventService.html":{}}}],["src/logger/logger.middleware.ts",{"_index":835,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["src/logger/logger.middleware.ts:5",{"_index":836,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["src/logger/logger.middleware.ts:7",{"_index":840,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["src/logger/logger.module.ts",{"_index":849,"title":{},"body":{"modules/LoggerModule.html":{}}}],["src/logger/logger.service.ts",{"_index":867,"title":{},"body":{"injectables/LoggerService.html":{},"coverage.html":{}}}],["src/logger/logger.service.ts:12",{"_index":873,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/logger/logger.service.ts:23",{"_index":890,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/logger/logger.service.ts:40",{"_index":882,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/logger/logger.service.ts:55",{"_index":894,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/logger/logger.service.ts:66",{"_index":878,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/logger/logger.service.ts:76",{"_index":892,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/logger/logger.service.ts:86",{"_index":888,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/logger/logger.service.ts:93",{"_index":876,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/logger/winston.ts",{"_index":1133,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":1137,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/message/message.controller.ts",{"_index":919,"title":{},"body":{"controllers/MessageController.html":{},"interfaces/SendMessageToChatDto.html":{},"coverage.html":{}}}],["src/message/message.controller.ts:26",{"_index":928,"title":{},"body":{"controllers/MessageController.html":{}}}],["src/message/message.controller.ts:38",{"_index":924,"title":{},"body":{"controllers/MessageController.html":{}}}],["src/message/message.model.ts",{"_index":911,"title":{},"body":{"classes/Message.html":{},"coverage.html":{}}}],["src/message/message.model.ts:12",{"_index":917,"title":{},"body":{"classes/Message.html":{}}}],["src/message/message.model.ts:15",{"_index":915,"title":{},"body":{"classes/Message.html":{}}}],["src/message/message.model.ts:18",{"_index":914,"title":{},"body":{"classes/Message.html":{}}}],["src/message/message.model.ts:6",{"_index":913,"title":{},"body":{"classes/Message.html":{}}}],["src/message/message.model.ts:9",{"_index":916,"title":{},"body":{"classes/Message.html":{}}}],["src/message/message.module.ts",{"_index":942,"title":{},"body":{"modules/MessageModule.html":{}}}],["src/message/message.resolver.ts",{"_index":610,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/message/message.resolver.ts:24",{"_index":622,"title":{},"body":{"classes/GetMessageInput.html":{}}}],["src/message/message.resolver.ts:26",{"_index":620,"title":{},"body":{"classes/GetMessageInput.html":{}}}],["src/message/message.resolver.ts:28",{"_index":616,"title":{},"body":{"classes/GetMessageInput.html":{}}}],["src/message/message.resolver.ts:35",{"_index":1014,"title":{},"body":{"classes/SaveMessageInput.html":{}}}],["src/message/message.resolver.ts:37",{"_index":1013,"title":{},"body":{"classes/SaveMessageInput.html":{}}}],["src/message/message.resolver.ts:39",{"_index":1012,"title":{},"body":{"classes/SaveMessageInput.html":{}}}],["src/message/message.resolver.ts:44",{"_index":947,"title":{},"body":{"classes/MessageResolver.html":{}}}],["src/message/message.resolver.ts:49",{"_index":950,"title":{},"body":{"classes/MessageResolver.html":{}}}],["src/message/message.resolver.ts:67",{"_index":955,"title":{},"body":{"classes/MessageResolver.html":{}}}],["src/message/message.resolver.ts:92",{"_index":952,"title":{},"body":{"classes/MessageResolver.html":{}}}],["src/message/message.service.ts",{"_index":683,"title":{},"body":{"interfaces/ISendMessageToChatArgs.html":{},"injectables/MessageService.html":{},"coverage.html":{}}}],["src/message/message.service.ts:11",{"_index":962,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/message/message.service.ts:14",{"_index":967,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/message/message.service.ts:22",{"_index":968,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/message/message.service.ts:39",{"_index":963,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/message/message.service.ts:45",{"_index":970,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/message/message.service.ts:56",{"_index":964,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/message/message.service.ts:61",{"_index":969,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/message/message.service.ts:93",{"_index":965,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/prisma/prisma.module.ts",{"_index":974,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/prisma/prisma.service.ts",{"_index":976,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma/prisma.service.ts:10",{"_index":982,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:6",{"_index":984,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/schema.gql",{"_index":248,"title":{},"body":{"modules/AppModule.html":{}}}],["src/types/interface/authkey.interface.ts",{"_index":307,"title":{},"body":{"interfaces/AuthKey.html":{},"coverage.html":{}}}],["src/types/interface/cachedatabaseconfig.interface.ts",{"_index":459,"title":{},"body":{"interfaces/CacheDatabaseConfig.html":{},"coverage.html":{}}}],["src/types/interface/envconfig.interface.ts",{"_index":1141,"title":{},"body":{"coverage.html":{},"interfaces/envConfig.html":{}}}],["src/types/interface/jwtpayload.interface.ts",{"_index":794,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/JwtPayloadForSign.html":{},"interfaces/JwtPayloadWithRt.html":{},"coverage.html":{}}}],["src/types/interface/queuedatabaseconfig.interface.ts",{"_index":989,"title":{},"body":{"interfaces/QueueDatabaseConfig.html":{},"coverage.html":{}}}],["src/user/dto/user",{"_index":1096,"title":{},"body":{"classes/UserUpdateProfileDto.html":{},"coverage.html":{}}}],["src/user/dto/user.dto.ts",{"_index":1061,"title":{},"body":{"classes/UserDto.html":{},"classes/UserRespondDto.html":{},"coverage.html":{}}}],["src/user/dto/user.dto.ts:11",{"_index":1068,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/dto/user.dto.ts:13",{"_index":1064,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/dto/user.dto.ts:15",{"_index":1065,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/dto/user.dto.ts:19",{"_index":1081,"title":{},"body":{"classes/UserRespondDto.html":{}}}],["src/user/dto/user.dto.ts:21",{"_index":1079,"title":{},"body":{"classes/UserRespondDto.html":{}}}],["src/user/dto/user.dto.ts:23",{"_index":1082,"title":{},"body":{"classes/UserRespondDto.html":{}}}],["src/user/dto/user.dto.ts:25",{"_index":1083,"title":{},"body":{"classes/UserRespondDto.html":{}}}],["src/user/dto/user.dto.ts:27",{"_index":1080,"title":{},"body":{"classes/UserRespondDto.html":{}}}],["src/user/dto/user.dto.ts:5",{"_index":1066,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/dto/user.dto.ts:7",{"_index":1063,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/dto/user.dto.ts:9",{"_index":1067,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/user.controller.ts",{"_index":1035,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:31",{"_index":1040,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:41",{"_index":1043,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:57",{"_index":1048,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module.ts",{"_index":1076,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":718,"title":{},"body":{"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:13",{"_index":1088,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:15",{"_index":1090,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:19",{"_index":1094,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:29",{"_index":1095,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:46",{"_index":1089,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:61",{"_index":1092,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:72",{"_index":1091,"title":{},"body":{"injectables/UserService.html":{}}}],["stack",{"_index":881,"title":{},"body":{"injectables/LoggerService.html":{}}}],["stacktrace",{"_index":885,"title":{},"body":{"injectables/LoggerService.html":{}}}],["start:dev",{"_index":1254,"title":{},"body":{"index.html":{}}}],["start:devprisma",{"_index":1256,"title":{},"body":{"index.html":{}}}],["started",{"_index":1103,"title":{"changelog.html":{},"contributing.html":{},"index.html":{},"license.html":{},"todo.html":{}},"body":{}}],["statements",{"_index":1109,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":220,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["statuscode",{"_index":11,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["stop",{"_index":1224,"title":{},"body":{"index.html":{}}}],["storage",{"_index":74,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["store",{"_index":75,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["strategy",{"_index":806,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["strategy/jwt.at.strategy",{"_index":324,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy/jwt.rt.strategy",{"_index":326,"title":{},"body":{"modules/AuthModule.html":{}}}],["string",{"_index":14,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"classes/AddAndRemoveParticipantDto.html":{},"classes/AddParticipantDto.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"interfaces/ArgonHashPayload.html":{},"controllers/AuthController.html":{},"interfaces/AuthKey.html":{},"injectables/AuthService.html":{},"interfaces/CacheDatabaseConfig.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"injectables/EventService.html":{},"classes/GetEventByIdDto.html":{},"classes/GetMessageInput.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayloadForSign.html":{},"interfaces/JwtPayloadWithRt.html":{},"injectables/LoggerService.html":{},"classes/Message.html":{},"controllers/MessageController.html":{},"classes/MessageResolver.html":{},"injectables/MessageService.html":{},"interfaces/QueueDatabaseConfig.html":{},"classes/RemoveParticipantDto.html":{},"classes/SaveMessageInput.html":{},"interfaces/SendMessageToChatDto.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/TokenDto.html":{},"classes/TokenDtoWithUserId.html":{},"interfaces/TripleDesDecryptPayload.html":{},"classes/UnAuthorizedResponse.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserFromJwtDto.html":{},"classes/UserRespondDto.html":{},"injectables/UserService.html":{},"classes/UserUpdateProfileDto.html":{},"interfaces/envConfig.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":399,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayloadForSign.html":{},"interfaces/JwtPayloadWithRt.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/TokenDto.html":{},"classes/TokenDtoWithUserId.html":{},"classes/UserFromJwtDto.html":{}}}],["subscription",{"_index":631,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["subscription((returns",{"_index":675,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["subscription(returns",{"_index":951,"title":{},"body":{"classes/MessageResolver.html":{}}}],["subscriptions",{"_index":238,"title":{},"body":{"modules/AppModule.html":{},"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{},"dependencies.html":{}}}],["super",{"_index":762,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["super.canactivate(context",{"_index":777,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"classes/RtGuard.html":{}}}],["super.login(request",{"_index":770,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"classes/RtGuard.html":{}}}],["support",{"_index":1288,"title":{},"body":{"modules.html":{}}}],["surname",{"_index":720,"title":{},"body":{"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/UserService.html":{},"classes/UserUpdateProfileDto.html":{}}}],["svg",{"_index":1289,"title":{},"body":{"modules.html":{}}}],["sync",{"_index":1247,"title":{},"body":{"index.html":{}}}],["system",{"_index":73,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["table",{"_index":1146,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1145,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":652,"title":{},"body":{"classes/GetMessageInput.html":{},"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"classes/MessageResolver.html":{},"injectables/MessageService.html":{},"classes/SaveMessageInput.html":{},"injectables/UserService.html":{}}}],["technically",{"_index":1235,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":985,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":986,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.appservice.gethello",{"_index":155,"title":{},"body":{"controllers/AppController.html":{}}}],["this.atprivatekey",{"_index":383,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authservice.decryptjwtpayload",{"_index":830,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.authservice.logout(userid",{"_index":118,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["this.authservice.refreshtokens(userid",{"_index":127,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["this.authservice.signinlocal(validateddto",{"_index":107,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["this.authservice.signuplocal",{"_index":103,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["this.configservice.get('jwtkey.at_privatekey",{"_index":384,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwtkey.rt_privatekey",{"_index":386,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.createlog",{"_index":896,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this.decryptjwtpayload",{"_index":428,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.eventservice.addpaticipanttoevent(args",{"_index":538,"title":{},"body":{"controllers/EventController.html":{}}}],["this.eventservice.createevent(args",{"_index":535,"title":{},"body":{"controllers/EventController.html":{}}}],["this.eventservice.geteventbyid(eventid",{"_index":543,"title":{},"body":{"controllers/EventController.html":{}}}],["this.eventservice.removepaticipanttoevent(args",{"_index":540,"title":{},"body":{"controllers/EventController.html":{}}}],["this.gettokens",{"_index":398,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.hashdata(authdto.password",{"_index":388,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.hashdata(rt",{"_index":448,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.signasync",{"_index":435,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.log",{"_index":902,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this.logger.debug(message",{"_index":900,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this.logger.error(message",{"_index":898,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this.logger.http(req",{"_index":844,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["this.logger.log('cached",{"_index":828,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.logger.log('createevent",{"_index":579,"title":{},"body":{"injectables/EventService.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{}}}],["this.logger.log(message",{"_index":895,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this.logger.verbose(message",{"_index":901,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this.logger.warn(message",{"_index":899,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this.messageservice.getmessagesbyeventchatid(args.eventid",{"_index":939,"title":{},"body":{"controllers/MessageController.html":{},"interfaces/SendMessageToChatDto.html":{}}}],["this.messageservice.sentmessagetoeventchatbyeventchatid",{"_index":933,"title":{},"body":{"controllers/MessageController.html":{},"interfaces/SendMessageToChatDto.html":{}}}],["this.msgsservice.createmessage(predata",{"_index":668,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["this.msgsservice.messages",{"_index":649,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["this.postsservice.findall",{"_index":673,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["this.prisma.event.create",{"_index":580,"title":{},"body":{"injectables/EventService.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{}}}],["this.prisma.event.findunique",{"_index":594,"title":{},"body":{"injectables/EventService.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"interfaces/ISendMessageToChatArgs.html":{},"injectables/MessageService.html":{}}}],["this.prisma.event.update",{"_index":592,"title":{},"body":{"injectables/EventService.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{}}}],["this.prisma.eventchat.create",{"_index":587,"title":{},"body":{"injectables/EventService.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{}}}],["this.prisma.log.create",{"_index":910,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this.prisma.message",{"_index":702,"title":{},"body":{"interfaces/ISendMessageToChatArgs.html":{},"injectables/MessageService.html":{}}}],["this.prisma.message.create",{"_index":694,"title":{},"body":{"interfaces/ISendMessageToChatArgs.html":{},"injectables/MessageService.html":{}}}],["this.prisma.message.delete",{"_index":699,"title":{},"body":{"interfaces/ISendMessageToChatArgs.html":{},"injectables/MessageService.html":{}}}],["this.prisma.message.findmany",{"_index":692,"title":{},"body":{"interfaces/ISendMessageToChatArgs.html":{},"injectables/MessageService.html":{}}}],["this.prisma.message.findunique",{"_index":686,"title":{},"body":{"interfaces/ISendMessageToChatArgs.html":{},"injectables/MessageService.html":{}}}],["this.prisma.message.update",{"_index":697,"title":{},"body":{"interfaces/ISendMessageToChatArgs.html":{},"injectables/MessageService.html":{}}}],["this.prisma.user",{"_index":736,"title":{},"body":{"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/UserService.html":{}}}],["this.prisma.user.findmany",{"_index":733,"title":{},"body":{"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/UserService.html":{}}}],["this.prisma.user.findunique",{"_index":729,"title":{},"body":{"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/UserService.html":{}}}],["this.prisma.user.update",{"_index":742,"title":{},"body":{"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/UserService.html":{}}}],["this.prisma.userhasheddata.findunique",{"_index":408,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["this.prisma.userhasheddata.updatemany",{"_index":430,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.redis",{"_index":824,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.redis.get(payload.sub",{"_index":827,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.redis.set(payload.sub",{"_index":834,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.redis.set(payload.userid",{"_index":831,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.redisservice.getclient",{"_index":825,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.reflector.getallandoverride('ispublic",{"_index":774,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{}}}],["this.rtprivatekey",{"_index":385,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updaterefreshtokenhash(newuser.username",{"_index":402,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updaterefreshtokenhash(user.userid",{"_index":418,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updaterefreshtokenhash(user.username",{"_index":426,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.createuser",{"_index":390,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.updateprofile",{"_index":1060,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.user",{"_index":404,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{}}}],["this.userservice.users",{"_index":1056,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":409,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"injectables/MessageService.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"injectables/UserService.html":{}}}],["timestamp",{"_index":897,"title":{},"body":{"injectables/LoggerService.html":{},"index.html":{}}}],["timestamp_1`(`timestamp",{"_index":1282,"title":{},"body":{"index.html":{}}}],["todo",{"_index":590,"title":{"todo.html":{}},"body":{"injectables/EventService.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"controllers/UserController.html":{}}}],["token",{"_index":77,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{},"classes/UnAuthorizedResponse.html":{}}}],["tokendto",{"_index":42,"title":{"classes/TokenDto.html":{}},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/TokenDto.html":{},"classes/TokenDtoWithUserId.html":{},"classes/UnAuthorizedResponse.html":{},"classes/UserFromJwtDto.html":{},"coverage.html":{}}}],["tokendto:24",{"_index":1030,"title":{},"body":{"classes/TokenDtoWithUserId.html":{}}}],["tokendto:26",{"_index":1031,"title":{},"body":{"classes/TokenDtoWithUserId.html":{}}}],["tokendtowithuserid",{"_index":43,"title":{"classes/TokenDtoWithUserId.html":{}},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/TokenDto.html":{},"classes/TokenDtoWithUserId.html":{},"classes/UnAuthorizedResponse.html":{},"classes/UserFromJwtDto.html":{},"coverage.html":{}}}],["tokens",{"_index":397,"title":{},"body":{"injectables/AuthService.html":{}}}],["tokens.refresh_token",{"_index":403,"title":{},"body":{"injectables/AuthService.html":{}}}],["tokentype",{"_index":276,"title":{},"body":{"interfaces/ArgonHashPayload.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/TripleDesDecryptPayload.html":{},"miscellaneous/enumerations.html":{}}}],["tokentype.accesstoken",{"_index":429,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["tokentype.refreshtoken",{"_index":444,"title":{},"body":{"injectables/AuthService.html":{}}}],["tostring",{"_index":434,"title":{},"body":{"injectables/AuthService.html":{}}}],["transform",{"_index":86,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["transformer",{"_index":1168,"title":{},"body":{"dependencies.html":{}}}],["transport",{"_index":241,"title":{},"body":{"modules/AppModule.html":{}}}],["transports",{"_index":1353,"title":{},"body":{"miscellaneous/variables.html":{}}}],["trim",{"_index":1005,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["tripledes",{"_index":374,"title":{},"body":{"injectables/AuthService.html":{}}}],["tripledes.decrypt(payload.data",{"_index":453,"title":{},"body":{"injectables/AuthService.html":{}}}],["tripledes.encrypt",{"_index":433,"title":{},"body":{"injectables/AuthService.html":{}}}],["tripledesdecryptpayload",{"_index":279,"title":{"interfaces/TripleDesDecryptPayload.html":{}},"body":{"interfaces/ArgonHashPayload.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/TripleDesDecryptPayload.html":{},"coverage.html":{}}}],["true",{"_index":87,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EventService.html":{},"classes/GetMessageInput.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"interfaces/ISendMessageToChatArgs.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"injectables/JwtStrategy.html":{},"classes/Message.html":{},"classes/MessageResolver.html":{},"injectables/MessageService.html":{},"injectables/RtStrategy.html":{},"classes/SaveMessageInput.html":{},"classes/UnAuthorizedResponse.html":{},"miscellaneous/variables.html":{}}}],["ttl",{"_index":461,"title":{},"body":{"interfaces/CacheDatabaseConfig.html":{},"miscellaneous/variables.html":{}}}],["type",{"_index":12,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"classes/AddAndRemoveParticipantDto.html":{},"classes/AddParticipantDto.html":{},"modules/AppModule.html":{},"interfaces/ArgonHashPayload.html":{},"controllers/AuthController.html":{},"interfaces/AuthKey.html":{},"injectables/AuthService.html":{},"interfaces/CacheDatabaseConfig.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"injectables/EventService.html":{},"classes/GetEventByIdDto.html":{},"classes/GetMessageInput.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"interfaces/ISendMessageToChatArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayloadForSign.html":{},"interfaces/JwtPayloadWithRt.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"classes/Message.html":{},"controllers/MessageController.html":{},"classes/MessageResolver.html":{},"injectables/MessageService.html":{},"injectables/PrismaService.html":{},"interfaces/QueueDatabaseConfig.html":{},"classes/RemoveParticipantDto.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SaveMessageInput.html":{},"interfaces/SendMessageToChatDto.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/TokenDto.html":{},"classes/TokenDtoWithUserId.html":{},"interfaces/TripleDesDecryptPayload.html":{},"classes/UnAuthorizedResponse.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserFromJwtDto.html":{},"classes/UserRespondDto.html":{},"injectables/UserService.html":{},"classes/UserUpdateProfileDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"interfaces/envConfig.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":373,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["types/express",{"_index":1158,"title":{},"body":{"dependencies.html":{}}}],["types/graphql",{"_index":1160,"title":{},"body":{"dependencies.html":{}}}],["unauthorized",{"_index":116,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["unauthorized'})@get('/me",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorized'})@httpcode(200",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorizedexception",{"_index":759,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"classes/RtGuard.html":{}}}],["unauthorizedresponse",{"_index":64,"title":{"classes/UnAuthorizedResponse.html":{}},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{},"coverage.html":{}}}],["unauthorizedresponse})@apiforbiddenresponse({description",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined",{"_index":598,"title":{},"body":{"classes/GetEventByIdDto.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["under",{"_index":861,"title":{},"body":{"modules/LoggerModule.html":{}}}],["unique",{"_index":1284,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EventService.html":{},"classes/MessageResolver.html":{},"injectables/MessageService.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":1299,"title":{},"body":{"properties.html":{}}}],["unsigned",{"_index":1270,"title":{},"body":{"index.html":{}}}],["up",{"_index":1220,"title":{},"body":{"index.html":{}}}],["update",{"_index":744,"title":{},"body":{"interfaces/IUpdateProfileParamsArgs.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/UserUpdateProfileDto.html":{},"coverage.html":{}}}],["updatedat",{"_index":481,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"classes/EventDto.html":{},"classes/GetEventByIdDto.html":{},"classes/UserDto.html":{},"classes/UserRespondDto.html":{},"index.html":{}}}],["updatemessage",{"_index":960,"title":{},"body":{"injectables/MessageService.html":{}}}],["updatemessage(params",{"_index":695,"title":{},"body":{"interfaces/ISendMessageToChatArgs.html":{},"injectables/MessageService.html":{}}}],["updateparams",{"_index":719,"title":{},"body":{"interfaces/IUpdateProfileParamsArgs.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateprofile",{"_index":1085,"title":{},"body":{"injectables/UserService.html":{}}}],["updateprofile(args",{"_index":743,"title":{},"body":{"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/UserService.html":{}}}],["updaterefreshtokenhash",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{}}}],["updaterefreshtokenhash(username",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuser",{"_index":1086,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuser(params",{"_index":740,"title":{},"body":{"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/UserService.html":{}}}],["updateuserprofile",{"_index":1038,"title":{},"body":{"controllers/UserController.html":{}}}],["updateuserprofile(args",{"_index":1044,"title":{},"body":{"controllers/UserController.html":{}}}],["use",{"_index":65,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"injectables/LoggerMiddleware.html":{},"modules/LoggerModule.html":{},"classes/RtGuard.html":{},"classes/UnAuthorizedResponse.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["use(req",{"_index":837,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["useaccestokencookie(access_token",{"_index":109,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["usecookie",{"_index":53,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["usecookiecontext",{"_index":54,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["usecookiecontext.cleartokens",{"_index":1346,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usefactory",{"_index":227,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":25,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"controllers/EventController.html":{},"classes/GetMessageInput.html":{},"controllers/MessageController.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{},"interfaces/SendMessageToChatDto.html":{},"classes/UnAuthorizedResponse.html":{}}}],["useguards(jwtauthguard",{"_index":113,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["useguards(jwtauthguard)@apibearerauth()@apiokresponse({description",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard)@apibearerauth()@post('/logout')@apiokresponse({description",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguardgraphql",{"_index":646,"title":{},"body":{"classes/GetMessageInput.html":{},"classes/MessageResolver.html":{},"classes/SaveMessageInput.html":{}}}],["useguards(rtguard",{"_index":119,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["useguards(rtguard)@apibearerauth()@post('/refresh')@apiunauthorizedresponse({description",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{}}}],["usepipes",{"_index":28,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"controllers/EventController.html":{},"controllers/MessageController.html":{},"interfaces/SendMessageToChatDto.html":{},"classes/UnAuthorizedResponse.html":{}}}],["usepipes(new",{"_index":85,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["user",{"_index":128,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"classes/EventDto.html":{},"classes/GetEventByIdDto.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"injectables/JwtStrategy.html":{},"classes/RtGuard.html":{},"classes/UnAuthorizedResponse.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["user(userwhereuniqueinput",{"_index":1093,"title":{},"body":{"injectables/UserService.html":{}}}],["user.controller",{"_index":1077,"title":{},"body":{"modules/UserModule.html":{}}}],["user.hashedrt",{"_index":445,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["user.id",{"_index":416,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.service",{"_index":1049,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.userid",{"_index":417,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["user.username",{"_index":425,"title":{},"body":{"injectables/AuthService.html":{}}}],["user/dto/user.dto",{"_index":478,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"classes/EventDto.html":{},"classes/GetEventByIdDto.html":{}}}],["user/user.module",{"_index":200,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["user/user.service",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"injectables/JwtStrategy.html":{}}}],["user_email_key`(`email",{"_index":1286,"title":{},"body":{"index.html":{}}}],["user_username_key`(`username",{"_index":1285,"title":{},"body":{"index.html":{}}}],["usercontroller",{"_index":1034,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdto",{"_index":477,"title":{"classes/UserDto.html":{}},"body":{"classes/CreateEventDto.html":{},"classes/CreateEventResponseDto.html":{},"classes/EventChatDto.html":{},"classes/EventDto.html":{},"classes/GetEventByIdDto.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserRespondDto.html":{},"coverage.html":{}}}],["userdto})@httpcode(200",{"_index":1047,"title":{},"body":{"controllers/UserController.html":{}}}],["userefreshtokencookie(refresh_token",{"_index":110,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["userfromjwtdto",{"_index":44,"title":{"classes/UserFromJwtDto.html":{}},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/TokenDto.html":{},"classes/TokenDtoWithUserId.html":{},"classes/UnAuthorizedResponse.html":{},"classes/UserFromJwtDto.html":{},"coverage.html":{}}}],["userfromjwtdto})@apiunauthorizedresponse({description",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{}}}],["userhasheddata",{"_index":379,"title":{},"body":{"injectables/AuthService.html":{}}}],["userid",{"_index":111,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayloadForSign.html":{},"interfaces/JwtPayloadWithRt.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/TokenDto.html":{},"classes/TokenDtoWithUserId.html":{},"classes/UnAuthorizedResponse.html":{},"classes/UserFromJwtDto.html":{}}}],["usermodule",{"_index":168,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":95,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"classes/AddAndRemoveParticipantDto.html":{},"classes/AddParticipantDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EventService.html":{},"interfaces/IAddParticipantArgs.html":{},"interfaces/ICreateEventArgs.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayloadForSign.html":{},"interfaces/JwtPayloadWithRt.html":{},"injectables/JwtStrategy.html":{},"classes/RemoveParticipantDto.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/TokenDto.html":{},"classes/TokenDtoWithUserId.html":{},"classes/UnAuthorizedResponse.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserFromJwtDto.html":{},"classes/UserRespondDto.html":{},"injectables/UserService.html":{},"classes/UserUpdateProfileDto.html":{},"index.html":{}}}],["useroauth.id",{"_index":421,"title":{},"body":{"injectables/AuthService.html":{}}}],["useroauth.name",{"_index":423,"title":{},"body":{"injectables/AuthService.html":{}}}],["useroauth.username",{"_index":420,"title":{},"body":{"injectables/AuthService.html":{}}}],["userresponddto",{"_index":1050,"title":{"classes/UserRespondDto.html":{}},"body":{"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserRespondDto.html":{},"coverage.html":{}}}],["users",{"_index":1087,"title":{},"body":{"injectables/UserService.html":{}}}],["users(params",{"_index":730,"title":{},"body":{"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/UserService.html":{}}}],["userservice",{"_index":342,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthGuardGraphql.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userupdateprofiledto",{"_index":1045,"title":{"classes/UserUpdateProfileDto.html":{}},"body":{"controllers/UserController.html":{},"classes/UserUpdateProfileDto.html":{},"coverage.html":{}}}],["userwhereuniqueinput",{"_index":725,"title":{},"body":{"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/UserService.html":{}}}],["userwithtokens",{"_index":407,"title":{},"body":{"injectables/AuthService.html":{}}}],["useunifiedtopology",{"_index":1363,"title":{},"body":{"miscellaneous/variables.html":{}}}],["utf8mb4",{"_index":1279,"title":{},"body":{"index.html":{}}}],["utf8mb4_unicode_ci",{"_index":1281,"title":{},"body":{"index.html":{}}}],["validate",{"_index":799,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["validate(payload",{"_index":803,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(req",{"_index":999,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["validateddto",{"_index":99,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["validationpipe",{"_index":29,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"controllers/EventController.html":{},"controllers/MessageController.html":{},"interfaces/SendMessageToChatDto.html":{},"classes/UnAuthorizedResponse.html":{}}}],["validationpipe())@post('/signup')@apicreatedresponse({description",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{}}}],["validator",{"_index":1020,"title":{},"body":{"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/TokenDto.html":{},"classes/TokenDtoWithUserId.html":{},"classes/UserFromJwtDto.html":{},"dependencies.html":{}}}],["value",{"_index":1202,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["varchar(1000",{"_index":1283,"title":{},"body":{"index.html":{}}}],["varchar(191",{"_index":1272,"title":{},"body":{"index.html":{}}}],["variable",{"_index":1111,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1302,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verbose",{"_index":871,"title":{},"body":{"injectables/LoggerService.html":{}}}],["verbose(message",{"_index":891,"title":{},"body":{"injectables/LoggerService.html":{}}}],["version",{"_index":1297,"title":{},"body":{"properties.html":{}}}],["via",{"_index":79,"title":{},"body":{"classes/AcessDeniedResponse.html":{},"controllers/AuthController.html":{},"classes/UnAuthorizedResponse.html":{}}}],["void",{"_index":182,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"miscellaneous/variables.html":{}}}],["wait",{"_index":1240,"title":{},"body":{"index.html":{}}}],["want",{"_index":1351,"title":{},"body":{"miscellaneous/variables.html":{}}}],["warn",{"_index":872,"title":{},"body":{"injectables/LoggerService.html":{}}}],["warn(message",{"_index":893,"title":{},"body":{"injectables/LoggerService.html":{}}}],["warning",{"_index":857,"title":{},"body":{"modules/LoggerModule.html":{}}}],["welcome",{"_index":723,"title":{},"body":{"interfaces/IUpdateProfileParamsArgs.html":{},"injectables/UserService.html":{}}}],["winston",{"_index":1181,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["winston.format.combine",{"_index":1356,"title":{},"body":{"miscellaneous/variables.html":{}}}],["winston.format.ms",{"_index":1358,"title":{},"body":{"miscellaneous/variables.html":{}}}],["winston.format.timestamp",{"_index":1357,"title":{},"body":{"miscellaneous/variables.html":{}}}],["winston.transports.console",{"_index":1354,"title":{},"body":{"miscellaneous/variables.html":{}}}],["winston.transports.mongodb",{"_index":1361,"title":{},"body":{"miscellaneous/variables.html":{}}}],["winstonlogger",{"_index":1134,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["winstonmodule.createlogger",{"_index":1352,"title":{},"body":{"miscellaneous/variables.html":{}}}],["world",{"_index":266,"title":{},"body":{"injectables/AppService.html":{}}}],["wrapped",{"_index":868,"title":{},"body":{"injectables/LoggerService.html":{}}}],["write",{"_index":883,"title":{},"body":{"injectables/LoggerService.html":{}}}],["ws",{"_index":240,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["yarn",{"_index":1253,"title":{},"body":{"index.html":{}}}],["yes",{"_index":879,"title":{},"body":{"injectables/LoggerService.html":{}}}],["zoom",{"_index":169,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/LoggerModule.html":{},"modules/MessageModule.html":{},"modules/PrismaModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AcessDeniedResponse.html":{"url":"classes/AcessDeniedResponse.html","title":"class - AcessDeniedResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AcessDeniedResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                            \n                                message\n                            \n                            \n                                statusCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.controller.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.controller.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        statusCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.controller.ts:41\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  UseGuards,\n  Req,\n  Get,\n  Body,\n  UsePipes,\n  ValidationPipe,\n  Res,\n  HttpCode,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { JwtAuthGuard } from './guard/jwt-auth.guard';\nimport { RtGuard } from './guard/rt.guard';\nimport {\n  SignUpDto,\n  SignInRequestDto,\n  TokenDto,\n  TokenDtoWithUserId,\n  UserFromJwtDto,\n} from './auth.dto';\nimport { GetCurrentUser } from './decorators/getCurrentUser.decorator';\nimport { Request, Response } from 'express';\nimport { GetCurrentUserCookie } from './decorators/getCurrentUserCookie.decorator';\nimport { UseCookie, UseCookieContext } from './decorators/UseCookie.decorator';\nimport {\n  ApiProperty,\n  ApiOkResponse,\n  ApiCreatedResponse,\n  ApiTags,\n  ApiBearerAuth,\n  ApiUnauthorizedResponse,\n  ApiForbiddenResponse,\n} from '@nestjs/swagger';\n\nexport class AcessDeniedResponse {\n  @ApiProperty()\n  message: string;\n  @ApiProperty()\n  statusCode: number;\n  @ApiProperty()\n  error: string;\n}\n\nexport class UnAuthorizedResponse {\n  @ApiProperty()\n  message: string;\n  @ApiProperty()\n  statusCode: number;\n}\n/**\n *  All use set cookies header when login from non browser fetch system should use storage to store accses token\n * then passing it via authorization header\n */\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @UsePipes(new ValidationPipe({ transform: true }))\n  @Post('/signup')\n  @ApiCreatedResponse({\n    description: 'Return Token',\n    type: TokenDto,\n  })\n  async register(@Body() req: SignUpDto): Promise {\n    const { username, name, email, password } = req;\n    const validatedDto = { username, name, email, password };\n    const { access_token, refresh_token } = await this.authService.signUpLocal(\n      validatedDto,\n    );\n\n    return { access_token, refresh_token };\n  }\n\n  @Post('/signin')\n  @HttpCode(200)\n  @ApiOkResponse({\n    description: 'Return Token',\n    type: TokenDtoWithUserId,\n  })\n  async login(@Body() req: SignInRequestDto): Promise {\n    const { username, password } = req;\n    const validatedDto = { username, password };\n    const response = this.authService.signinLocal(validatedDto);\n    const { access_token, refresh_token } = await response;\n    // console.log(rawReq.csrfToken());\n    // useAccesTokenCookie(access_token);\n    // useRefreshTokenCookie(refresh_token);\n\n    return { userId: req.username, access_token, refresh_token };\n  }\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @Post('/logout')\n  @ApiOkResponse({\n    description: 'Return Token',\n    type: Boolean,\n  })\n  @ApiUnauthorizedResponse({\n    description: 'Unauthorized',\n  })\n  @HttpCode(200)\n  async logout(@GetCurrentUser('userId') userId: string): Promise {\n    return this.authService.logout(userId);\n  }\n\n  @UseGuards(RtGuard)\n  @ApiBearerAuth()\n  @Post('/refresh')\n  @ApiUnauthorizedResponse({\n    description: 'Unauthorized',\n    type: UnAuthorizedResponse,\n  })\n  @ApiForbiddenResponse({\n    description: 'Access denied',\n    type: AcessDeniedResponse,\n  })\n  @ApiOkResponse({\n    description: 'Return Token',\n    type: TokenDto,\n  })\n  async refresh(\n    @GetCurrentUser('userId') userId: string,\n    @GetCurrentUser('refreshToken') refreshToken: string,\n  ): Promise {\n    const { access_token, refresh_token } =\n      await this.authService.refreshTokens(userId, refreshToken);\n\n    return { access_token, refresh_token };\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @ApiOkResponse({\n    description: 'Return User',\n    type: UserFromJwtDto,\n  })\n  @ApiUnauthorizedResponse({\n    description: 'Unauthorized',\n  })\n  @Get('/me')\n  getProfile(@Req() req: Request) {\n    return req.user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddAndRemoveParticipantDto.html":{"url":"classes/AddAndRemoveParticipantDto.html","title":"class - AddAndRemoveParticipantDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddAndRemoveParticipantDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event/dto/participant.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                eventId\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        eventId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/participant.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/participant.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nclass AddAndRemoveParticipantDto {\n  @ApiProperty()\n  eventId: string;\n  @ApiProperty()\n  username: string;\n}\n\nexport class AddParticipantDto extends AddAndRemoveParticipantDto {}\nexport class RemoveParticipantDto extends AddAndRemoveParticipantDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddParticipantDto.html":{"url":"classes/AddParticipantDto.html","title":"class - AddParticipantDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddParticipantDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event/dto/participant.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AddAndRemoveParticipantDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                eventId\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        eventId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         AddAndRemoveParticipantDto\n\n                            \n                        \n                    \n                        \n                                Defined in         AddAndRemoveParticipantDto:5\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         AddAndRemoveParticipantDto\n\n                            \n                        \n                    \n                        \n                                Defined in         AddAndRemoveParticipantDto:7\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nclass AddAndRemoveParticipantDto {\n  @ApiProperty()\n  eventId: string;\n  @ApiProperty()\n  username: string;\n}\n\nexport class AddParticipantDto extends AddAndRemoveParticipantDto {}\nexport class RemoveParticipantDto extends AddAndRemoveParticipantDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nEventModule\n\nEventModule\n\nAppModule -->\n\nEventModule->AppModule\n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nMessageModule\n\nMessageModule\n\nAppModule -->\n\nMessageModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            EventModule\n                        \n                        \n                            LoggerModule\n                        \n                        \n                            MessageModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import {\n  Module,\n  CacheModule,\n  CacheInterceptor,\n  MiddlewareConsumer,\n  RequestMethod,\n} from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { ApolloDriver, ApolloDriverConfig } from '@nestjs/apollo';\nimport { join } from 'path';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { PrismaModule } from './prisma/prisma.module';\nimport { MessageModule } from './message/message.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { UserModule } from './user/user.module';\nimport { AuthModule } from './auth/auth.module';\nimport { LoggerModule } from './logger/logger.module';\nimport { queueDatabaseConfigObject } from './config/queueDatabase.config';\nimport { cacheDatabaseConfigObject } from './config/cacheDatabase.config';\nimport { envConfigObject } from './config/env.Config';\nimport { JwtKeyConfigObject } from './config/key.config';\nimport { LoggerMiddleware } from './logger/logger.middleware';\nimport { RedisModule } from '@liaoliaots/nestjs-redis';\nimport { ConfigService } from '@nestjs/config';\nimport { EventModule } from './event/event.module';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nconst configOptionForRoot = {\n  load: [\n    envConfigObject,\n    // queueDatabaseConfigObject,\n    cacheDatabaseConfigObject,\n    JwtKeyConfigObject,\n  ],\n  cache: true,\n  isGlobal: true,\n};\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      ...configOptionForRoot,\n    }),\n    RedisModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        config: {\n          host: configService.get('cacheDatabase.host'),\n          port: configService.get('cacheDatabase.port'),\n          password: configService.get('cacheDatabase.password'),\n        },\n      }),\n      inject: [ConfigService],\n    }),\n    GraphQLModule.forRoot({\n      driver: ApolloDriver,\n      installSubscriptionHandlers: true,\n      subscriptions: {\n        'graphql-ws': true,\n        'subscriptions-transport-ws': true,\n      },\n      debug: process.env.NODE_ENV === 'development',\n      playground: true,\n      autoSchemaFile: join(process.cwd(), 'src/schema.gql'),\n      cors: true,\n      persistedQueries: false,\n      cache: 'bounded',\n    }),\n\n    LoggerModule,\n    PrismaModule,\n    MessageModule,\n    AuthModule,\n    UserModule,\n    EventModule,\n    ServeStaticModule.forRoot({\n      rootPath: join(__dirname, '..', 'docs'),\n      serveRoot: '/docs',\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(LoggerMiddleware).forRoutes({\n      path: '*',\n      method: RequestMethod.ALL,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World! for nestjs';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ArgonHashPayload.html":{"url":"interfaces/ArgonHashPayload.html","title":"interface - ArgonHashPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ArgonHashPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.processor.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            options\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        options\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        options:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum tokenType {\n  accessToken = 'accessToken',\n  refreshToken = 'refreshToken',\n}\nexport interface ArgonHashPayload {\n  data: string;\n  options: {\n    hashLength: number;\n  };\n}\n\nexport interface TripleDesDecryptPayload {\n  data: string;\n  type: tokenType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                 All use set cookies header when login from non browser fetch system should use storage to store accses token\nthen passing it via authorization header\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getProfile\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refresh\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getProfile\n                        \n                    \n                \n            \n            \n                \ngetProfile(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@ApiBearerAuth()@ApiOkResponse({description: 'Return User', type: UserFromJwtDto})@ApiUnauthorizedResponse({description: 'Unauthorized'})@Get('/me')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:144\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req: SignInRequestDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signin')@HttpCode(200)@ApiOkResponse({description: 'Return Token', type: TokenDtoWithUserId})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                SignInRequestDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@ApiBearerAuth()@Post('/logout')@ApiOkResponse({description: 'Return Token', type: Boolean})@ApiUnauthorizedResponse({description: 'Unauthorized'})@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                    \n                    refresh(userId: string, refreshToken: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(RtGuard)@ApiBearerAuth()@Post('/refresh')@ApiUnauthorizedResponse({description: 'Unauthorized', type: UnAuthorizedResponse})@ApiForbiddenResponse({description: 'Access denied', type: AcessDeniedResponse})@ApiOkResponse({description: 'Return Token', type: TokenDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:124\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(req: SignUpDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UsePipes(new ValidationPipe())@Post('/signup')@ApiCreatedResponse({description: 'Return Token', type: TokenDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                SignUpDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  UseGuards,\n  Req,\n  Get,\n  Body,\n  UsePipes,\n  ValidationPipe,\n  Res,\n  HttpCode,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { JwtAuthGuard } from './guard/jwt-auth.guard';\nimport { RtGuard } from './guard/rt.guard';\nimport {\n  SignUpDto,\n  SignInRequestDto,\n  TokenDto,\n  TokenDtoWithUserId,\n  UserFromJwtDto,\n} from './auth.dto';\nimport { GetCurrentUser } from './decorators/getCurrentUser.decorator';\nimport { Request, Response } from 'express';\nimport { GetCurrentUserCookie } from './decorators/getCurrentUserCookie.decorator';\nimport { UseCookie, UseCookieContext } from './decorators/UseCookie.decorator';\nimport {\n  ApiProperty,\n  ApiOkResponse,\n  ApiCreatedResponse,\n  ApiTags,\n  ApiBearerAuth,\n  ApiUnauthorizedResponse,\n  ApiForbiddenResponse,\n} from '@nestjs/swagger';\n\nexport class AcessDeniedResponse {\n  @ApiProperty()\n  message: string;\n  @ApiProperty()\n  statusCode: number;\n  @ApiProperty()\n  error: string;\n}\n\nexport class UnAuthorizedResponse {\n  @ApiProperty()\n  message: string;\n  @ApiProperty()\n  statusCode: number;\n}\n/**\n *  All use set cookies header when login from non browser fetch system should use storage to store accses token\n * then passing it via authorization header\n */\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @UsePipes(new ValidationPipe({ transform: true }))\n  @Post('/signup')\n  @ApiCreatedResponse({\n    description: 'Return Token',\n    type: TokenDto,\n  })\n  async register(@Body() req: SignUpDto): Promise {\n    const { username, name, email, password } = req;\n    const validatedDto = { username, name, email, password };\n    const { access_token, refresh_token } = await this.authService.signUpLocal(\n      validatedDto,\n    );\n\n    return { access_token, refresh_token };\n  }\n\n  @Post('/signin')\n  @HttpCode(200)\n  @ApiOkResponse({\n    description: 'Return Token',\n    type: TokenDtoWithUserId,\n  })\n  async login(@Body() req: SignInRequestDto): Promise {\n    const { username, password } = req;\n    const validatedDto = { username, password };\n    const response = this.authService.signinLocal(validatedDto);\n    const { access_token, refresh_token } = await response;\n    // console.log(rawReq.csrfToken());\n    // useAccesTokenCookie(access_token);\n    // useRefreshTokenCookie(refresh_token);\n\n    return { userId: req.username, access_token, refresh_token };\n  }\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @Post('/logout')\n  @ApiOkResponse({\n    description: 'Return Token',\n    type: Boolean,\n  })\n  @ApiUnauthorizedResponse({\n    description: 'Unauthorized',\n  })\n  @HttpCode(200)\n  async logout(@GetCurrentUser('userId') userId: string): Promise {\n    return this.authService.logout(userId);\n  }\n\n  @UseGuards(RtGuard)\n  @ApiBearerAuth()\n  @Post('/refresh')\n  @ApiUnauthorizedResponse({\n    description: 'Unauthorized',\n    type: UnAuthorizedResponse,\n  })\n  @ApiForbiddenResponse({\n    description: 'Access denied',\n    type: AcessDeniedResponse,\n  })\n  @ApiOkResponse({\n    description: 'Return Token',\n    type: TokenDto,\n  })\n  async refresh(\n    @GetCurrentUser('userId') userId: string,\n    @GetCurrentUser('refreshToken') refreshToken: string,\n  ): Promise {\n    const { access_token, refresh_token } =\n      await this.authService.refreshTokens(userId, refreshToken);\n\n    return { access_token, refresh_token };\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @ApiOkResponse({\n    description: 'Return User',\n    type: UserFromJwtDto,\n  })\n  @ApiUnauthorizedResponse({\n    description: 'Unauthorized',\n  })\n  @Get('/me')\n  getProfile(@Req() req: Request) {\n    return req.user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthKey.html":{"url":"interfaces/AuthKey.html","title":"interface - AuthKey","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthKey\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/interface/authKey.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            at_privateKey\n                                        \n                                \n                                \n                                        \n                                            at_publicKey\n                                        \n                                \n                                \n                                        \n                                            rt_privateKey\n                                        \n                                \n                                \n                                        \n                                            rt_publicKey\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        at_privateKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        at_privateKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        at_publicKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        at_publicKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rt_privateKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rt_privateKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rt_publicKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rt_publicKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface AuthKey {\n  at_privateKey: string;\n  at_publicKey: string;\n  rt_privateKey: string;\n  rt_publicKey: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nRtStrategy\n\nRtStrategy\n\nAuthModule -->\n\nRtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            RtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, CacheModule } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { UserModule } from '../user/user.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtStrategy } from './strategy/jwt.at.strategy';\nimport { AuthController } from './auth.controller';\nimport { RtStrategy } from './strategy/jwt.rt.strategy';\n\n@Module({\n  imports: [\n    UserModule,\n    CacheModule.register({}),\n    PassportModule,\n    JwtModule.register({}),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy, RtStrategy],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                atPrivateKey\n                            \n                            \n                                    Private\n                                rtPrivateKey\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                decryptJwtPayload\n                            \n                            \n                                    Async\n                                getTokens\n                            \n                            \n                                    Async\n                                hashData\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshTokens\n                            \n                            \n                                    Async\n                                signinLocal\n                            \n                            \n                                    Async\n                                signUpLocal\n                            \n                            \n                                    Async\n                                updateRefreshTokenHash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtService: JwtService, configService: ConfigService, prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        decryptJwtPayload\n                        \n                    \n                \n            \n            \n                \n                    \n                    decryptJwtPayload(payload: TripleDesDecryptPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:207\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                TripleDesDecryptPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTokens(payload: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:128\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        hashData\n                        \n                    \n                \n            \n            \n                \n                    \n                    hashData(data: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:201\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshTokens(userId: string, rt: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:164\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signinLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signinLocal(dto: SignInRequestDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                SignInRequestDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signUpLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUpLocal(authDto: SignUpDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authDto\n                                    \n                                                SignUpDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRefreshTokenHash\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRefreshTokenHash(username: string, rt: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:193\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        atPrivateKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        rtPrivateKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:22\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { ForbiddenException, Injectable } from '@nestjs/common';\nimport { UserService } from '../user/user.service';\nimport { JwtService } from '@nestjs/jwt';\nimport * as argon from 'argon2';\nimport { SignUpDto, SignInRequestDto, TokenDto } from './auth.dto';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtPayloadForSign } from '../types';\nimport { Request } from 'express';\nimport { TripleDES, enc } from 'crypto-js';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { User, UserHashedData } from 'prisma/prisma-client';\n\nimport {\n  tokenType,\n  ArgonHashPayload,\n  TripleDesDecryptPayload,\n} from './auth.processor.types';\n\n@Injectable()\nexport class AuthService {\n  private atPrivateKey: string;\n  private rtPrivateKey: string;\n  constructor(\n    private readonly userService: UserService,\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n    private readonly prisma: PrismaService,\n  ) {\n    this.atPrivateKey = this.configService.get('jwtKey.at_privateKey');\n    this.rtPrivateKey = this.configService.get('jwtKey.rt_privateKey');\n  }\n\n  async signUpLocal(authDto: SignUpDto): Promise {\n    const hash = await this.hashData(authDto.password);\n    const newUser = await this.userService.createUser({\n      username: authDto.username,\n      email: authDto.email,\n      // hashpw: hash,\n      profile: {\n        create: {\n          name: authDto.name,\n        },\n      },\n      userHashedData: {\n        create: {\n          hashpw: hash,\n        },\n      },\n    });\n\n    const tokens = await this.getTokens({\n      sub: newUser.id,\n      username: newUser.username,\n    });\n    await this.updateRefreshTokenHash(newUser.username, tokens.refresh_token);\n\n    return tokens;\n  }\n  async signinLocal(dto: SignInRequestDto): Promise {\n    // const user = (await this.userService.user(\n    //   { username: dto.username },\n    //   { Hashed: true },\n    // )) as UserWithTokens;\n    const user = await this.prisma.userHashedData.findUnique({\n      where: {\n        userId: dto.username,\n      },\n    });\n\n    if (!user) throw new ForbiddenException('Access Denied(User)');\n\n    const passwordMatches = await argon.verify(user.hashpw, dto.password);\n    if (!passwordMatches) throw new ForbiddenException('Access Denied');\n\n    const tokens = await this.getTokens({\n      sub: user.id,\n      username: user.userId,\n    });\n    await this.updateRefreshTokenHash(user.userId, tokens.refresh_token);\n\n    return tokens;\n  }\n\n  // async signInOAuth(userOauth): Promise {\n  //   const payload = { username: userOauth.username, sub: userOauth.id };\n  //   const user = await this.userService.user({ email: payload.username });\n  //   if (!user) {\n  //     const newUser = await this.userService.createUser({\n  //       username: payload.username,\n  //       name: userOauth.name,\n  //       email: payload.username,\n  //       hashpw: null,\n  //     });\n  //     const tokens = await this.getTokens({\n  //       sub: user.id,\n  //       username: newUser.username,\n  //     });\n  //     await this.updateRefreshTokenHash(newUser.username, tokens.refresh_token);\n  //     return tokens;\n  //   }\n  //   const tokens = await this.getTokens({\n  //     sub: user.id,\n  //     username: user.username,\n  //   });\n  //   await this.updateRefreshTokenHash(user.username, tokens.refresh_token);\n\n  //   return tokens;\n  // }\n\n  async logout(userId: string): Promise {\n    // const decodedSub = await this.decryptJwtPayload({\n    //   sub: sub,\n    //   type: tokenType.accessToken,\n    // });\n    await this.prisma.userHashedData.updateMany({\n      where: {\n        hashedRt: {\n          not: null,\n        },\n        userId: userId,\n      },\n      data: { hashedRt: null },\n    });\n\n    return true;\n  }\n\n  async getTokens(payload: {\n    sub: string;\n    username: string;\n  }): Promise {\n    const encryptedAt = TripleDES.encrypt(\n      `${payload.username}`,\n      this.atPrivateKey,\n    ).toString();\n\n    const at = this.jwtService.signAsync(\n      { sub: payload.sub, userId: encryptedAt },\n      {\n        expiresIn: '20m',\n        algorithm: 'RS256',\n        privateKey: this.atPrivateKey,\n      },\n    );\n\n    const encryptedRt = TripleDES.encrypt(\n      `${payload.username}`,\n      this.rtPrivateKey,\n    ).toString();\n    const rt = this.jwtService.signAsync(\n      { sub: payload.sub, userId: encryptedRt },\n      {\n        expiresIn: '1d',\n        algorithm: 'RS256',\n        privateKey: this.rtPrivateKey,\n      },\n    );\n\n    return {\n      access_token: await at,\n      refresh_token: await rt,\n    };\n  }\n  async refreshTokens(userId: string, rt: string): Promise {\n    const decodedSub = await this.decryptJwtPayload({\n      data: userId,\n      type: tokenType.refreshToken,\n    });\n\n    // const user = (await this.userService.user(\n    //   { username: decodedSub },\n    //   { Hashed: true },\n    // )) as UserWithTokens;\n    const user = await this.prisma.userHashedData.findUnique({\n      where: {\n        userId: decodedSub,\n      },\n    });\n    if (!user || !user.hashedRt) throw new ForbiddenException('Access Denied');\n\n    const rtMatches = await argon.verify(user.hashedRt, rt);\n    if (!rtMatches) throw new ForbiddenException('Access Denied');\n\n    const tokens = await this.getTokens({\n      sub: user.id,\n      username: user.userId,\n    });\n    await this.updateRefreshTokenHash(user.userId, tokens.refresh_token);\n\n    return tokens;\n  }\n\n  async updateRefreshTokenHash(username: string, rt: string): Promise {\n    const hash = await this.hashData(rt);\n    await this.prisma.userHashedData.updateMany({\n      where: { userId: username },\n      data: { hashedRt: hash },\n    });\n  }\n\n  async hashData(data: string): Promise {\n    const hashed = await argon.hash(data);\n\n    return hashed;\n  }\n\n  async decryptJwtPayload(payload: TripleDesDecryptPayload) {\n    const secret =\n      payload.type === tokenType.accessToken\n        ? this.atPrivateKey\n        : this.rtPrivateKey;\n\n    const decrypted = TripleDES.decrypt(payload.data, secret);\n    // console.log('IN process;', decrypted.toString());\n    // console.log('IN process;', decrypted.toString(enc.Utf8));\n\n    return decrypted.toString(enc.Utf8);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CacheDatabaseConfig.html":{"url":"interfaces/CacheDatabaseConfig.html","title":"interface - CacheDatabaseConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CacheDatabaseConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/interface/cacheDatabaseConfig.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            host\n                                        \n                                \n                                \n                                        \n                                            isGlobal\n                                        \n                                \n                                \n                                        \n                                            max\n                                        \n                                \n                                \n                                        \n                                            port\n                                        \n                                \n                                \n                                        \n                                            ttl\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        host\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        host:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isGlobal\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isGlobal:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        max\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        max:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        port:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ttl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ttl:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface CacheDatabaseConfig {\n  ttl: number;\n  max: number;\n  isGlobal: boolean;\n  host: string;\n  port: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateEventDto.html":{"url":"classes/CreateEventDto.html","title":"class - CreateEventDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateEventDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event/dto/create-event.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                creatorUsername\n                            \n                            \n                                date\n                            \n                            \n                                description\n                            \n                            \n                                eventName\n                            \n                            \n                                location\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        creatorUsername\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/create-event.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/create-event.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/create-event.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        eventName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/create-event.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/create-event.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiOkResponse } from '@nestjs/swagger';\nimport { Event, EventChat, User } from '@prisma/client';\nimport { UserDto } from '../../user/dto/user.dto';\nexport class CreateEventDto {\n  @ApiProperty()\n  eventName: string;\n  @ApiProperty()\n  description: string;\n  @ApiProperty()\n  location: string;\n  @ApiProperty()\n  date: string;\n  @ApiProperty()\n  creatorUsername: string;\n}\n\nexport class EventChatDto {\n  @ApiProperty()\n  id: string;\n  @ApiProperty()\n  updatedAt: Date;\n  @ApiProperty()\n  eventId: string;\n}\nexport class EventDto {\n  @ApiProperty()\n  id: string;\n  @ApiProperty()\n  createdAt: Date;\n  @ApiProperty()\n  updatedAt: Date;\n  @ApiProperty()\n  name: string;\n  @ApiProperty()\n  date: Date;\n  @ApiProperty()\n  location: string;\n  @ApiProperty()\n  description: string;\n  @ApiProperty()\n  creatorId: string;\n  @ApiProperty()\n  participantsId: string[];\n}\nexport class CreateEventResponseDto {\n  @ApiProperty({ type: EventDto })\n  event: Event;\n  @ApiProperty({ type: EventChatDto })\n  eventChat: EventChatDto;\n}\nexport class GetEventByIdDto extends EventDto {\n  @ApiProperty()\n  creator: UserDto;\n  @ApiProperty({ type: [UserDto] })\n  participants: UserDto[];\n  @ApiProperty()\n  eventChat: EventChatDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateEventResponseDto.html":{"url":"classes/CreateEventResponseDto.html","title":"class - CreateEventResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateEventResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event/dto/create-event.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                event\n                            \n                            \n                                eventChat\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        event\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Event\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: EventDto})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/create-event.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        eventChat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EventChatDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: EventChatDto})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/create-event.dto.ts:49\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiOkResponse } from '@nestjs/swagger';\nimport { Event, EventChat, User } from '@prisma/client';\nimport { UserDto } from '../../user/dto/user.dto';\nexport class CreateEventDto {\n  @ApiProperty()\n  eventName: string;\n  @ApiProperty()\n  description: string;\n  @ApiProperty()\n  location: string;\n  @ApiProperty()\n  date: string;\n  @ApiProperty()\n  creatorUsername: string;\n}\n\nexport class EventChatDto {\n  @ApiProperty()\n  id: string;\n  @ApiProperty()\n  updatedAt: Date;\n  @ApiProperty()\n  eventId: string;\n}\nexport class EventDto {\n  @ApiProperty()\n  id: string;\n  @ApiProperty()\n  createdAt: Date;\n  @ApiProperty()\n  updatedAt: Date;\n  @ApiProperty()\n  name: string;\n  @ApiProperty()\n  date: Date;\n  @ApiProperty()\n  location: string;\n  @ApiProperty()\n  description: string;\n  @ApiProperty()\n  creatorId: string;\n  @ApiProperty()\n  participantsId: string[];\n}\nexport class CreateEventResponseDto {\n  @ApiProperty({ type: EventDto })\n  event: Event;\n  @ApiProperty({ type: EventChatDto })\n  eventChat: EventChatDto;\n}\nexport class GetEventByIdDto extends EventDto {\n  @ApiProperty()\n  creator: UserDto;\n  @ApiProperty({ type: [UserDto] })\n  participants: UserDto[];\n  @ApiProperty()\n  eventChat: EventChatDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EventChatDto.html":{"url":"classes/EventChatDto.html","title":"class - EventChatDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EventChatDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event/dto/create-event.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                eventId\n                            \n                            \n                                id\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        eventId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/create-event.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/create-event.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/create-event.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiOkResponse } from '@nestjs/swagger';\nimport { Event, EventChat, User } from '@prisma/client';\nimport { UserDto } from '../../user/dto/user.dto';\nexport class CreateEventDto {\n  @ApiProperty()\n  eventName: string;\n  @ApiProperty()\n  description: string;\n  @ApiProperty()\n  location: string;\n  @ApiProperty()\n  date: string;\n  @ApiProperty()\n  creatorUsername: string;\n}\n\nexport class EventChatDto {\n  @ApiProperty()\n  id: string;\n  @ApiProperty()\n  updatedAt: Date;\n  @ApiProperty()\n  eventId: string;\n}\nexport class EventDto {\n  @ApiProperty()\n  id: string;\n  @ApiProperty()\n  createdAt: Date;\n  @ApiProperty()\n  updatedAt: Date;\n  @ApiProperty()\n  name: string;\n  @ApiProperty()\n  date: Date;\n  @ApiProperty()\n  location: string;\n  @ApiProperty()\n  description: string;\n  @ApiProperty()\n  creatorId: string;\n  @ApiProperty()\n  participantsId: string[];\n}\nexport class CreateEventResponseDto {\n  @ApiProperty({ type: EventDto })\n  event: Event;\n  @ApiProperty({ type: EventChatDto })\n  eventChat: EventChatDto;\n}\nexport class GetEventByIdDto extends EventDto {\n  @ApiProperty()\n  creator: UserDto;\n  @ApiProperty({ type: [UserDto] })\n  participants: UserDto[];\n  @ApiProperty()\n  eventChat: EventChatDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EventController.html":{"url":"controllers/EventController.html","title":"controller - EventController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EventController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event/event.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                event\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addParticipant\n                            \n                            \n                                    Async\n                                createEvent\n                            \n                            \n                                    Async\n                                getEvent\n                            \n                            \n                                    Async\n                                removeParticipant\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addParticipant\n                        \n                    \n                \n            \n            \n                \n                    \n                    addParticipant(args: AddParticipantDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/addParticipant')@ApiOkResponse({description: 'The event records by id.', type: EventDto})@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/event/event.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                AddParticipantDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    createEvent(createEventParam: CreateEventDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/createEvent')@ApiOkResponse({description: 'The event records ', type: CreateEventResponseDto})@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/event/event.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createEventParam\n                                    \n                                                CreateEventDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    getEvent(eventId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({description: 'The event records by id.', type: GetEventByIdDto})@Get('/getEvent/:eventId')\n                \n            \n\n            \n                \n                    Defined in src/event/event.controller.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    eventId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeParticipant\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeParticipant(args: RemoveParticipantDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/removeParticipant')@ApiOkResponse({description: 'The event records by id.', type: EventDto})@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/event/event.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                RemoveParticipantDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  UseGuards,\n  Req,\n  Get,\n  Body,\n  UsePipes,\n  ValidationPipe,\n  Res,\n  HttpCode,\n  Param,\n} from '@nestjs/common';\nimport { ApiProperty, ApiOkResponse, ApiTags } from '@nestjs/swagger';\n\nimport { EventService } from './event.service';\nimport {\n  CreateEventDto,\n  CreateEventResponseDto,\n  GetEventByIdDto,\n  EventDto,\n} from './dto/create-event.dto';\nimport { AddParticipantDto, RemoveParticipantDto } from './dto/participant.dto';\nimport { Event } from '@prisma/client';\n@ApiTags('Event')\n@Controller('event')\nexport class EventController {\n  constructor(private eventService: EventService) {}\n\n  @Post('/createEvent')\n  @ApiOkResponse({\n    description: 'The event records ',\n    type: CreateEventResponseDto,\n  })\n  @HttpCode(200)\n  async createEvent(\n    @Body() createEventParam: CreateEventDto,\n  ): Promise {\n    const date = new Date(createEventParam.date);\n    const args = {\n      name: createEventParam.eventName,\n      description: createEventParam.description,\n      location: createEventParam.location,\n      date: new Date(Date.now()),\n      creatorUsername: createEventParam.creatorUsername,\n    };\n    return this.eventService.createEvent(args);\n  }\n\n  @Post('/addParticipant')\n  @ApiOkResponse({\n    description: 'The event records by id.',\n    type: EventDto,\n  })\n  @HttpCode(200)\n  async addParticipant(@Body() args: AddParticipantDto): Promise {\n    return this.eventService.addPaticipantToEvent(args);\n  }\n\n  @Post('/removeParticipant')\n  @ApiOkResponse({\n    description: 'The event records by id.',\n    type: EventDto,\n  })\n  @HttpCode(200)\n  async removeParticipant(\n    @Body() args: RemoveParticipantDto,\n  ): Promise {\n    return this.eventService.removePaticipantToEvent(args);\n  }\n\n  @ApiOkResponse({\n    description: 'The event records by id.',\n    type: GetEventByIdDto,\n  })\n  @Get('/getEvent/:eventId')\n  async getEvent(@Param('eventId') eventId: string): Promise {\n    return this.eventService.getEventById(eventId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EventDto.html":{"url":"classes/EventDto.html","title":"class - EventDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EventDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event/dto/create-event.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                creatorId\n                            \n                            \n                                date\n                            \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                location\n                            \n                            \n                                name\n                            \n                            \n                                participantsId\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/create-event.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        creatorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/create-event.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/create-event.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/create-event.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/create-event.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/create-event.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/create-event.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        participantsId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/create-event.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/create-event.dto.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiOkResponse } from '@nestjs/swagger';\nimport { Event, EventChat, User } from '@prisma/client';\nimport { UserDto } from '../../user/dto/user.dto';\nexport class CreateEventDto {\n  @ApiProperty()\n  eventName: string;\n  @ApiProperty()\n  description: string;\n  @ApiProperty()\n  location: string;\n  @ApiProperty()\n  date: string;\n  @ApiProperty()\n  creatorUsername: string;\n}\n\nexport class EventChatDto {\n  @ApiProperty()\n  id: string;\n  @ApiProperty()\n  updatedAt: Date;\n  @ApiProperty()\n  eventId: string;\n}\nexport class EventDto {\n  @ApiProperty()\n  id: string;\n  @ApiProperty()\n  createdAt: Date;\n  @ApiProperty()\n  updatedAt: Date;\n  @ApiProperty()\n  name: string;\n  @ApiProperty()\n  date: Date;\n  @ApiProperty()\n  location: string;\n  @ApiProperty()\n  description: string;\n  @ApiProperty()\n  creatorId: string;\n  @ApiProperty()\n  participantsId: string[];\n}\nexport class CreateEventResponseDto {\n  @ApiProperty({ type: EventDto })\n  event: Event;\n  @ApiProperty({ type: EventChatDto })\n  eventChat: EventChatDto;\n}\nexport class GetEventByIdDto extends EventDto {\n  @ApiProperty()\n  creator: UserDto;\n  @ApiProperty({ type: [UserDto] })\n  participants: UserDto[];\n  @ApiProperty()\n  eventChat: EventChatDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EventModule.html":{"url":"modules/EventModule.html","title":"module - EventModule","body":"\n                   \n\n\n\n\n    Modules\n    EventModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EventModule\n\n\n\ncluster_EventModule_imports\n\n\n\ncluster_EventModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nEventModule\n\nEventModule\n\nEventModule -->\n\nPrismaModule->EventModule\n\n\n\n\n\nEventService\n\nEventService\n\nEventModule -->\n\nEventService->EventModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/event/event.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EventService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EventController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, Logger, Global } from '@nestjs/common';\n\nimport { PrismaModule } from '../prisma/prisma.module';\nimport { EventService } from './event.service';\nimport { EventController } from './event.controller';\n@Module({\n  imports: [PrismaModule],\n  controllers: [EventController],\n  providers: [EventService, Logger],\n})\nexport class EventModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EventService.html":{"url":"injectables/EventService.html","title":"injectable - EventService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EventService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event/event.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addPaticipantToEvent\n                            \n                            \n                                    Async\n                                createEvent\n                            \n                            \n                                    Async\n                                getEventById\n                            \n                            \n                                    Async\n                                removePaticipantToEvent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: Logger, prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/event/event.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addPaticipantToEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    addPaticipantToEvent(data: IAddParticipantArgs)\n                \n            \n\n\n            \n                \n                    Defined in src/event/event.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                IAddParticipantArgs\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    createEvent(data: ICreateEventArgs)\n                \n            \n\n\n            \n                \n                    Defined in src/event/event.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                ICreateEventArgs\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getEventById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventById(eventId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/event/event.service.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    eventId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removePaticipantToEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    removePaticipantToEvent(data: IAddParticipantArgs)\n                \n            \n\n\n            \n                \n                    Defined in src/event/event.service.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                IAddParticipantArgs\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { Log, Prisma, Event, EventChat } from '@prisma/client';\nimport { PrismaService } from '../prisma/prisma.service';\ninterface ICreateEventArgs {\n  name: string;\n  description: string;\n  location: string;\n  date: Date;\n  creatorUsername: string;\n}\ninterface IAddParticipantArgs {\n  eventId: string;\n  username: string;\n}\n@Injectable()\nexport class EventService {\n  constructor(\n    private readonly logger: Logger, // initialize logger instance\n    private readonly prisma: PrismaService, // initialize prisma instance:\n  ) {}\n\n  async createEvent(\n    data: ICreateEventArgs,\n  ): Promise {\n    this.logger.log('createEvent()');\n    const event = await this.prisma.event.create({\n      data: {\n        name: data.name,\n        description: data.description,\n        date: data.date,\n        location: data.location,\n        creator: {\n          connectOrCreate: {\n            where: {\n              username: data.creatorUsername,\n            },\n            create: {\n              username: data.creatorUsername,\n              email: data.creatorUsername,\n            },\n          },\n        },\n      },\n    });\n    const eventChat = await this.prisma.eventChat.create({\n      data: {\n        event: {\n          connect: {\n            id: event.id,\n          },\n        },\n      },\n    });\n    return { event, eventChat };\n  }\n\n  async addPaticipantToEvent(data: IAddParticipantArgs) {\n    // TODO\n    const { eventId, username } = data;\n\n    const paticipan = await this.prisma.event.update({\n      where: {\n        id: eventId,\n      },\n      data: {\n        participants: {\n          connect: {\n            id: username,\n          },\n        },\n      },\n    });\n    return paticipan;\n  }\n\n  async removePaticipantToEvent(data: IAddParticipantArgs) {\n    // TODO\n    const { eventId, username } = data;\n\n    const paticipan = await this.prisma.event.update({\n      where: {\n        id: eventId,\n      },\n      data: {\n        participants: {\n          disconnect: {\n            id: username,\n          },\n        },\n      },\n    });\n    return paticipan;\n  }\n\n  async getEventById(eventId: string) {\n    return await this.prisma.event.findUnique({\n      where: {\n        id: eventId,\n      },\n      include: {\n        creator: true,\n        participants: true,\n        eventChat: true,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetEventByIdDto.html":{"url":"classes/GetEventByIdDto.html","title":"class - GetEventByIdDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetEventByIdDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event/dto/create-event.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        EventDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                creator\n                            \n                            \n                                eventChat\n                            \n                            \n                                participants\n                            \n                            \n                                createdAt\n                            \n                            \n                                creatorId\n                            \n                            \n                                date\n                            \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                location\n                            \n                            \n                                name\n                            \n                            \n                                participantsId\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/create-event.dto.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        eventChat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EventChatDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/create-event.dto.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        participants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/create-event.dto.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         EventDto\n\n                            \n                        \n                    \n                        \n                                Defined in         EventDto:29\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        creatorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         EventDto\n\n                            \n                        \n                    \n                        \n                                Defined in         EventDto:41\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         EventDto\n\n                            \n                        \n                    \n                        \n                                Defined in         EventDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         EventDto\n\n                            \n                        \n                    \n                        \n                                Defined in         EventDto:39\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         EventDto\n\n                            \n                        \n                    \n                        \n                                Defined in         EventDto:27\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         EventDto\n\n                            \n                        \n                    \n                        \n                                Defined in         EventDto:37\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         EventDto\n\n                            \n                        \n                    \n                        \n                                Defined in         EventDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        participantsId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         EventDto\n\n                            \n                        \n                    \n                        \n                                Defined in         EventDto:43\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         EventDto\n\n                            \n                        \n                    \n                        \n                                Defined in         EventDto:31\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiOkResponse } from '@nestjs/swagger';\nimport { Event, EventChat, User } from '@prisma/client';\nimport { UserDto } from '../../user/dto/user.dto';\nexport class CreateEventDto {\n  @ApiProperty()\n  eventName: string;\n  @ApiProperty()\n  description: string;\n  @ApiProperty()\n  location: string;\n  @ApiProperty()\n  date: string;\n  @ApiProperty()\n  creatorUsername: string;\n}\n\nexport class EventChatDto {\n  @ApiProperty()\n  id: string;\n  @ApiProperty()\n  updatedAt: Date;\n  @ApiProperty()\n  eventId: string;\n}\nexport class EventDto {\n  @ApiProperty()\n  id: string;\n  @ApiProperty()\n  createdAt: Date;\n  @ApiProperty()\n  updatedAt: Date;\n  @ApiProperty()\n  name: string;\n  @ApiProperty()\n  date: Date;\n  @ApiProperty()\n  location: string;\n  @ApiProperty()\n  description: string;\n  @ApiProperty()\n  creatorId: string;\n  @ApiProperty()\n  participantsId: string[];\n}\nexport class CreateEventResponseDto {\n  @ApiProperty({ type: EventDto })\n  event: Event;\n  @ApiProperty({ type: EventChatDto })\n  eventChat: EventChatDto;\n}\nexport class GetEventByIdDto extends EventDto {\n  @ApiProperty()\n  creator: UserDto;\n  @ApiProperty({ type: [UserDto] })\n  participants: UserDto[];\n  @ApiProperty()\n  eventChat: EventChatDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetMessageInput.html":{"url":"classes/GetMessageInput.html","title":"class - GetMessageInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetMessageInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/message/message.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                eventChatId\n                            \n                            \n                                    Optional\n                                limit\n                            \n                            \n                                    Optional\n                                offset\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        eventChatId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => String, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/message/message.resolver.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => Int, {nullable: true, defaultValue: 20})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/message/message.resolver.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => Int, {nullable: true, defaultValue: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/message/message.resolver.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Field,\n  Int,\n  ObjectType,\n  Resolver,\n  Query,\n  Args,\n  ResolveField,\n  Parent,\n  Mutation,\n  InputType,\n  Subscription,\n} from '@nestjs/graphql';\nimport { PubSub } from 'graphql-subscriptions';\nimport { Message } from './message.model';\nimport { MessageService } from './message.service';\nimport { UseGuards } from '@nestjs/common';\nimport { JwtAuthGuardGraphql } from '../auth/guard/jwt-auth-graphql.guard';\nimport { Prisma } from '@prisma/client';\n\n@InputType()\nexport class GetMessageInput {\n  @Field((type) => Int, { nullable: true, defaultValue: 0 })\n  offset?: number;\n  @Field((type) => Int, { nullable: true, defaultValue: 20 })\n  limit?: number;\n  @Field((type) => String, { nullable: true })\n  eventChatId: string;\n}\n@InputType()\nexport class SaveMessageInput {\n  // @Field()\n  //   sender_id: string;\n  @Field()\n  senderName: string;\n  @Field()\n  message: string;\n  @Field((type) => String, { nullable: true })\n  eventChatId: string;\n}\nconst pubSub = new PubSub();\n\n@Resolver((of) => Message)\nexport class MessageResolver {\n  constructor(private readonly msgSservice: MessageService) {}\n\n  // @UseGuards(JwtAuthGuardGraphql)\n  @Query((returns) => [Message])\n  async getMessage(@Args('getMessageInput') getMessageInput: GetMessageInput) {\n    const data = await this.msgSservice.Messages({\n      skip: getMessageInput.offset,\n      take: getMessageInput.limit,\n      where: {\n        EventChat: {\n          id: getMessageInput.eventChatId,\n        },\n      },\n      orderBy: {\n        date: 'desc',\n      },\n    });\n    console.log(data);\n    return data;\n  }\n  // @UseGuards(JwtAuthGuardGraphql)\n  @Mutation((returns) => Message)\n  async saveMessage(\n    @Args('saveMessageData') saveMessageData: SaveMessageInput,\n  ) {\n    console.log(saveMessageData);\n    const preData: Prisma.MessageCreateInput = {\n      senderName: saveMessageData.senderName,\n      message: saveMessageData.message,\n      EventChat: {\n        connect: {\n          id: saveMessageData.eventChatId,\n        },\n      },\n    };\n    const data = await this.msgSservice.createMessage(preData);\n    pubSub.publish('messageAdded', { messageAdded: data });\n\n    return data;\n  }\n  //   @ResolveField()\n  //   async posts(@Parent() author: Message) {\n  //     const { id } = author;\n  //     return this.postsService.findAll({ authorId: id });\n  //   }\n\n  @Subscription((returns) => Message)\n  messageAdded() {\n    return pubSub.asyncIterator('messageAdded');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleOauthGuard.html":{"url":"injectables/GoogleOauthGuard.html","title":"injectable - GoogleOauthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleOauthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/google-oauth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class GoogleOauthGuard extends AuthGuard('google') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAddParticipantArgs.html":{"url":"interfaces/IAddParticipantArgs.html","title":"interface - IAddParticipantArgs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAddParticipantArgs\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event/event.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            eventId\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        eventId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        eventId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { Log, Prisma, Event, EventChat } from '@prisma/client';\nimport { PrismaService } from '../prisma/prisma.service';\ninterface ICreateEventArgs {\n  name: string;\n  description: string;\n  location: string;\n  date: Date;\n  creatorUsername: string;\n}\ninterface IAddParticipantArgs {\n  eventId: string;\n  username: string;\n}\n@Injectable()\nexport class EventService {\n  constructor(\n    private readonly logger: Logger, // initialize logger instance\n    private readonly prisma: PrismaService, // initialize prisma instance:\n  ) {}\n\n  async createEvent(\n    data: ICreateEventArgs,\n  ): Promise {\n    this.logger.log('createEvent()');\n    const event = await this.prisma.event.create({\n      data: {\n        name: data.name,\n        description: data.description,\n        date: data.date,\n        location: data.location,\n        creator: {\n          connectOrCreate: {\n            where: {\n              username: data.creatorUsername,\n            },\n            create: {\n              username: data.creatorUsername,\n              email: data.creatorUsername,\n            },\n          },\n        },\n      },\n    });\n    const eventChat = await this.prisma.eventChat.create({\n      data: {\n        event: {\n          connect: {\n            id: event.id,\n          },\n        },\n      },\n    });\n    return { event, eventChat };\n  }\n\n  async addPaticipantToEvent(data: IAddParticipantArgs) {\n    // TODO\n    const { eventId, username } = data;\n\n    const paticipan = await this.prisma.event.update({\n      where: {\n        id: eventId,\n      },\n      data: {\n        participants: {\n          connect: {\n            id: username,\n          },\n        },\n      },\n    });\n    return paticipan;\n  }\n\n  async removePaticipantToEvent(data: IAddParticipantArgs) {\n    // TODO\n    const { eventId, username } = data;\n\n    const paticipan = await this.prisma.event.update({\n      where: {\n        id: eventId,\n      },\n      data: {\n        participants: {\n          disconnect: {\n            id: username,\n          },\n        },\n      },\n    });\n    return paticipan;\n  }\n\n  async getEventById(eventId: string) {\n    return await this.prisma.event.findUnique({\n      where: {\n        id: eventId,\n      },\n      include: {\n        creator: true,\n        participants: true,\n        eventChat: true,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ICreateEventArgs.html":{"url":"interfaces/ICreateEventArgs.html","title":"interface - ICreateEventArgs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ICreateEventArgs\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event/event.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            creatorUsername\n                                        \n                                \n                                \n                                        \n                                            date\n                                        \n                                \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            location\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        creatorUsername\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        creatorUsername:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        location\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        location:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { Log, Prisma, Event, EventChat } from '@prisma/client';\nimport { PrismaService } from '../prisma/prisma.service';\ninterface ICreateEventArgs {\n  name: string;\n  description: string;\n  location: string;\n  date: Date;\n  creatorUsername: string;\n}\ninterface IAddParticipantArgs {\n  eventId: string;\n  username: string;\n}\n@Injectable()\nexport class EventService {\n  constructor(\n    private readonly logger: Logger, // initialize logger instance\n    private readonly prisma: PrismaService, // initialize prisma instance:\n  ) {}\n\n  async createEvent(\n    data: ICreateEventArgs,\n  ): Promise {\n    this.logger.log('createEvent()');\n    const event = await this.prisma.event.create({\n      data: {\n        name: data.name,\n        description: data.description,\n        date: data.date,\n        location: data.location,\n        creator: {\n          connectOrCreate: {\n            where: {\n              username: data.creatorUsername,\n            },\n            create: {\n              username: data.creatorUsername,\n              email: data.creatorUsername,\n            },\n          },\n        },\n      },\n    });\n    const eventChat = await this.prisma.eventChat.create({\n      data: {\n        event: {\n          connect: {\n            id: event.id,\n          },\n        },\n      },\n    });\n    return { event, eventChat };\n  }\n\n  async addPaticipantToEvent(data: IAddParticipantArgs) {\n    // TODO\n    const { eventId, username } = data;\n\n    const paticipan = await this.prisma.event.update({\n      where: {\n        id: eventId,\n      },\n      data: {\n        participants: {\n          connect: {\n            id: username,\n          },\n        },\n      },\n    });\n    return paticipan;\n  }\n\n  async removePaticipantToEvent(data: IAddParticipantArgs) {\n    // TODO\n    const { eventId, username } = data;\n\n    const paticipan = await this.prisma.event.update({\n      where: {\n        id: eventId,\n      },\n      data: {\n        participants: {\n          disconnect: {\n            id: username,\n          },\n        },\n      },\n    });\n    return paticipan;\n  }\n\n  async getEventById(eventId: string) {\n    return await this.prisma.event.findUnique({\n      where: {\n        id: eventId,\n      },\n      include: {\n        creator: true,\n        participants: true,\n        eventChat: true,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISendMessageToChatArgs.html":{"url":"interfaces/ISendMessageToChatArgs.html","title":"interface - ISendMessageToChatArgs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ISendMessageToChatArgs\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/message/message.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            date\n                                        \n                                \n                                \n                                        \n                                            eventChatId\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            senderName\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        eventChatId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        eventChatId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        senderName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        senderName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, ForbiddenException } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { Message, Prisma } from '@prisma/client';\ninterface ISendMessageToChatArgs {\n  senderName: string;\n  message: string;\n  eventChatId: string;\n  date: Date;\n}\n@Injectable()\nexport class MessageService {\n  constructor(private prisma: PrismaService) {}\n\n  async Message(\n    MessageWhereUniqueInput: Prisma.MessageWhereUniqueInput,\n  ): Promise {\n    return this.prisma.message.findUnique({\n      where: MessageWhereUniqueInput,\n    });\n  }\n\n  async Messages(params: {\n    skip?: number;\n    take?: number;\n    cursor?: Prisma.MessageWhereUniqueInput;\n    where?: Prisma.MessageWhereInput;\n    orderBy?: Prisma.MessageOrderByWithRelationInput;\n  }): Promise {\n    const { skip, take, cursor, where, orderBy } = params;\n    return this.prisma.message.findMany({\n      skip,\n      take,\n      cursor,\n      where,\n      orderBy,\n    });\n  }\n\n  async createMessage(data: Prisma.MessageCreateInput): Promise {\n    return this.prisma.message.create({\n      data,\n    });\n  }\n\n  async updateMessage(params: {\n    where: Prisma.MessageWhereUniqueInput;\n    data: Prisma.MessageUpdateInput;\n  }): Promise {\n    const { where, data } = params;\n    return this.prisma.message.update({\n      data,\n      where,\n    });\n  }\n\n  async deleteMessage(where: Prisma.MessageWhereUniqueInput): Promise {\n    return this.prisma.message.delete({\n      where,\n    });\n  }\n  async sentMessageToEventChatByEventChatId(params: ISendMessageToChatArgs) {\n    const { eventChatId, message, senderName, date } = params;\n    console.log(eventChatId);\n    const res = this.prisma.message\n      .create({\n        data: {\n          senderName: senderName,\n          message: message,\n          date: new Date(),\n          EventChat: {\n            connect: {\n              id: eventChatId,\n            },\n          },\n          // eventChatId: eventChatId,\n        },\n      })\n      .catch((error) => {\n        if (error instanceof Prisma.PrismaClientKnownRequestError) {\n          console.log(error);\n          if (error.code === 'P2023') {\n            throw new ForbiddenException('Invalid request');\n          }\n          if (error.code === 'P2025') {\n            throw new ForbiddenException('EventChat not found');\n          }\n        }\n        throw error;\n      });\n    return res;\n  }\n\n  async getMessagesByEventChatId(eventChatId: string) {\n    return this.prisma.message\n      .findMany({\n        where: {\n          EventChat: {\n            id: eventChatId,\n          },\n        },\n      })\n      .catch((error) => {\n        if (error instanceof Prisma.PrismaClientKnownRequestError) {\n          console.log(error);\n          if (error.code === 'P2023') {\n            throw new ForbiddenException('Invalid request');\n          }\n          if (error.code === 'P2025') {\n            throw new ForbiddenException('EventChat not found');\n          }\n        }\n        throw error;\n      });\n    // return this.prisma.event.findUnique({\n    //   where: {\n    //     id: '632206416ff5a339f41fc89d',\n    //   },\n    //   include: {\n    //     eventChat: {\n    //       include: {\n    //         messages: true,\n    //       },\n    //     },\n    //   },\n    // });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUpdateProfileParamsArgs.html":{"url":"interfaces/IUpdateProfileParamsArgs.html","title":"interface - IUpdateProfileParamsArgs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUpdateProfileParamsArgs\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            updateParams\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        updateParams\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updateParams:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, ForbiddenException } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { User, Prisma } from '@prisma/client';\ninterface IUpdateProfileParamsArgs {\n  updateParams: {\n    name?: string;\n    surname?: string;\n    bio?: string;\n  };\n  username: string;\n}\n@Injectable()\nexport class UserService {\n  constructor(private readonly prisma: PrismaService) {}\n  getData(): { message: string } {\n    return { message: 'Welcome to backend!' };\n  }\n\n  async user(\n    userWhereUniqueInput: Prisma.UserWhereUniqueInput,\n    // includeInput: Prisma.UserInclude | null = null,\n  ): Promise> {\n    return this.prisma.user.findUnique({\n      where: userWhereUniqueInput,\n      // include: includeInput,\n    });\n  }\n\n  async users(params: {\n    skip?: number;\n    take?: number;\n    cursor?: Prisma.UserWhereUniqueInput;\n    where?: Prisma.UserWhereInput;\n    orderBy?: Prisma.UserOrderByWithRelationInput;\n  }): Promise {\n    const { skip, take, cursor, where, orderBy } = params;\n    return this.prisma.user.findMany({\n      skip,\n      take,\n      cursor,\n      where,\n      orderBy,\n    });\n  }\n\n  async createUser(data: Prisma.UserCreateInput): Promise {\n    return this.prisma.user\n      .create({\n        data,\n      })\n      .catch((error) => {\n        if (error instanceof Prisma.PrismaClientKnownRequestError) {\n          if (error.code === 'P2002') {\n            throw new ForbiddenException('Credentials incorrect');\n          }\n        }\n        throw error;\n      });\n  }\n\n  async updateUser(params: {\n    where: Prisma.UserWhereUniqueInput;\n    data: Prisma.UserUpdateInput;\n  }): Promise {\n    const { where, data } = params;\n    return this.prisma.user.update({\n      data,\n      where,\n    });\n  }\n\n  async updateProfile(args: IUpdateProfileParamsArgs) {\n    const { username, updateParams } = args;\n    return this.prisma.user.update({\n      where: {\n        username: username,\n      },\n      data: {\n        profile: {\n          update: updateParams,\n        },\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/jwt-auth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guard/jwt-auth.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guard/jwt-auth.guard.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err, user, info)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guard/jwt-auth.guard.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { UserService } from '../../user/user.service';\nimport { Reflector } from '@nestjs/core';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n  canActivate(context: ExecutionContext) {\n    // Add your custom authentication logic here\n    // for example, call super.logIn(request) to establish a session.\n\n    // const isPublic = this.reflector.getAllAndOverride('isPublic', [\n    //   context.getHandler(),\n    //   context.getClass(),\n    // ]);\n\n    // if (isPublic) return true;\n\n    // return super.canActivate(context);\n\n    return super.canActivate(context);\n  }\n\n  handleRequest(err, user, info) {\n    // console.log(user);\n    // You can throw an exception based on either \"info\" or \"err\" arguments\n    if (err || !user) {\n      throw err || new UnauthorizedException();\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuardGraphql.html":{"url":"injectables/JwtAuthGuardGraphql.html","title":"injectable - JwtAuthGuardGraphql","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuardGraphql\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/jwt-auth-graphql.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                getRequest\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guard/jwt-auth-graphql.guard.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guard/jwt-auth-graphql.guard.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRequest\n                        \n                    \n                \n            \n            \n                \ngetRequest(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guard/jwt-auth-graphql.guard.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err, user, info)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guard/jwt-auth-graphql.guard.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { UserService } from '../../user/user.service';\nimport { Reflector } from '@nestjs/core';\nimport { GqlExecutionContext } from '@nestjs/graphql';\n\n@Injectable()\nexport class JwtAuthGuardGraphql extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n  canActivate(context: ExecutionContext) {\n    // Add your custom authentication logic here\n    // for example, call super.logIn(request) to establish a session.\n\n    // const isPublic = this.reflector.getAllAndOverride('isPublic', [\n    //   context.getHandler(),\n    //   context.getClass(),\n    // ]);\n\n    // if (isPublic) return true;\n\n    // return super.canActivate(context);\n    const ctx = GqlExecutionContext.create(context);\n\n    return super.canActivate(context);\n  }\n\n  getRequest(context: ExecutionContext) {\n    const ctx = GqlExecutionContext.create(context);\n    return ctx.getContext().req;\n  }\n\n  handleRequest(err, user, info) {\n    // console.log(user);\n    // You can throw an exception based on either \"info\" or \"err\" arguments\n    if (err || !user) {\n      throw err || new UnauthorizedException();\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/interface/jwtPayload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            exp\n                                        \n                                \n                                \n                                        \n                                            iat\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        exp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        exp:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        iat\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        iat:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n  sub: string;\n  userId: string;\n  iat: number;\n  exp: number;\n}\nexport interface JwtPayloadWithRt extends JwtPayload {\n  refreshToken: string;\n}\nexport interface JwtPayloadForSign {\n  sub: number;\n  username: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayloadForSign.html":{"url":"interfaces/JwtPayloadForSign.html","title":"interface - JwtPayloadForSign","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayloadForSign\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/interface/jwtPayload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            sub\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n  sub: string;\n  userId: string;\n  iat: number;\n  exp: number;\n}\nexport interface JwtPayloadWithRt extends JwtPayload {\n  refreshToken: string;\n}\nexport interface JwtPayloadForSign {\n  sub: number;\n  username: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayloadWithRt.html":{"url":"interfaces/JwtPayloadWithRt.html","title":"interface - JwtPayloadWithRt","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayloadWithRt\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/interface/jwtPayload.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        JwtPayload\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            refreshToken\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        refreshToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refreshToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n  sub: string;\n  userId: string;\n  iat: number;\n  exp: number;\n}\nexport interface JwtPayloadWithRt extends JwtPayload {\n  refreshToken: string;\n}\nexport interface JwtPayloadForSign {\n  sub: number;\n  username: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategy/jwt.at.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, configService: ConfigService, authService: AuthService, redisService: RedisService, logger: LoggerService, prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategy/jwt.at.strategy.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        redisService\n                                                  \n                                                        \n                                                                    RedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategy/jwt.at.strategy.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy, Inject } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { UserService } from '../../user/user.service';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtPayload } from '../../types';\nimport { AuthService } from '../auth.service';\nimport { LoggerService } from '../../logger/logger.service';\n// import { TripleDesDecryptPayload, tokenType } from ;\nimport { tokenType, TripleDesDecryptPayload } from '../auth.processor.types';\nimport { RedisService } from '@liaoliaots/nestjs-redis';\nimport { PrismaService } from '../../prisma/prisma.service';\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor(\n    private readonly userService: UserService,\n    private readonly configService: ConfigService,\n    private readonly authService: AuthService,\n    private readonly redisService: RedisService,\n    private readonly logger: LoggerService, // @Inject(CACHE_MANAGER) private readonly cacheManager: Cache,\n    private readonly prisma: PrismaService,\n  ) {\n    const extractJwtFromCookie = (req) => {\n      let token = null;\n      if (req && req.signedCookies) {\n        token = req.signedCookies['jwt-accestoken'];\n      }\n      return ExtractJwt.fromAuthHeaderAsBearerToken()(req);\n    };\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      // jwtFromRequest: extractJwtFromCookie,\n      ignoreExpiration: false,\n      secretOrKey: configService.get('jwtKey.at_publicKey'),\n    });\n    this.redis = this.redisService.getClient();\n  }\n\n  async validate(payload: JwtPayload): Promise {\n    if (!payload) {\n      return false;\n    }\n    const cached = await this.redis.get(payload.sub);\n    if (cached) {\n      this.logger.log('Cached user found: ' + cached, 'Cache');\n      payload.userId = cached;\n\n      return payload;\n    }\n\n    // const username = await this.authService.decryptJwtPayload({\n    //   data: payload.userId,\n    //   type: tokenType.accessToken,\n    // });\n    // const user = (await this.userService.user(\n    //   { username: username },\n    //   { Hashed: true },\n    // )) as any;\n    const user = await this.prisma.userHashedData.findUnique({\n      where: {\n        id: payload.sub,\n      },\n    });\n    // console.log(user);\n    if (!user || !user.hashedRt) {\n      return false;\n    }\n    // await this.redis.set(payload.userId, user.userId, 'EX', 3);\n    await this.redis.set(payload.sub, user.userId, 'EX', 3);\n\n    payload.userId = user.userId;\n    return payload;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerMiddleware.html":{"url":"injectables/LoggerMiddleware.html","title":"injectable - LoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/logger.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/logger/logger.middleware.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/logger.middleware.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\nimport { LoggerService } from './logger.service';\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n  constructor(private readonly logger: LoggerService) {}\n  use(req: Request, res: Response, next: NextFunction): void {\n    this.logger.http(req);\n\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LoggerModule.html":{"url":"modules/LoggerModule.html","title":"module - LoggerModule","body":"\n                   \n\n\n\n\n    Modules\n    LoggerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_imports\n\n\n\ncluster_LoggerModule_exports\n\n\n\ncluster_LoggerModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nLoggerModule\n\nLoggerModule\n\nLoggerModule -->\n\nPrismaModule->LoggerModule\n\n\n\n\n\nLoggerMiddleware \n\nLoggerMiddleware \n\nLoggerMiddleware  -->\n\nLoggerModule->LoggerMiddleware \n\n\n\n\n\nLoggerService \n\nLoggerService \n\nLoggerService  -->\n\nLoggerModule->LoggerService \n\n\n\n\n\nLoggerMiddleware\n\nLoggerMiddleware\n\nLoggerModule -->\n\nLoggerMiddleware->LoggerModule\n\n\n\n\n\nLoggerService\n\nLoggerService\n\nLoggerModule -->\n\nLoggerService->LoggerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/logger/logger.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Logger Module for reuse Logger service provider.\nimport providers from all childs module in project.\nNestJS Recommended to exports Service then import it as module in another module.\n @warning Only morgan.middleware and Logger in main.ts that directly use Logger\nfrom NestJs because It not under the NestJS Module.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            LoggerMiddleware\n                        \n                        \n                            LoggerService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            LoggerMiddleware\n                        \n                        \n                            LoggerService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, Logger, Global } from '@nestjs/common';\nimport { LoggerService } from './logger.service';\nimport { LoggerMiddleware } from './logger.middleware';\nimport { PrismaModule } from '../prisma/prisma.module';\n/**\n * Logger Module for reuse Logger service provider.\n * @warning Don't direct use logger from nestJS, because it will get duplicated\n * import providers from all childs module in project.\n * `NestJS Recommended to exports Service then import it as module in another module.`\n *  @warning Only `morgan.middleware` and `Logger` in main.ts that directly use Logger\n * from NestJs because It not under the NestJS Module.\n * @providers `LoggerService`,`Logger`\n * @exports `LoggerService`\n */\n@Global()\n@Module({\n  imports: [PrismaModule],\n  controllers: [],\n  providers: [LoggerService, LoggerMiddleware, Logger],\n  exports: [LoggerService, LoggerMiddleware],\n})\nexport class LoggerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerService.html":{"url":"injectables/LoggerService.html","title":"injectable - LoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/logger.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Logger Service Wrapped from nestJS logger.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                createLog\n                            \n                            \n                                debug\n                            \n                            \n                                error\n                            \n                            \n                                http\n                            \n                            \n                                log\n                            \n                            \n                                verbose\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: Logger, prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/logger/logger.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        createLog\n                        \n                    \n                \n            \n            \n                \n                    \n                    createLog(data: Prisma.LogCreateInput)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/logger.service.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Prisma.LogCreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n            \n                \ndebug(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/logger.service.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: string, stack?: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/logger.service.ts:40\n                \n            \n\n\n            \n                \n                     Write a error level log.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        message message for log.\n\n                                    \n                                \n                                \n                                    stack\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        stackTrace for information.\n\n                                    \n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        context for log.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        http\n                        \n                    \n                \n            \n            \n                \nhttp(request: any)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/logger.service.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/logger.service.ts:23\n                \n            \n\n\n            \n                \n                    Write a log level log.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        message for log.\n\n                                    \n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        context for log.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verbose\n                        \n                    \n                \n            \n            \n                \nverbose(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/logger.service.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n            \n                \nwarn(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/logger.service.ts:55\n                \n            \n\n\n            \n                \n                    Write a warn level log.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        message message for log.\n\n                                    \n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        context for log.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { Log, Prisma } from '@prisma/client';\nimport { PrismaService } from '../prisma/prisma.service';\n// import { Request } from 'Express';\n/**\n * Logger Service Wrapped from nestJS logger.\n * @method `log`\n * @method `error`\n * @method `warn`\n */\n@Injectable()\nexport class LoggerService {\n  constructor(\n    private readonly logger: Logger, // initialize logger instance\n    private readonly prisma: PrismaService, // initialize prisma instance:\n  ) {}\n\n  /**\n   * Write a `log` level log.\n   * @param message message for log.\n   * @param context context for log.\n   */\n  log(message: string, context?: string): void {\n    context = context || 'No context';\n    this.logger.log(message, context);\n    this.createLog({\n      level: 'log',\n      message: message,\n      context: context,\n      timestamp: new Date(),\n    });\n  }\n\n  /**\n   *  Write a `error` level log.\n   * @param message message message for log.\n   * @param stack   stackTrace for information.\n   * @param context context for log.\n   */\n  error(message: string, stack?: string, context?: string): void {\n    context = context || 'No context';\n    this.logger.error(message, stack, context);\n    this.createLog({\n      level: 'error',\n      message: message,\n      context: context,\n      timestamp: new Date(),\n    });\n  }\n  /**\n   * Write a `warn` level log.\n   * @param message message message for log.\n   * @param context context for log.\n   */\n  warn(message: string, context?: string): void {\n    context = context || 'No context';\n    this.logger.warn(message, context);\n    this.createLog({\n      level: 'warn',\n      message: message,\n      context: context,\n      timestamp: new Date(),\n    });\n  }\n\n  debug(message: string, context?: string): void {\n    context = context || 'No context';\n    this.logger.debug(message, context);\n    this.createLog({\n      level: 'debug',\n      message: message,\n      context: context,\n      timestamp: new Date(),\n    });\n  }\n  verbose(message: string, context?: string): void {\n    context = context || 'No context';\n    this.logger.verbose(message, context);\n    this.createLog({\n      level: 'verbose',\n      message: message,\n      context: context,\n      timestamp: new Date(),\n    });\n  }\n  http(request: any): void {\n    this.log(\n      `${request.method} ${request.url} - {${request.headers['user-agent']}} - ${request.ip} ${request.protocol}/${request.httpVersion}`,\n      'HttpRequest',\n    );\n  }\n\n  private async createLog(data: Prisma.LogCreateInput): Promise {\n    return this.prisma.log.create({\n      data: {\n        ...data,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Message.html":{"url":"classes/Message.html","title":"class - Message","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Message\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/message/message.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _id\n                            \n                            \n                                date\n                            \n                            \n                                message\n                            \n                            \n                                    Optional\n                                sender_id\n                            \n                            \n                                    Optional\n                                senderName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => ID)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/message/message.model.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => Date)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/message/message.model.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => String, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/message/message.model.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        sender_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => String, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/message/message.model.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        senderName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => String, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/message/message.model.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, Int, ObjectType, ID } from '@nestjs/graphql';\n\n@ObjectType()\nexport class Message {\n  @Field((type) => ID)\n  _id: string;\n\n  @Field((type) => String, { nullable: true })\n  sender_id?: number;\n\n  @Field((type) => String, { nullable: true })\n  senderName?: string;\n\n  @Field((type) => String, { nullable: true })\n  message: string;\n\n  @Field((type) => Date)\n  date: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MessageController.html":{"url":"controllers/MessageController.html","title":"controller - MessageController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MessageController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/message/message.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                message\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getMessagesByEventId\n                            \n                            \n                                    Async\n                                sendMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getMessagesByEventId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMessagesByEventId(args: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/getMessagesByEventId')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/message/message.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendMessage(args: SendMessageToChatDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/sendMessageToChat')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/message/message.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                SendMessageToChatDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  UseGuards,\n  Req,\n  Get,\n  Body,\n  UsePipes,\n  ValidationPipe,\n  Res,\n  HttpCode,\n} from '@nestjs/common';\nimport { MessageService } from './message.service';\ninterface SendMessageToChatDto {\n  senderName: string;\n  message: string;\n  eventChatId: string;\n  date: string;\n}\n@Controller('message')\nexport class MessageController {\n  constructor(private messageService: MessageService) {}\n\n  @Post('/sendMessageToChat')\n  @HttpCode(200)\n  async sendMessage(@Body() args: SendMessageToChatDto): Promise {\n    const date = new Date(args.date);\n    return this.messageService.sentMessageToEventChatByEventChatId({\n      senderName: args.senderName,\n      message: args.message,\n      eventChatId: args.eventChatId,\n      date: date,\n    });\n  }\n\n  @Get('/getMessagesByEventId')\n  @HttpCode(200)\n  async getMessagesByEventId(@Body() args: { eventId: string }): Promise {\n    return this.messageService.getMessagesByEventChatId(args.eventId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MessageModule.html":{"url":"modules/MessageModule.html","title":"module - MessageModule","body":"\n                   \n\n\n\n\n    Modules\n    MessageModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MessageModule\n\n\n\ncluster_MessageModule_providers\n\n\n\n\nMessageService\n\nMessageService\n\n\n\nMessageModule\n\nMessageModule\n\nMessageModule -->\n\nMessageService->MessageModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/message/message.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MessageService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MessageController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, CacheInterceptor } from '@nestjs/common';\nimport { MessageResolver } from './message.resolver';\nimport { MessageService } from './message.service';\nimport { MessageController } from './message.controller';\n@Module({\n  imports: [],\n  controllers: [MessageController],\n  providers: [MessageService, MessageResolver],\n  exports: [],\n})\nexport class MessageModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MessageResolver.html":{"url":"classes/MessageResolver.html","title":"class - MessageResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MessageResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/message/message.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getMessage\n                            \n                            \n                                messageAdded\n                            \n                            \n                                    Async\n                                saveMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(msgSservice: MessageService)\n                    \n                \n                        \n                            \n                                Defined in src/message/message.resolver.ts:44\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        msgSservice\n                                                  \n                                                        \n                                                                        MessageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMessage(getMessageInput: GetMessageInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(returns => )\n                \n            \n\n            \n                \n                    Defined in src/message/message.resolver.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    getMessageInput\n                                    \n                                                GetMessageInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        messageAdded\n                        \n                    \n                \n            \n            \n                \nmessageAdded()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Subscription(returns => Message)\n                \n            \n\n            \n                \n                    Defined in src/message/message.resolver.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveMessage(saveMessageData: SaveMessageInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(returns => Message)\n                \n            \n\n            \n                \n                    Defined in src/message/message.resolver.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    saveMessageData\n                                    \n                                                SaveMessageInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Field,\n  Int,\n  ObjectType,\n  Resolver,\n  Query,\n  Args,\n  ResolveField,\n  Parent,\n  Mutation,\n  InputType,\n  Subscription,\n} from '@nestjs/graphql';\nimport { PubSub } from 'graphql-subscriptions';\nimport { Message } from './message.model';\nimport { MessageService } from './message.service';\nimport { UseGuards } from '@nestjs/common';\nimport { JwtAuthGuardGraphql } from '../auth/guard/jwt-auth-graphql.guard';\nimport { Prisma } from '@prisma/client';\n\n@InputType()\nexport class GetMessageInput {\n  @Field((type) => Int, { nullable: true, defaultValue: 0 })\n  offset?: number;\n  @Field((type) => Int, { nullable: true, defaultValue: 20 })\n  limit?: number;\n  @Field((type) => String, { nullable: true })\n  eventChatId: string;\n}\n@InputType()\nexport class SaveMessageInput {\n  // @Field()\n  //   sender_id: string;\n  @Field()\n  senderName: string;\n  @Field()\n  message: string;\n  @Field((type) => String, { nullable: true })\n  eventChatId: string;\n}\nconst pubSub = new PubSub();\n\n@Resolver((of) => Message)\nexport class MessageResolver {\n  constructor(private readonly msgSservice: MessageService) {}\n\n  // @UseGuards(JwtAuthGuardGraphql)\n  @Query((returns) => [Message])\n  async getMessage(@Args('getMessageInput') getMessageInput: GetMessageInput) {\n    const data = await this.msgSservice.Messages({\n      skip: getMessageInput.offset,\n      take: getMessageInput.limit,\n      where: {\n        EventChat: {\n          id: getMessageInput.eventChatId,\n        },\n      },\n      orderBy: {\n        date: 'desc',\n      },\n    });\n    console.log(data);\n    return data;\n  }\n  // @UseGuards(JwtAuthGuardGraphql)\n  @Mutation((returns) => Message)\n  async saveMessage(\n    @Args('saveMessageData') saveMessageData: SaveMessageInput,\n  ) {\n    console.log(saveMessageData);\n    const preData: Prisma.MessageCreateInput = {\n      senderName: saveMessageData.senderName,\n      message: saveMessageData.message,\n      EventChat: {\n        connect: {\n          id: saveMessageData.eventChatId,\n        },\n      },\n    };\n    const data = await this.msgSservice.createMessage(preData);\n    pubSub.publish('messageAdded', { messageAdded: data });\n\n    return data;\n  }\n  //   @ResolveField()\n  //   async posts(@Parent() author: Message) {\n  //     const { id } = author;\n  //     return this.postsService.findAll({ authorId: id });\n  //   }\n\n  @Subscription((returns) => Message)\n  messageAdded() {\n    return pubSub.asyncIterator('messageAdded');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MessageService.html":{"url":"injectables/MessageService.html","title":"injectable - MessageService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MessageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/message/message.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createMessage\n                            \n                            \n                                    Async\n                                deleteMessage\n                            \n                            \n                                    Async\n                                getMessagesByEventChatId\n                            \n                            \n                                    Async\n                                Message\n                            \n                            \n                                    Async\n                                Messages\n                            \n                            \n                                    Async\n                                sentMessageToEventChatByEventChatId\n                            \n                            \n                                    Async\n                                updateMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/message/message.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    createMessage(data: Prisma.MessageCreateInput)\n                \n            \n\n\n            \n                \n                    Defined in src/message/message.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                Prisma.MessageCreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteMessage(where: Prisma.MessageWhereUniqueInput)\n                \n            \n\n\n            \n                \n                    Defined in src/message/message.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    where\n                                    \n                                                Prisma.MessageWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getMessagesByEventChatId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMessagesByEventChatId(eventChatId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/message/message.service.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    eventChatId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        Message\n                        \n                    \n                \n            \n            \n                \n                    \n                    Message(MessageWhereUniqueInput: Prisma.MessageWhereUniqueInput)\n                \n            \n\n\n            \n                \n                    Defined in src/message/message.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    MessageWhereUniqueInput\n                                    \n                                                Prisma.MessageWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        Messages\n                        \n                    \n                \n            \n            \n                \n                    \n                    Messages(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/message/message.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sentMessageToEventChatByEventChatId\n                        \n                    \n                \n            \n            \n                \n                    \n                    sentMessageToEventChatByEventChatId(params: ISendMessageToChatArgs)\n                \n            \n\n\n            \n                \n                    Defined in src/message/message.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                ISendMessageToChatArgs\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateMessage(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/message/message.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ForbiddenException } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { Message, Prisma } from '@prisma/client';\ninterface ISendMessageToChatArgs {\n  senderName: string;\n  message: string;\n  eventChatId: string;\n  date: Date;\n}\n@Injectable()\nexport class MessageService {\n  constructor(private prisma: PrismaService) {}\n\n  async Message(\n    MessageWhereUniqueInput: Prisma.MessageWhereUniqueInput,\n  ): Promise {\n    return this.prisma.message.findUnique({\n      where: MessageWhereUniqueInput,\n    });\n  }\n\n  async Messages(params: {\n    skip?: number;\n    take?: number;\n    cursor?: Prisma.MessageWhereUniqueInput;\n    where?: Prisma.MessageWhereInput;\n    orderBy?: Prisma.MessageOrderByWithRelationInput;\n  }): Promise {\n    const { skip, take, cursor, where, orderBy } = params;\n    return this.prisma.message.findMany({\n      skip,\n      take,\n      cursor,\n      where,\n      orderBy,\n    });\n  }\n\n  async createMessage(data: Prisma.MessageCreateInput): Promise {\n    return this.prisma.message.create({\n      data,\n    });\n  }\n\n  async updateMessage(params: {\n    where: Prisma.MessageWhereUniqueInput;\n    data: Prisma.MessageUpdateInput;\n  }): Promise {\n    const { where, data } = params;\n    return this.prisma.message.update({\n      data,\n      where,\n    });\n  }\n\n  async deleteMessage(where: Prisma.MessageWhereUniqueInput): Promise {\n    return this.prisma.message.delete({\n      where,\n    });\n  }\n  async sentMessageToEventChatByEventChatId(params: ISendMessageToChatArgs) {\n    const { eventChatId, message, senderName, date } = params;\n    console.log(eventChatId);\n    const res = this.prisma.message\n      .create({\n        data: {\n          senderName: senderName,\n          message: message,\n          date: new Date(),\n          EventChat: {\n            connect: {\n              id: eventChatId,\n            },\n          },\n          // eventChatId: eventChatId,\n        },\n      })\n      .catch((error) => {\n        if (error instanceof Prisma.PrismaClientKnownRequestError) {\n          console.log(error);\n          if (error.code === 'P2023') {\n            throw new ForbiddenException('Invalid request');\n          }\n          if (error.code === 'P2025') {\n            throw new ForbiddenException('EventChat not found');\n          }\n        }\n        throw error;\n      });\n    return res;\n  }\n\n  async getMessagesByEventChatId(eventChatId: string) {\n    return this.prisma.message\n      .findMany({\n        where: {\n          EventChat: {\n            id: eventChatId,\n          },\n        },\n      })\n      .catch((error) => {\n        if (error instanceof Prisma.PrismaClientKnownRequestError) {\n          console.log(error);\n          if (error.code === 'P2023') {\n            throw new ForbiddenException('Invalid request');\n          }\n          if (error.code === 'P2025') {\n            throw new ForbiddenException('EventChat not found');\n          }\n        }\n        throw error;\n      });\n    // return this.prisma.event.findUnique({\n    //   where: {\n    //     id: '632206416ff5a339f41fc89d',\n    //   },\n    //   include: {\n    //     eventChat: {\n    //       include: {\n    //         messages: true,\n    //       },\n    //     },\n    //   },\n    // });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_PrismaModule_exports\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, Global } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Global()\n@Module({\n  imports: [],\n  controllers: [],\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { INestApplication, Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  async onModuleInit(): Promise {\n    await this.$connect();\n  }\n\n  async enableShutdownHooks(app: INestApplication): Promise {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QueueDatabaseConfig.html":{"url":"interfaces/QueueDatabaseConfig.html","title":"interface - QueueDatabaseConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  QueueDatabaseConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/interface/queueDatabaseConfig.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            host\n                                        \n                                \n                                \n                                        \n                                            port\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        host\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        host:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        port:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface QueueDatabaseConfig {\n  host: string;\n  port: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RemoveParticipantDto.html":{"url":"classes/RemoveParticipantDto.html","title":"class - RemoveParticipantDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RemoveParticipantDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event/dto/participant.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AddAndRemoveParticipantDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                eventId\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        eventId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         AddAndRemoveParticipantDto\n\n                            \n                        \n                    \n                        \n                                Defined in         AddAndRemoveParticipantDto:5\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         AddAndRemoveParticipantDto\n\n                            \n                        \n                    \n                        \n                                Defined in         AddAndRemoveParticipantDto:7\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nclass AddAndRemoveParticipantDto {\n  @ApiProperty()\n  eventId: string;\n  @ApiProperty()\n  username: string;\n}\n\nexport class AddParticipantDto extends AddAndRemoveParticipantDto {}\nexport class RemoveParticipantDto extends AddAndRemoveParticipantDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RtGuard.html":{"url":"classes/RtGuard.html","title":"class - RtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/rt.guard.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guard/rt.guard.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err, user, info)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guard/rt.guard.ts:22\n                \n            \n\n\n            \n                \n                    should cast any type no matter what , this methods use generic .\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\nexport class RtGuard extends AuthGuard('jwt-refresh') {\n  canActivate(context: ExecutionContext) {\n    // Add your custom authentication logic here\n    // for example, call super.logIn(request) to establish a session.\n\n    return super.canActivate(context);\n  }\n  /**\n   * should cast any type no matter what , this methods use generic .\n   * @param err\n   * @param user\n   * @param info\n   * @returns\n   */\n  handleRequest(err, user, info) {\n    // You can throw an exception based on either \"info\" or \"err\" arguments\n\n    if (err || !user) {\n      throw err || new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RtStrategy.html":{"url":"injectables/RtStrategy.html","title":"injectable - RtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategy/jwt.rt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategy/jwt.rt.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(req: Request, payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategy/jwt.rt.strategy.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         JwtPayloadWithRt\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { Request } from 'express';\nimport { ForbiddenException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtPayload, JwtPayloadWithRt } from '../../types';\n\n@Injectable()\nexport class RtStrategy extends PassportStrategy(Strategy, 'jwt-refresh') {\n  constructor(private readonly configService: ConfigService) {\n    const extractJwtFromCookie = (req) => {\n      let token = null;\n      if (req && req.signedCookies) {\n        token = req.signedCookies['jwt-refreshtoken'];\n      }\n      return token || ExtractJwt.fromAuthHeaderAsBearerToken()(req);\n    };\n    super({\n      // jwtFromRequest: extractJwtFromCookie,\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: configService.get('jwtKey.rt_publicKey'),\n      passReqToCallback: true,\n      ignoreExpiration: false,\n    });\n  }\n\n  validate(req: Request, payload: JwtPayload): JwtPayloadWithRt {\n    const refreshToken = req\n      ?.get('authorization')\n      ?.replace('Bearer', '')\n      .trim();\n    // console.log('refreshToken', access_token); // running before guard\n\n    if (!refreshToken) throw new ForbiddenException('Refresh token malformed');\n\n    return {\n      ...payload,\n      refreshToken,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SaveMessageInput.html":{"url":"classes/SaveMessageInput.html","title":"class - SaveMessageInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SaveMessageInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/message/message.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                eventChatId\n                            \n                            \n                                message\n                            \n                            \n                                senderName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        eventChatId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => String, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/message/message.resolver.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/message/message.resolver.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        senderName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/message/message.resolver.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Field,\n  Int,\n  ObjectType,\n  Resolver,\n  Query,\n  Args,\n  ResolveField,\n  Parent,\n  Mutation,\n  InputType,\n  Subscription,\n} from '@nestjs/graphql';\nimport { PubSub } from 'graphql-subscriptions';\nimport { Message } from './message.model';\nimport { MessageService } from './message.service';\nimport { UseGuards } from '@nestjs/common';\nimport { JwtAuthGuardGraphql } from '../auth/guard/jwt-auth-graphql.guard';\nimport { Prisma } from '@prisma/client';\n\n@InputType()\nexport class GetMessageInput {\n  @Field((type) => Int, { nullable: true, defaultValue: 0 })\n  offset?: number;\n  @Field((type) => Int, { nullable: true, defaultValue: 20 })\n  limit?: number;\n  @Field((type) => String, { nullable: true })\n  eventChatId: string;\n}\n@InputType()\nexport class SaveMessageInput {\n  // @Field()\n  //   sender_id: string;\n  @Field()\n  senderName: string;\n  @Field()\n  message: string;\n  @Field((type) => String, { nullable: true })\n  eventChatId: string;\n}\nconst pubSub = new PubSub();\n\n@Resolver((of) => Message)\nexport class MessageResolver {\n  constructor(private readonly msgSservice: MessageService) {}\n\n  // @UseGuards(JwtAuthGuardGraphql)\n  @Query((returns) => [Message])\n  async getMessage(@Args('getMessageInput') getMessageInput: GetMessageInput) {\n    const data = await this.msgSservice.Messages({\n      skip: getMessageInput.offset,\n      take: getMessageInput.limit,\n      where: {\n        EventChat: {\n          id: getMessageInput.eventChatId,\n        },\n      },\n      orderBy: {\n        date: 'desc',\n      },\n    });\n    console.log(data);\n    return data;\n  }\n  // @UseGuards(JwtAuthGuardGraphql)\n  @Mutation((returns) => Message)\n  async saveMessage(\n    @Args('saveMessageData') saveMessageData: SaveMessageInput,\n  ) {\n    console.log(saveMessageData);\n    const preData: Prisma.MessageCreateInput = {\n      senderName: saveMessageData.senderName,\n      message: saveMessageData.message,\n      EventChat: {\n        connect: {\n          id: saveMessageData.eventChatId,\n        },\n      },\n    };\n    const data = await this.msgSservice.createMessage(preData);\n    pubSub.publish('messageAdded', { messageAdded: data });\n\n    return data;\n  }\n  //   @ResolveField()\n  //   async posts(@Parent() author: Message) {\n  //     const { id } = author;\n  //     return this.postsService.findAll({ authorId: id });\n  //   }\n\n  @Subscription((returns) => Message)\n  messageAdded() {\n    return pubSub.asyncIterator('messageAdded');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SendMessageToChatDto.html":{"url":"interfaces/SendMessageToChatDto.html","title":"interface - SendMessageToChatDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SendMessageToChatDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/message/message.controller.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            date\n                                        \n                                \n                                \n                                        \n                                            eventChatId\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            senderName\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        date:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        eventChatId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        eventChatId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        senderName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        senderName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  UseGuards,\n  Req,\n  Get,\n  Body,\n  UsePipes,\n  ValidationPipe,\n  Res,\n  HttpCode,\n} from '@nestjs/common';\nimport { MessageService } from './message.service';\ninterface SendMessageToChatDto {\n  senderName: string;\n  message: string;\n  eventChatId: string;\n  date: string;\n}\n@Controller('message')\nexport class MessageController {\n  constructor(private messageService: MessageService) {}\n\n  @Post('/sendMessageToChat')\n  @HttpCode(200)\n  async sendMessage(@Body() args: SendMessageToChatDto): Promise {\n    const date = new Date(args.date);\n    return this.messageService.sentMessageToEventChatByEventChatId({\n      senderName: args.senderName,\n      message: args.message,\n      eventChatId: args.eventChatId,\n      date: date,\n    });\n  }\n\n  @Get('/getMessagesByEventId')\n  @HttpCode(200)\n  async getMessagesByEventId(@Body() args: { eventId: string }): Promise {\n    return this.messageService.getMessagesByEventChatId(args.eventId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInRequestDto.html":{"url":"classes/SignInRequestDto.html","title":"class - SignInRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty } from 'class-validator';\nimport { ApiProperty, ApiOkResponse } from '@nestjs/swagger';\n\nexport class SignUpDto {\n  @ApiProperty()\n  username: string;\n  @ApiProperty()\n  password: string;\n  @IsEmail()\n  @ApiProperty()\n  email: string;\n  @ApiProperty()\n  @IsNotEmpty()\n  name: string;\n}\nexport class SignInRequestDto {\n  @ApiProperty()\n  username: string;\n  @ApiProperty()\n  password: string;\n}\nexport class TokenDto {\n  @ApiProperty()\n  access_token: string;\n  @ApiProperty()\n  refresh_token: string;\n}\n\nexport class TokenDtoWithUserId extends TokenDto {\n  @ApiProperty()\n  userId: string;\n}\n\nexport class UserFromJwtDto {\n  @ApiProperty()\n  sub: string;\n  @ApiProperty()\n  userId: string;\n  @ApiProperty()\n  iat: number;\n  @ApiProperty()\n  exp: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignUpDto.html":{"url":"classes/SignUpDto.html","title":"class - SignUpDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignUpDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty } from 'class-validator';\nimport { ApiProperty, ApiOkResponse } from '@nestjs/swagger';\n\nexport class SignUpDto {\n  @ApiProperty()\n  username: string;\n  @ApiProperty()\n  password: string;\n  @IsEmail()\n  @ApiProperty()\n  email: string;\n  @ApiProperty()\n  @IsNotEmpty()\n  name: string;\n}\nexport class SignInRequestDto {\n  @ApiProperty()\n  username: string;\n  @ApiProperty()\n  password: string;\n}\nexport class TokenDto {\n  @ApiProperty()\n  access_token: string;\n  @ApiProperty()\n  refresh_token: string;\n}\n\nexport class TokenDtoWithUserId extends TokenDto {\n  @ApiProperty()\n  userId: string;\n}\n\nexport class UserFromJwtDto {\n  @ApiProperty()\n  sub: string;\n  @ApiProperty()\n  userId: string;\n  @ApiProperty()\n  iat: number;\n  @ApiProperty()\n  exp: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenDto.html":{"url":"classes/TokenDto.html","title":"class - TokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                access_token\n                            \n                            \n                                refresh_token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        access_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refresh_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.dto.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty } from 'class-validator';\nimport { ApiProperty, ApiOkResponse } from '@nestjs/swagger';\n\nexport class SignUpDto {\n  @ApiProperty()\n  username: string;\n  @ApiProperty()\n  password: string;\n  @IsEmail()\n  @ApiProperty()\n  email: string;\n  @ApiProperty()\n  @IsNotEmpty()\n  name: string;\n}\nexport class SignInRequestDto {\n  @ApiProperty()\n  username: string;\n  @ApiProperty()\n  password: string;\n}\nexport class TokenDto {\n  @ApiProperty()\n  access_token: string;\n  @ApiProperty()\n  refresh_token: string;\n}\n\nexport class TokenDtoWithUserId extends TokenDto {\n  @ApiProperty()\n  userId: string;\n}\n\nexport class UserFromJwtDto {\n  @ApiProperty()\n  sub: string;\n  @ApiProperty()\n  userId: string;\n  @ApiProperty()\n  iat: number;\n  @ApiProperty()\n  exp: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenDtoWithUserId.html":{"url":"classes/TokenDtoWithUserId.html","title":"class - TokenDtoWithUserId","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenDtoWithUserId\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        TokenDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                userId\n                            \n                            \n                                access_token\n                            \n                            \n                                refresh_token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        access_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         TokenDto\n\n                            \n                        \n                    \n                        \n                                Defined in         TokenDto:24\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refresh_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         TokenDto\n\n                            \n                        \n                    \n                        \n                                Defined in         TokenDto:26\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty } from 'class-validator';\nimport { ApiProperty, ApiOkResponse } from '@nestjs/swagger';\n\nexport class SignUpDto {\n  @ApiProperty()\n  username: string;\n  @ApiProperty()\n  password: string;\n  @IsEmail()\n  @ApiProperty()\n  email: string;\n  @ApiProperty()\n  @IsNotEmpty()\n  name: string;\n}\nexport class SignInRequestDto {\n  @ApiProperty()\n  username: string;\n  @ApiProperty()\n  password: string;\n}\nexport class TokenDto {\n  @ApiProperty()\n  access_token: string;\n  @ApiProperty()\n  refresh_token: string;\n}\n\nexport class TokenDtoWithUserId extends TokenDto {\n  @ApiProperty()\n  userId: string;\n}\n\nexport class UserFromJwtDto {\n  @ApiProperty()\n  sub: string;\n  @ApiProperty()\n  userId: string;\n  @ApiProperty()\n  iat: number;\n  @ApiProperty()\n  exp: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TripleDesDecryptPayload.html":{"url":"interfaces/TripleDesDecryptPayload.html","title":"interface - TripleDesDecryptPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TripleDesDecryptPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.processor.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         tokenType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         tokenType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum tokenType {\n  accessToken = 'accessToken',\n  refreshToken = 'refreshToken',\n}\nexport interface ArgonHashPayload {\n  data: string;\n  options: {\n    hashLength: number;\n  };\n}\n\nexport interface TripleDesDecryptPayload {\n  data: string;\n  type: tokenType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UnAuthorizedResponse.html":{"url":"classes/UnAuthorizedResponse.html","title":"class - UnAuthorizedResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UnAuthorizedResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                message\n                            \n                            \n                                statusCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.controller.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        statusCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.controller.ts:50\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  UseGuards,\n  Req,\n  Get,\n  Body,\n  UsePipes,\n  ValidationPipe,\n  Res,\n  HttpCode,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { JwtAuthGuard } from './guard/jwt-auth.guard';\nimport { RtGuard } from './guard/rt.guard';\nimport {\n  SignUpDto,\n  SignInRequestDto,\n  TokenDto,\n  TokenDtoWithUserId,\n  UserFromJwtDto,\n} from './auth.dto';\nimport { GetCurrentUser } from './decorators/getCurrentUser.decorator';\nimport { Request, Response } from 'express';\nimport { GetCurrentUserCookie } from './decorators/getCurrentUserCookie.decorator';\nimport { UseCookie, UseCookieContext } from './decorators/UseCookie.decorator';\nimport {\n  ApiProperty,\n  ApiOkResponse,\n  ApiCreatedResponse,\n  ApiTags,\n  ApiBearerAuth,\n  ApiUnauthorizedResponse,\n  ApiForbiddenResponse,\n} from '@nestjs/swagger';\n\nexport class AcessDeniedResponse {\n  @ApiProperty()\n  message: string;\n  @ApiProperty()\n  statusCode: number;\n  @ApiProperty()\n  error: string;\n}\n\nexport class UnAuthorizedResponse {\n  @ApiProperty()\n  message: string;\n  @ApiProperty()\n  statusCode: number;\n}\n/**\n *  All use set cookies header when login from non browser fetch system should use storage to store accses token\n * then passing it via authorization header\n */\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @UsePipes(new ValidationPipe({ transform: true }))\n  @Post('/signup')\n  @ApiCreatedResponse({\n    description: 'Return Token',\n    type: TokenDto,\n  })\n  async register(@Body() req: SignUpDto): Promise {\n    const { username, name, email, password } = req;\n    const validatedDto = { username, name, email, password };\n    const { access_token, refresh_token } = await this.authService.signUpLocal(\n      validatedDto,\n    );\n\n    return { access_token, refresh_token };\n  }\n\n  @Post('/signin')\n  @HttpCode(200)\n  @ApiOkResponse({\n    description: 'Return Token',\n    type: TokenDtoWithUserId,\n  })\n  async login(@Body() req: SignInRequestDto): Promise {\n    const { username, password } = req;\n    const validatedDto = { username, password };\n    const response = this.authService.signinLocal(validatedDto);\n    const { access_token, refresh_token } = await response;\n    // console.log(rawReq.csrfToken());\n    // useAccesTokenCookie(access_token);\n    // useRefreshTokenCookie(refresh_token);\n\n    return { userId: req.username, access_token, refresh_token };\n  }\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @Post('/logout')\n  @ApiOkResponse({\n    description: 'Return Token',\n    type: Boolean,\n  })\n  @ApiUnauthorizedResponse({\n    description: 'Unauthorized',\n  })\n  @HttpCode(200)\n  async logout(@GetCurrentUser('userId') userId: string): Promise {\n    return this.authService.logout(userId);\n  }\n\n  @UseGuards(RtGuard)\n  @ApiBearerAuth()\n  @Post('/refresh')\n  @ApiUnauthorizedResponse({\n    description: 'Unauthorized',\n    type: UnAuthorizedResponse,\n  })\n  @ApiForbiddenResponse({\n    description: 'Access denied',\n    type: AcessDeniedResponse,\n  })\n  @ApiOkResponse({\n    description: 'Return Token',\n    type: TokenDto,\n  })\n  async refresh(\n    @GetCurrentUser('userId') userId: string,\n    @GetCurrentUser('refreshToken') refreshToken: string,\n  ): Promise {\n    const { access_token, refresh_token } =\n      await this.authService.refreshTokens(userId, refreshToken);\n\n    return { access_token, refresh_token };\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @ApiOkResponse({\n    description: 'Return User',\n    type: UserFromJwtDto,\n  })\n  @ApiUnauthorizedResponse({\n    description: 'Unauthorized',\n  })\n  @Get('/me')\n  getProfile(@Req() req: Request) {\n    return req.user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAllUsers\n                            \n                            \n                                    Async\n                                getUser\n                            \n                            \n                                    Async\n                                updateUserProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUsers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOkResponse({description: 'User response', type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUser(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':username')@ApiOkResponse({description: 'User response', type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserProfile(args: UserUpdateProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('update/profile')@ApiOkResponse({description: 'User response', type: UserDto})@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                UserUpdateProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Req,\n  Res,\n  Param,\n  Post,\n  Body,\n  HttpCode,\n} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UserDto, UserRespondDto } from './dto/user.dto';\n\nimport { LoggerService } from '../logger/logger.service';\nimport { User, Prisma } from '@prisma/client';\nimport { UserUpdateProfileDto } from './dto/user-update-profile.dto';\nimport { ApiProperty, ApiOkResponse, ApiTags } from '@nestjs/swagger';\n@ApiTags('User')\n@Controller('user')\nexport class UserController {\n  constructor(\n    private readonly userService: UserService,\n    private readonly logger: LoggerService,\n  ) {}\n\n  @Get()\n  @ApiOkResponse({\n    description: 'User response',\n    type: [UserRespondDto],\n  })\n  async getAllUsers(): Promise {\n    const data = this.userService.users({});\n    return data;\n  }\n\n  @Get(':username')\n  @ApiOkResponse({\n    description: 'User response',\n    type: UserRespondDto || 'User not found',\n  })\n  async getUser(\n    @Param('username') username: string,\n  ): Promise {\n    const user =\n      (await this.userService.user({\n        username: username,\n      })) || 'User not found';\n    return user;\n  }\n\n  @Post('update/profile')\n  @ApiOkResponse({\n    description: 'User response',\n    type: UserDto,\n  })\n  @HttpCode(200)\n  async updateUserProfile(\n    @Body() args: UserUpdateProfileDto,\n  ): Promise {\n    // TODO\n    const { username, ...params } = args;\n    const user = await this.userService.updateProfile({\n      username: username,\n      updateParams: params,\n    });\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDto.html":{"url":"classes/UserDto.html","title":"class - UserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                email\n                            \n                            \n                                eventsJoined\n                            \n                            \n                                id\n                            \n                            \n                                updatedAt\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        eventsJoined\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class UserDto {\n  @ApiProperty()\n  id: string;\n  @ApiProperty()\n  createdAt: Date;\n  @ApiProperty()\n  updatedAt: Date;\n  @ApiProperty()\n  username: string;\n  @ApiProperty()\n  email: string;\n  @ApiProperty()\n  eventsJoined: string[];\n}\nexport class UserRespondDto {\n  @ApiProperty()\n  id: string;\n  @ApiProperty()\n  createdAt: Date;\n  @ApiProperty()\n  updatedAt: Date;\n  @ApiProperty()\n  username: string;\n  @ApiProperty()\n  email: string;\n  // hashpw: string;\n  // hashedRt: string | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserFromJwtDto.html":{"url":"classes/UserFromJwtDto.html","title":"class - UserFromJwtDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserFromJwtDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                exp\n                            \n                            \n                                iat\n                            \n                            \n                                sub\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        exp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        iat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sub\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.dto.ts:38\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty } from 'class-validator';\nimport { ApiProperty, ApiOkResponse } from '@nestjs/swagger';\n\nexport class SignUpDto {\n  @ApiProperty()\n  username: string;\n  @ApiProperty()\n  password: string;\n  @IsEmail()\n  @ApiProperty()\n  email: string;\n  @ApiProperty()\n  @IsNotEmpty()\n  name: string;\n}\nexport class SignInRequestDto {\n  @ApiProperty()\n  username: string;\n  @ApiProperty()\n  password: string;\n}\nexport class TokenDto {\n  @ApiProperty()\n  access_token: string;\n  @ApiProperty()\n  refresh_token: string;\n}\n\nexport class TokenDtoWithUserId extends TokenDto {\n  @ApiProperty()\n  userId: string;\n}\n\nexport class UserFromJwtDto {\n  @ApiProperty()\n  sub: string;\n  @ApiProperty()\n  userId: string;\n  @ApiProperty()\n  iat: number;\n  @ApiProperty()\n  exp: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, CacheInterceptor } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\n\nimport { APP_INTERCEPTOR } from '@nestjs/core';\nimport { LoggerModule } from '../logger/logger.module';\n@Module({\n  controllers: [UserController],\n  providers: [UserService],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRespondDto.html":{"url":"classes/UserRespondDto.html","title":"class - UserRespondDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRespondDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                updatedAt\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class UserDto {\n  @ApiProperty()\n  id: string;\n  @ApiProperty()\n  createdAt: Date;\n  @ApiProperty()\n  updatedAt: Date;\n  @ApiProperty()\n  username: string;\n  @ApiProperty()\n  email: string;\n  @ApiProperty()\n  eventsJoined: string[];\n}\nexport class UserRespondDto {\n  @ApiProperty()\n  id: string;\n  @ApiProperty()\n  createdAt: Date;\n  @ApiProperty()\n  updatedAt: Date;\n  @ApiProperty()\n  username: string;\n  @ApiProperty()\n  email: string;\n  // hashpw: string;\n  // hashedRt: string | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                getData\n                            \n                            \n                                    Async\n                                updateProfile\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                            \n                                    Async\n                                user\n                            \n                            \n                                    Async\n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(data: Prisma.UserCreateInput)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Prisma.UserCreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getData\n                        \n                    \n                \n            \n            \n                \ngetData()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     literal type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateProfile(args: IUpdateProfileParamsArgs)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                IUpdateProfileParamsArgs\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        user\n                        \n                    \n                \n            \n            \n                \n                    \n                    user(userWhereUniqueInput: Prisma.UserWhereUniqueInput)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userWhereUniqueInput\n                                    \n                                            Prisma.UserWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        users\n                        \n                    \n                \n            \n            \n                \n                    \n                    users(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ForbiddenException } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { User, Prisma } from '@prisma/client';\ninterface IUpdateProfileParamsArgs {\n  updateParams: {\n    name?: string;\n    surname?: string;\n    bio?: string;\n  };\n  username: string;\n}\n@Injectable()\nexport class UserService {\n  constructor(private readonly prisma: PrismaService) {}\n  getData(): { message: string } {\n    return { message: 'Welcome to backend!' };\n  }\n\n  async user(\n    userWhereUniqueInput: Prisma.UserWhereUniqueInput,\n    // includeInput: Prisma.UserInclude | null = null,\n  ): Promise> {\n    return this.prisma.user.findUnique({\n      where: userWhereUniqueInput,\n      // include: includeInput,\n    });\n  }\n\n  async users(params: {\n    skip?: number;\n    take?: number;\n    cursor?: Prisma.UserWhereUniqueInput;\n    where?: Prisma.UserWhereInput;\n    orderBy?: Prisma.UserOrderByWithRelationInput;\n  }): Promise {\n    const { skip, take, cursor, where, orderBy } = params;\n    return this.prisma.user.findMany({\n      skip,\n      take,\n      cursor,\n      where,\n      orderBy,\n    });\n  }\n\n  async createUser(data: Prisma.UserCreateInput): Promise {\n    return this.prisma.user\n      .create({\n        data,\n      })\n      .catch((error) => {\n        if (error instanceof Prisma.PrismaClientKnownRequestError) {\n          if (error.code === 'P2002') {\n            throw new ForbiddenException('Credentials incorrect');\n          }\n        }\n        throw error;\n      });\n  }\n\n  async updateUser(params: {\n    where: Prisma.UserWhereUniqueInput;\n    data: Prisma.UserUpdateInput;\n  }): Promise {\n    const { where, data } = params;\n    return this.prisma.user.update({\n      data,\n      where,\n    });\n  }\n\n  async updateProfile(args: IUpdateProfileParamsArgs) {\n    const { username, updateParams } = args;\n    return this.prisma.user.update({\n      where: {\n        username: username,\n      },\n      data: {\n        profile: {\n          update: updateParams,\n        },\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserUpdateProfileDto.html":{"url":"classes/UserUpdateProfileDto.html","title":"class - UserUpdateProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserUpdateProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/user-update-profile.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                bio\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                surname\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user-update-profile.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user-update-profile.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        surname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user-update-profile.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user-update-profile.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class UserUpdateProfileDto {\n  @ApiProperty()\n  username: string;\n  @ApiProperty()\n  name?: string;\n  @ApiProperty()\n  surname?: string;\n  @ApiProperty()\n  bio?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"contributing.html":{"url":"contributing.html","title":"getting-started - contributing","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            configOptionForRoot\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            class\n            AcessDeniedResponse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            class\n            UnAuthorizedResponse\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.dto.ts\n            \n            class\n            SignInRequestDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.dto.ts\n            \n            class\n            SignUpDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/auth.dto.ts\n            \n            class\n            TokenDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.dto.ts\n            \n            class\n            TokenDtoWithUserId\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.dto.ts\n            \n            class\n            UserFromJwtDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/auth.processor.types.ts\n            \n            interface\n            ArgonHashPayload\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.processor.types.ts\n            \n            interface\n            TripleDesDecryptPayload\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/auth/decorators/UseCookie.decorator.ts\n            \n            variable\n            UseCookie\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/getCurrentUser.decorator.ts\n            \n            variable\n            GetCurrentUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/getCurrentUserCookie.decorator.ts\n            \n            variable\n            GetCurrentUserCookie\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guard/google-oauth.guard.ts\n            \n            injectable\n            GoogleOauthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guard/jwt-auth-graphql.guard.ts\n            \n            injectable\n            JwtAuthGuardGraphql\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/guard/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/guard/rt.guard.ts\n            \n            class\n            RtGuard\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/auth/strategy/jwt.at.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategy/jwt.rt.strategy.ts\n            \n            injectable\n            RtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/config/cacheDatabase.config.ts\n            \n            variable\n            cacheDatabaseConfigObject\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/env.Config.ts\n            \n            variable\n            envConfigObject\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/key.config.ts\n            \n            variable\n            JwtKeyConfigObject\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/queueDatabase.config.ts\n            \n            variable\n            queueDatabaseConfigObject\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/event/dto/create-event.dto.ts\n            \n            class\n            CreateEventDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/event/dto/create-event.dto.ts\n            \n            class\n            CreateEventResponseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/event/dto/create-event.dto.ts\n            \n            class\n            EventChatDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/event/dto/create-event.dto.ts\n            \n            class\n            EventDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/event/dto/create-event.dto.ts\n            \n            class\n            GetEventByIdDto\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/event/dto/participant.dto.ts\n            \n            class\n            AddAndRemoveParticipantDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/event/dto/participant.dto.ts\n            \n            class\n            AddParticipantDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/event/dto/participant.dto.ts\n            \n            class\n            RemoveParticipantDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/event/event.controller.ts\n            \n            controller\n            EventController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/event/event.service.ts\n            \n            injectable\n            EventService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/event/event.service.ts\n            \n            interface\n            IAddParticipantArgs\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/event/event.service.ts\n            \n            interface\n            ICreateEventArgs\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/logger/logger.middleware.ts\n            \n            injectable\n            LoggerMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/logger/logger.service.ts\n            \n            injectable\n            LoggerService\n            \n                44 %\n                (4/9)\n            \n        \n        \n            \n                \n                src/logger/winston.ts\n            \n            variable\n            winstonLogger\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/message/message.controller.ts\n            \n            controller\n            MessageController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/message/message.controller.ts\n            \n            interface\n            SendMessageToChatDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/message/message.model.ts\n            \n            class\n            Message\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/message/message.resolver.ts\n            \n            class\n            GetMessageInput\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/message/message.resolver.ts\n            \n            class\n            MessageResolver\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/message/message.resolver.ts\n            \n            class\n            SaveMessageInput\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/message/message.resolver.ts\n            \n            variable\n            pubSub\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/message/message.service.ts\n            \n            injectable\n            MessageService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/message/message.service.ts\n            \n            interface\n            ISendMessageToChatArgs\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/types/interface/authKey.interface.ts\n            \n            interface\n            AuthKey\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/types/interface/cacheDatabaseConfig.interface.ts\n            \n            interface\n            CacheDatabaseConfig\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/types/interface/envConfig.interface.ts\n            \n            interface\n            envConfig\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/types/interface/jwtPayload.interface.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/types/interface/jwtPayload.interface.ts\n            \n            interface\n            JwtPayloadForSign\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/types/interface/jwtPayload.interface.ts\n            \n            interface\n            JwtPayloadWithRt\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/types/interface/queueDatabaseConfig.interface.ts\n            \n            interface\n            QueueDatabaseConfig\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/dto/user-update-profile.dto.ts\n            \n            class\n            UserUpdateProfileDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/dto/user.dto.ts\n            \n            class\n            UserDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/user/dto/user.dto.ts\n            \n            class\n            UserRespondDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            interface\n            IUpdateProfileParamsArgs\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @liaoliaots/nestjs-redis : ^9.0.1\n        \n            @nestjs/apollo : ^10.0.22\n        \n            @nestjs/common : ^9.1.2\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/graphql : ^10.0.22\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/mongoose : ^9.2.0\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/serve-static : ^3.0.0\n        \n            @nestjs/swagger : ^6.1.2\n        \n            @prisma/client : ^4.3.1\n        \n            @types/express : ^4.17.14\n        \n            @types/graphql : ^14.5.0\n        \n            apollo-server-express : ^3.10.2\n        \n            argon2 : ^0.29.1\n        \n            cache-manager : ^4.1.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            crypto-js : ^4.1.1\n        \n            express : ^4.18.1\n        \n            graphql : ^16.6.0\n        \n            graphql-subscriptions : ^2.0.0\n        \n            graphql-ws : ^5.10.1\n        \n            ioredis : ^5.2.3\n        \n            mongoose : ^6.5.3\n        \n            nest-winston : ^1.7.0\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            winston : ^3.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            tokenType   (src/.../auth.processor.types.ts)\n                        \n                        \n                            UseCookieContext   (src/.../UseCookie.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/auth.processor.types.ts\n    \n        \n            \n                \n                    \n                        \n                        tokenType\n                    \n                \n                    \n                        \n                            helper type declaration for AuthProcessor\n\n                        \n                    \n                        \n                            \n                                 accessToken\n                            \n                        \n                        \n                            \n                                Value : accessToken\n                            \n                        \n                        \n                            \n                                 refreshToken\n                            \n                        \n                        \n                            \n                                Value : refreshToken\n                            \n                        \n            \n        \n\n    src/auth/decorators/UseCookie.decorator.ts\n    \n        \n            \n                \n                    \n                        \n                        UseCookieContext\n                    \n                \n                        \n                            \n                                 accessToken\n                            \n                        \n                        \n                            \n                                Value : jwt-accestoken\n                            \n                        \n                        \n                            \n                                 refreshToken\n                            \n                        \n                        \n                            \n                                Value : jwt-refreshtoken\n                            \n                        \n                        \n                            \n                                 clearTokens\n                            \n                        \n                        \n                            \n                                Value : jwt-clearToken\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/envConfig.html":{"url":"interfaces/envConfig.html","title":"interface - envConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  envConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/interface/envConfig.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            globalPrefix\n                                        \n                                \n                                \n                                        \n                                            port\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        globalPrefix\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        globalPrefix:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        port:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface envConfig {\n  port: number;\n  globalPrefix: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nHow to use development server\nInstall Docker \n# pull image\n$ docker pull bitnami/redis:latest\n$ docker pull bitnami/mysql:latestFinally run dev compose to expose database and cache server to localhost\n# compose up\n$ docker compose -f dev-compose.yml up\n# compose down for stop server\n$ docker compose -f dev-compose.yml down\n# docker compose up command use -d at the end for run it on background.Components in compose\n\nRedis master 1 instance -> expose port 5665 to localhost\nmysql master 1 instance -> expose port 6381 to localhost\nRedis slave\nmysql slave\n\ntechnically dev server load .env that preconfig for development server.\nno need to addition config for development server.\nthen wait a bit to docker compose to initialize... \nfirst migrate schema to db table use\n# This command do db operation for sync and create table to match schema. \n$ npx prisma migrate dev -n init then open backend dev server\n# run backend server\n$ yarn start:dev\n# or\n$ npm run start:devPrisma ORM Command ()\nadditional command for automatic interact with databse database\n# when change prisma schema run this command to sync schema to db \n$ npx prisma migrate dev -n \n# this command will hard reset the database (all data will be deleted), then do all migration apply.\n$ npx prisma migrate reset \n# deploy \n$ npx prisma migrate deploy What Prisma migration do .\n-- CreateTable\nCREATE TABLE `Message` (\n    `sender_id` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,\n    `senderName` VARCHAR(191) NOT NULL,\n    `message` VARCHAR(191) NOT NULL,\n    `date` DATETIME(3) NOT NULL DEFAULT CURRENT_TIMESTAMP(3),\n\n    PRIMARY KEY (`sender_id`)\n) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\n-- CreateTable\nCREATE TABLE `Log` (\n    `id` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,\n    `level` VARCHAR(191) NOT NULL,\n    `message` VARCHAR(191) NOT NULL,\n    `context` VARCHAR(191) NOT NULL,\n    `timestamp` DATE NOT NULL,\n\n    INDEX `timestamp_1`(`timestamp`),\n    PRIMARY KEY (`id`)\n) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\n-- CreateTable\nCREATE TABLE `User` (\n    `id` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,\n    `createdAt` DATETIME(3) NOT NULL DEFAULT CURRENT_TIMESTAMP(3),\n    `updatedAt` DATETIME(3) NOT NULL,\n    `username` VARCHAR(191) NOT NULL,\n    `name` VARCHAR(191) NOT NULL,\n    `email` VARCHAR(191) NOT NULL,\n    `hashpw` VARCHAR(1000) NOT NULL,\n    `hashedRt` VARCHAR(1000) NULL,\n\n    UNIQUE INDEX `User_username_key`(`username`),\n    UNIQUE INDEX `User_email_key`(`email`),\n    PRIMARY KEY (`id`)\n) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;มีปัญหาไรทักเฟสบุค ขอบคุณ\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EventModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LoggerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MessageModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_EventModule\n\n\n\ncluster_EventModule_providers\n\n\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_exports\n\n\n\ncluster_LoggerModule_providers\n\n\n\ncluster_MessageModule\n\n\n\ncluster_MessageModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nEventModule\n\nEventModule\n\nAppModule -->\n\nEventModule->AppModule\n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nLoggerMiddleware \n\nLoggerMiddleware \n\nLoggerMiddleware  -->\n\nLoggerModule->LoggerMiddleware \n\n\n\n\n\nLoggerService \n\nLoggerService \n\nLoggerService  -->\n\nLoggerModule->LoggerService \n\n\n\n\n\nMessageModule\n\nMessageModule\n\nAppModule -->\n\nMessageModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nEventModule -->\n\nPrismaModule->EventModule\n\n\n\nLoggerModule -->\n\nPrismaModule->LoggerModule\n\n\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nRtStrategy\n\nRtStrategy\n\nAuthModule -->\n\nRtStrategy->AuthModule\n\n\n\n\n\nEventService\n\nEventService\n\nEventModule -->\n\nEventService->EventModule\n\n\n\n\n\nLoggerMiddleware\n\nLoggerMiddleware\n\nLoggerModule -->\n\nLoggerMiddleware->LoggerModule\n\n\n\n\n\nLoggerService\n\nLoggerService\n\nLoggerModule -->\n\nLoggerService->LoggerModule\n\n\n\n\n\nMessageService\n\nMessageService\n\nMessageModule -->\n\nMessageService->MessageModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    13 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    23 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    14 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.2\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Repository : git+https://github.com/Maszz/sf341-backend\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"todo.html":{"url":"todo.html","title":"getting-started - todo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            cacheDatabaseConfigObject   (src/.../cacheDatabase.config.ts)\n                        \n                        \n                            configOptionForRoot   (src/.../app.module.ts)\n                        \n                        \n                            envConfigObject   (src/.../env.Config.ts)\n                        \n                        \n                            GetCurrentUser   (src/.../getCurrentUser.decorator.ts)\n                        \n                        \n                            GetCurrentUserCookie   (src/.../getCurrentUserCookie.decorator.ts)\n                        \n                        \n                            JwtKeyConfigObject   (src/.../key.config.ts)\n                        \n                        \n                            pubSub   (src/.../message.resolver.ts)\n                        \n                        \n                            queueDatabaseConfigObject   (src/.../queueDatabase.config.ts)\n                        \n                        \n                            UseCookie   (src/.../UseCookie.decorator.ts)\n                        \n                        \n                            winstonLogger   (src/.../winston.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/cacheDatabase.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cacheDatabaseConfigObject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\n  'cacheDatabase',\n  () => ({\n    ttl: parseInt(process.env.CACHE_DATABASE_CONFIG_TTL) || 5, // seconds\n    max: parseInt(process.env.CACHE_DATABASE_CONFIG_MAX) || 10, // maximum number of items in cache\n    isGlobal: true,\n    host: process.env.CACHE_DATABASE_CONFIG_HOST,\n    port: parseInt(process.env.CACHE_DATABASE_CONFIG_PORT),\n    password: process.env.CACHE_DATABASE_CONFIG_PASSWORD || undefined,\n  }),\n)\n                    \n                \n\n\n        \n    \n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        configOptionForRoot\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  load: [\n    envConfigObject,\n    // queueDatabaseConfigObject,\n    cacheDatabaseConfigObject,\n    JwtKeyConfigObject,\n  ],\n  cache: true,\n  isGlobal: true,\n}\n                    \n                \n\n\n        \n    \n\n    src/config/env.Config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        envConfigObject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs('envConfig', () => ({\n  port: parseInt(process.env.PORT),\n  globalPrefix: process.env.GLOBAL_PREFIX || '',\n}))\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/getCurrentUser.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetCurrentUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: keyof JwtPayloadWithRt | undefined, context: ExecutionContext) => {\n    const request = context.switchToHttp().getRequest();\n    if (!data) return request.user;\n    return request.user[data];\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/getCurrentUserCookie.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetCurrentUserCookie\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: string, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest() as Request;\n    return data ? request.signedCookies?.[data] : request.signedCookies;\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/config/key.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        JwtKeyConfigObject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs('jwtKey', () => ({\n  at_privateKey: Buffer.from(process.env.AT_PRIVATE, 'base64').toString('utf8'),\n  at_publicKey: Buffer.from(process.env.AT_PUBLIC, 'base64').toString('utf8'),\n  rt_privateKey: Buffer.from(process.env.RT_PRIVATE, 'base64').toString('utf8'),\n  rt_publicKey: Buffer.from(process.env.RT_PUBLIC, 'base64').toString('utf8'),\n}))\n                    \n                \n\n\n        \n    \n\n    src/message/message.resolver.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pubSub\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new PubSub()\n                    \n                \n\n\n        \n    \n\n    src/config/queueDatabase.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        queueDatabaseConfigObject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\n  'queueDatabase',\n  () => ({\n    host: process.env.QUEUE_DATABASE_CONFIG_HOST,\n    port: parseInt(process.env.QUEUE_DATABASE_CONFIG_PORT),\n    password: process.env.QUEUE_DATABASE_CONFIG_PASSWORD || undefined,\n  }),\n)\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/UseCookie.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UseCookie\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (useCookieContext: UseCookieContext, ctx: ExecutionContext) => {\n    const response = ctx.switchToHttp().getResponse() as Response;\n    let useCookie: (key?: string, value?: string) => void;\n    if (useCookieContext == UseCookieContext.clearTokens) {\n      useCookie = (key: string) => {\n        return response.clearCookie(key);\n      };\n    } else {\n      useCookie = (value: string) => {\n        return response.cookie(useCookieContext, value, {\n          // signed: true,\n          // httpOnly: true,\n          /**\n           * use this when want use authorization header with Cookies\n           */\n        });\n      };\n    }\n\n    return useCookie;\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/logger/winston.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        winstonLogger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : WinstonModule.createLogger({\n  transports: [\n    new winston.transports.Console({\n      format: winston.format.combine(\n        winston.format.timestamp(),\n        winston.format.ms(),\n        nestWinstonModuleUtilities.format.nestLike('App', {\n          prettyPrint: true,\n        }),\n      ),\n    }),\n    // new winston.transports.MongoDB({\n    //   db: process.env.MONGO_URI_NAS,\n    //   options: {\n    //     useUnifiedTopology: true,\n    //   },\n    //   collection: 'logs',\n    // }),\n  ],\n})\n                    \n                \n\n            \n                \n                    Winston Logger Instnace.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
