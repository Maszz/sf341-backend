// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  // url      = "mongodb+srv://user:cyCrKA5yF5O0fchi@cluster0.ubk8hwf.mongodb.net/sf341?retryWrites=true&w=majority"
  // url      = "mongodb://192.168.1.183:49155/sf341?readPreference=primary&directConnection=true&ssl=false"
  url      = env("DATABASE_URL")
}

model Log {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  level     String
  message   String
  context   String
  /// Could not determine type: the field only had null or empty values in the sample set.
  timestamp DateTime @db.Date

  @@index([timestamp], map: "timestamp_1")
}

model User {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  username      String      @unique
  email         String      @unique
  onboarding    Boolean     @default(false)
  userSecret    UserSecret?
  profile       Profile?
  eventsJoined  String[]    @db.ObjectId
  events        Event[]     @relation("participants", fields: [eventsJoined], references: [id])
  createdEvents Event[]     @relation("creator")
  Session       Session[]
  categoryIDs   String[]    @db.ObjectId
  categories    Category[]  @relation(fields: [categoryIDs], references: [id])
  followedBy    User[]      @relation("UserFollows", fields: [followedByIDs], references: [id])
  followedByIDs String[]    @db.ObjectId
  following     User[]      @relation("UserFollows", fields: [followingIDs], references: [id])
  followingIDs  String[]    @db.ObjectId
}

model Category {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String   @unique
  userIDs String[] @db.ObjectId
  users   User[]   @relation(fields: [userIDs], references: [id])
}

model Profile {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  realName    String?
  displayName String?
  gender      String?
  bio         String?

  isProfilePublic Boolean @default(true)
  user            User?   @relation(fields: [userId], references: [id])
  userId          String? @unique
}

model UserSecret {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  updatedAt DateTime @updatedAt
  hashpw    String
  user      User?    @relation(fields: [userId], references: [username])
  userId    String?  @unique
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  hashedAt  String?
  hashedRt  String?
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  Devices   Device   @relation(fields: [deviceIDs], references: [id])
  deviceIDs String   @db.ObjectId
}

model Device {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime  @default(now())
  deviceId     String?   @unique
  platform     String?
  manufacturer String?
  sessions     Session[]
}

type LatLng {
  latitude  Float
  longitude Float
}

type Region {
  latitudeDelta  Float
  longitudeDelta Float
  latitude       Float
  longitude      Float
}

type Color {
  c1 String
  c2 String
}

enum MemberType {
  LIMIT
  UNLIMITED
}

model Event {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  name            String
  description     String
  startDate       DateTime
  endDate         DateTime
  locationName    String
  locationDetails String
  location        Region
  locationMarker  LatLng
  memberType      MemberType
  memberLimit     Int
  isPublic        Boolean
  eventColors     Color
  creatorId       String
  creator         User?      @relation("creator", fields: [creatorId], references: [username])
  participantsId  String[]   @db.ObjectId
  participants    User[]     @relation("participants", fields: [participantsId], references: [id])
  eventChat       EventChat?
}

model EventChat {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  updatedAt DateTime  @updatedAt
  eventId   String    @unique @db.ObjectId
  event     Event?    @relation(fields: [eventId], references: [id])
  messages  Message[]
}

model Message {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  senderName  String
  message     String
  date        DateTime   @default(now())
  EventChat   EventChat? @relation(fields: [eventChatId], references: [id])
  eventChatId String     @db.ObjectId
}

// enum Role {
//   USER
//   ADMIN
// }
