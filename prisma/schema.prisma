// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  // url      = "mongodb+srv://user:cyCrKA5yF5O0fchi@cluster0.ubk8hwf.mongodb.net/sf341?retryWrites=true&w=majority"
  // url      = "mongodb://192.168.1.183:49155/sf341?readPreference=primary&directConnection=true&ssl=false"
  url      = env("DATABASE_URL")
}

model Log {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  level     String
  message   String
  context   String
  /// Could not determine type: the field only had null or empty values in the sample set.
  timestamp DateTime @db.Date

  @@index([timestamp], map: "timestamp_1")
}

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  username       String          @unique
  email          String          @unique
  userHashedData UserHashedData?
  profile        Profile?
  eventsJoined   String[]        @db.ObjectId
  events         Event[]         @relation("participants", fields: [eventsJoined], references: [id])
  createdEvents  Event[]         @relation("creator")
}

model Profile {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  name    String?
  surname String?
  bio     String?
  user    User?   @relation(fields: [userId], references: [username])
  userId  String? @unique
}

model UserHashedData {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  updatedAt DateTime @updatedAt
  hashpw    String
  hashedRt  String?
  user      User?    @relation(fields: [userId], references: [username])
  userId    String?  @unique
}

model Event {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  name           String
  date           DateTime
  location       String
  description    String
  creatorId      String
  creator        User?      @relation("creator", fields: [creatorId], references: [username])
  participantsId String[]   @db.ObjectId
  participants   User[]     @relation("participants", fields: [participantsId], references: [id])
  eventChat      EventChat?
}

model EventChat {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  updatedAt DateTime  @updatedAt
  eventId   String    @unique @db.ObjectId
  event     Event?    @relation(fields: [eventId], references: [id])
  messages  Message[]
}

model Message {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  senderName  String
  message     String
  date        DateTime   @default(now())
  EventChat   EventChat? @relation(fields: [eventChatId], references: [id])
  eventChatId String     @db.ObjectId
}

// enum Role {
//   USER
//   ADMIN
// }
